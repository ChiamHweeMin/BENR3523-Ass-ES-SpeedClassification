
ASS-SpeedFan-NanoEdgeLibClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002708  08008180  08008180  00018180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a888  0800a888  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a888  0800a888  0001a888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a890  0800a890  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a890  0800a890  0001a890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a894  0800a894  0001a894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038c8  200001ec  0800aa84  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003ab4  0800aa84  00023ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eabb  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6c  00000000  00000000  0002ecd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00030c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00031910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021078  00000000  00000000  00032500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6fb  00000000  00000000  00053578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c37de  00000000  00000000  00062c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c9  00000000  00000000  00126451  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d0  00000000  00000000  0012651c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008168 	.word	0x08008168

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08008168 	.word	0x08008168

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint16_t newClass = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	807b      	strh	r3, [r7, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f56:	f000 fc36 	bl	80017c6 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Load the NanoEdge AI library with the trained knowledge. */
  enum neai_state error_code = neai_classification_init( knowledge );
 8000f5a:	4876      	ldr	r0, [pc, #472]	; (8001134 <main+0x1e8>)
 8000f5c:	f003 fafc 	bl	8004558 <neai_classification_init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	717b      	strb	r3, [r7, #5]
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f8fc 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 f9cc 	bl	8001304 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6c:	f000 f99a 	bl	80012a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f70:	f000 f958 	bl	8001224 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  buf[0] = LIS3DH_CTRL_REG1;
 8000f74:	4b70      	ldr	r3, [pc, #448]	; (8001138 <main+0x1ec>)
 8000f76:	2220      	movs	r2, #32
 8000f78:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x97;
 8000f7a:	4b6f      	ldr	r3, [pc, #444]	; (8001138 <main+0x1ec>)
 8000f7c:	2297      	movs	r2, #151	; 0x97
 8000f7e:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, LIS3DH_V_CHIP_ADDR, buf, 2, HAL_MAX_DELAY);
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2302      	movs	r3, #2
 8000f88:	4a6b      	ldr	r2, [pc, #428]	; (8001138 <main+0x1ec>)
 8000f8a:	2132      	movs	r1, #50	; 0x32
 8000f8c:	486b      	ldr	r0, [pc, #428]	; (800113c <main+0x1f0>)
 8000f8e:	f000 ff87 	bl	8001ea0 <HAL_I2C_Master_Transmit>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b6a      	ldr	r3, [pc, #424]	; (8001140 <main+0x1f4>)
 8000f98:	701a      	strb	r2, [r3, #0]
  if ( ret != HAL_OK) {
 8000f9a:	4b69      	ldr	r3, [pc, #420]	; (8001140 <main+0x1f4>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00e      	beq.n	8000fc0 <main+0x74>
	  sprintf((char*)buf, "ErrorTx CTRL_REG1\r\n");
 8000fa2:	4968      	ldr	r1, [pc, #416]	; (8001144 <main+0x1f8>)
 8000fa4:	4864      	ldr	r0, [pc, #400]	; (8001138 <main+0x1ec>)
 8000fa6:	f004 fc11 	bl	80057cc <siprintf>
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000faa:	4863      	ldr	r0, [pc, #396]	; (8001138 <main+0x1ec>)
 8000fac:	f7ff f910 	bl	80001d0 <strlen>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	495f      	ldr	r1, [pc, #380]	; (8001138 <main+0x1ec>)
 8000fba:	4863      	ldr	r0, [pc, #396]	; (8001148 <main+0x1fc>)
 8000fbc:	f002 fe5c 	bl	8003c78 <HAL_UART_Transmit>
  }

  buf[0] = LIS3DH_CTRL_REG4;
 8000fc0:	4b5d      	ldr	r3, [pc, #372]	; (8001138 <main+0x1ec>)
 8000fc2:	2223      	movs	r2, #35	; 0x23
 8000fc4:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x08;
 8000fc6:	4b5c      	ldr	r3, [pc, #368]	; (8001138 <main+0x1ec>)
 8000fc8:	2208      	movs	r2, #8
 8000fca:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, LIS3DH_V_CHIP_ADDR, buf, 2, HAL_MAX_DELAY);
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	4a58      	ldr	r2, [pc, #352]	; (8001138 <main+0x1ec>)
 8000fd6:	2132      	movs	r1, #50	; 0x32
 8000fd8:	4858      	ldr	r0, [pc, #352]	; (800113c <main+0x1f0>)
 8000fda:	f000 ff61 	bl	8001ea0 <HAL_I2C_Master_Transmit>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b57      	ldr	r3, [pc, #348]	; (8001140 <main+0x1f4>)
 8000fe4:	701a      	strb	r2, [r3, #0]
  if ( ret != HAL_OK) {
 8000fe6:	4b56      	ldr	r3, [pc, #344]	; (8001140 <main+0x1f4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00e      	beq.n	800100c <main+0xc0>
	  sprintf((char*)buf, "ErrorTx CTRL_REG4\r\n");
 8000fee:	4957      	ldr	r1, [pc, #348]	; (800114c <main+0x200>)
 8000ff0:	4851      	ldr	r0, [pc, #324]	; (8001138 <main+0x1ec>)
 8000ff2:	f004 fbeb 	bl	80057cc <siprintf>
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000ff6:	4850      	ldr	r0, [pc, #320]	; (8001138 <main+0x1ec>)
 8000ff8:	f7ff f8ea 	bl	80001d0 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	494c      	ldr	r1, [pc, #304]	; (8001138 <main+0x1ec>)
 8001006:	4850      	ldr	r0, [pc, #320]	; (8001148 <main+0x1fc>)
 8001008:	f002 fe36 	bl	8003c78 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 /* get fresh accelerometer data */
	 for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 800100c:	2300      	movs	r3, #0
 800100e:	80fb      	strh	r3, [r7, #6]
 8001010:	e070      	b.n	80010f4 <main+0x1a8>
		buf[0] = LIS3DH_OUT_X_L | 0x80;
 8001012:	4b49      	ldr	r3, [pc, #292]	; (8001138 <main+0x1ec>)
 8001014:	22a8      	movs	r2, #168	; 0xa8
 8001016:	701a      	strb	r2, [r3, #0]
		ret = HAL_I2C_Master_Transmit(&hi2c1, LIS3DH_V_CHIP_ADDR, buf, 1, HAL_MAX_DELAY);
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	4a45      	ldr	r2, [pc, #276]	; (8001138 <main+0x1ec>)
 8001022:	2132      	movs	r1, #50	; 0x32
 8001024:	4845      	ldr	r0, [pc, #276]	; (800113c <main+0x1f0>)
 8001026:	f000 ff3b 	bl	8001ea0 <HAL_I2C_Master_Transmit>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b44      	ldr	r3, [pc, #272]	; (8001140 <main+0x1f4>)
 8001030:	701a      	strb	r2, [r3, #0]
		if (ret != HAL_OK) {
 8001032:	4b43      	ldr	r3, [pc, #268]	; (8001140 <main+0x1f4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <main+0xf6>
			i--;	//New data not ready, skip this data
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	3b01      	subs	r3, #1
 800103e:	80fb      	strh	r3, [r7, #6]
 8001040:	e055      	b.n	80010ee <main+0x1a2>
		}
		else {
			buf[0] = LIS3DH_OUT_X_L | 0x80 | 0x40;
 8001042:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <main+0x1ec>)
 8001044:	22e8      	movs	r2, #232	; 0xe8
 8001046:	701a      	strb	r2, [r3, #0]
			ret = HAL_I2C_Master_Receive(&hi2c1, LIS3DH_V_CHIP_ADDR, buf, 6, HAL_MAX_DELAY);
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2306      	movs	r3, #6
 8001050:	4a39      	ldr	r2, [pc, #228]	; (8001138 <main+0x1ec>)
 8001052:	2132      	movs	r1, #50	; 0x32
 8001054:	4839      	ldr	r0, [pc, #228]	; (800113c <main+0x1f0>)
 8001056:	f001 f817 	bl	8002088 <HAL_I2C_Master_Receive>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b38      	ldr	r3, [pc, #224]	; (8001140 <main+0x1f4>)
 8001060:	701a      	strb	r2, [r3, #0]
			if (ret != HAL_OK) {
 8001062:	4b37      	ldr	r3, [pc, #220]	; (8001140 <main+0x1f4>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <main+0x126>
				i--;	//New data not ready, skip this data
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	3b01      	subs	r3, #1
 800106e:	80fb      	strh	r3, [r7, #6]
 8001070:	e03d      	b.n	80010ee <main+0x1a2>
			} else {
				acc_buffer[NB_AXES * i] = ((buf[1] << 8) | buf[0]);
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <main+0x1ec>)
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <main+0x1ec>)
 800107a:	7812      	ldrb	r2, [r2, #0]
 800107c:	ea43 0102 	orr.w	r1, r3, r2
 8001080:	88fa      	ldrh	r2, [r7, #6]
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	ee07 1a90 	vmov	s15, r1
 800108c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001090:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <main+0x204>)
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	edc3 7a00 	vstr	s15, [r3]
				acc_buffer[(NB_AXES * i) + 1] = ((buf[3] << 8) | buf[2]);
 800109a:	4b27      	ldr	r3, [pc, #156]	; (8001138 <main+0x1ec>)
 800109c:	78db      	ldrb	r3, [r3, #3]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	4a25      	ldr	r2, [pc, #148]	; (8001138 <main+0x1ec>)
 80010a2:	7892      	ldrb	r2, [r2, #2]
 80010a4:	ea43 0102 	orr.w	r1, r3, r2
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	3301      	adds	r3, #1
 80010b2:	ee07 1a90 	vmov	s15, r1
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	4a25      	ldr	r2, [pc, #148]	; (8001150 <main+0x204>)
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	edc3 7a00 	vstr	s15, [r3]
				acc_buffer[(NB_AXES * i) + 2] = ((buf[5] << 8) | buf[4]);
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <main+0x1ec>)
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <main+0x1ec>)
 80010cc:	7912      	ldrb	r2, [r2, #4]
 80010ce:	ea43 0102 	orr.w	r1, r3, r2
 80010d2:	88fa      	ldrh	r2, [r7, #6]
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	3302      	adds	r3, #2
 80010dc:	ee07 1a90 	vmov	s15, r1
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <main+0x204>)
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	edc3 7a00 	vstr	s15, [r3]
	 for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	3301      	adds	r3, #1
 80010f2:	80fb      	strh	r3, [r7, #6]
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010fa:	d38a      	bcc.n	8001012 <main+0xc6>
			}
		}
	 }

	 /* classify the input signal and get a class id as output */
	 neai_classification(acc_buffer, output_class_buffer, &newClass);
 80010fc:	1cbb      	adds	r3, r7, #2
 80010fe:	461a      	mov	r2, r3
 8001100:	4914      	ldr	r1, [pc, #80]	; (8001154 <main+0x208>)
 8001102:	4813      	ldr	r0, [pc, #76]	; (8001150 <main+0x204>)
 8001104:	f003 fb2a 	bl	800475c <neai_classification>

	 /* print the result to the serial */
	 sprintf((char *)buf, "\nSpeed Detected: %s.\n\n", id2class[newClass]);
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	461a      	mov	r2, r3
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <main+0x20c>)
 800110e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001112:	461a      	mov	r2, r3
 8001114:	4911      	ldr	r1, [pc, #68]	; (800115c <main+0x210>)
 8001116:	4808      	ldr	r0, [pc, #32]	; (8001138 <main+0x1ec>)
 8001118:	f004 fb58 	bl	80057cc <siprintf>
	 HAL_UART_Transmit(&huart2, buf, strlen((char const*)buf), HAL_MAX_DELAY);
 800111c:	4806      	ldr	r0, [pc, #24]	; (8001138 <main+0x1ec>)
 800111e:	f7ff f857 	bl	80001d0 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29a      	uxth	r2, r3
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	4903      	ldr	r1, [pc, #12]	; (8001138 <main+0x1ec>)
 800112c:	4806      	ldr	r0, [pc, #24]	; (8001148 <main+0x1fc>)
 800112e:	f002 fda3 	bl	8003c78 <HAL_UART_Transmit>
	 for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 8001132:	e76b      	b.n	800100c <main+0xc0>
 8001134:	080081dc 	.word	0x080081dc
 8001138:	200002e4 	.word	0x200002e4
 800113c:	20000208 	.word	0x20000208
 8001140:	200002e0 	.word	0x200002e0
 8001144:	0800819c 	.word	0x0800819c
 8001148:	2000025c 	.word	0x2000025c
 800114c:	080081b0 	.word	0x080081b0
 8001150:	20000304 	.word	0x20000304
 8001154:	20001b04 	.word	0x20001b04
 8001158:	20000000 	.word	0x20000000
 800115c:	080081c4 	.word	0x080081c4

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	; 0x58
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2244      	movs	r2, #68	; 0x44
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f003 feba 	bl	8004ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001182:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001186:	f001 fba3 	bl	80028d0 <HAL_PWREx_ControlVoltageScaling>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001190:	f000 f902 	bl	8001398 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001194:	f001 fb7e 	bl	8002894 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <SystemClock_Config+0xc0>)
 800119a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119e:	4a20      	ldr	r2, [pc, #128]	; (8001220 <SystemClock_Config+0xc0>)
 80011a0:	f023 0318 	bic.w	r3, r3, #24
 80011a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011a8:	2314      	movs	r3, #20
 80011aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011b0:	2301      	movs	r3, #1
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011b8:	2360      	movs	r3, #96	; 0x60
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011c0:	2301      	movs	r3, #1
 80011c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011c8:	2310      	movs	r3, #16
 80011ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011cc:	2307      	movs	r3, #7
 80011ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fbcd 	bl	800297c <HAL_RCC_OscConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011e8:	f000 f8d6 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ec:	230f      	movs	r3, #15
 80011ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f0:	2303      	movs	r3, #3
 80011f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	2101      	movs	r1, #1
 8001204:	4618      	mov	r0, r3
 8001206:	f001 ffcd 	bl	80031a4 <HAL_RCC_ClockConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001210:	f000 f8c2 	bl	8001398 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001214:	f002 fbe0 	bl	80039d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001218:	bf00      	nop
 800121a:	3758      	adds	r7, #88	; 0x58
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_I2C1_Init+0x74>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <MX_I2C1_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_I2C1_Init+0x74>)
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <MX_I2C1_Init+0x7c>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_I2C1_Init+0x74>)
 800123c:	2201      	movs	r2, #1
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_I2C1_Init+0x74>)
 8001260:	f000 fd8e 	bl	8001d80 <HAL_I2C_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800126a:	f000 f895 	bl	8001398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <MX_I2C1_Init+0x74>)
 8001272:	f001 fa77 	bl	8002764 <HAL_I2CEx_ConfigAnalogFilter>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800127c:	f000 f88c 	bl	8001398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001280:	2100      	movs	r1, #0
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_I2C1_Init+0x74>)
 8001284:	f001 fab9 	bl	80027fa <HAL_I2CEx_ConfigDigitalFilter>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 f883 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000208 	.word	0x20000208
 800129c:	40005400 	.word	0x40005400
 80012a0:	00707cbb 	.word	0x00707cbb

080012a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_USART2_UART_Init+0x58>)
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <MX_USART2_UART_Init+0x5c>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_USART2_UART_Init+0x58>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_USART2_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_USART2_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_USART2_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_USART2_UART_Init+0x58>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_USART2_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_USART2_UART_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_USART2_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_USART2_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_USART2_UART_Init+0x58>)
 80012e8:	f002 fc78 	bl	8003bdc <HAL_UART_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012f2:	f000 f851 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000025c 	.word	0x2000025c
 8001300:	40004400 	.word	0x40004400

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_GPIO_Init+0x8c>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <MX_GPIO_Init+0x8c>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_GPIO_Init+0x8c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_GPIO_Init+0x8c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a16      	ldr	r2, [pc, #88]	; (8001390 <MX_GPIO_Init+0x8c>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_GPIO_Init+0x8c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_GPIO_Init+0x8c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <MX_GPIO_Init+0x8c>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_GPIO_Init+0x8c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2108      	movs	r1, #8
 8001366:	480b      	ldr	r0, [pc, #44]	; (8001394 <MX_GPIO_Init+0x90>)
 8001368:	f000 fcf2 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800136c:	2308      	movs	r3, #8
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4619      	mov	r1, r3
 8001382:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_GPIO_Init+0x90>)
 8001384:	f000 fb7a 	bl	8001a7c <HAL_GPIO_Init>

}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	48000400 	.word	0x48000400

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <Error_Handler+0x8>
	...

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_MspInit+0x44>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_MspInit+0x44>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6613      	str	r3, [r2, #96]	; 0x60
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_MspInit+0x44>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_MspInit+0x44>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_MspInit+0x44>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6593      	str	r3, [r2, #88]	; 0x58
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_MspInit+0x44>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b09e      	sub	sp, #120	; 0x78
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	2254      	movs	r2, #84	; 0x54
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fd6b 	bl	8004ee8 <memset>
  if(hi2c->Instance==I2C1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1f      	ldr	r2, [pc, #124]	; (8001494 <HAL_I2C_MspInit+0xa8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d137      	bne.n	800148c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800141c:	2340      	movs	r3, #64	; 0x40
 800141e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4618      	mov	r0, r3
 800142a:	f002 f8df 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001434:	f7ff ffb0 	bl	8001398 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_I2C_MspInit+0xac>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	4a16      	ldr	r2, [pc, #88]	; (8001498 <HAL_I2C_MspInit+0xac>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_I2C_MspInit+0xac>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001450:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001454:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001456:	2312      	movs	r3, #18
 8001458:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001462:	2304      	movs	r3, #4
 8001464:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001470:	f000 fb04 	bl	8001a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_I2C_MspInit+0xac>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_I2C_MspInit+0xac>)
 800147a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147e:	6593      	str	r3, [r2, #88]	; 0x58
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_I2C_MspInit+0xac>)
 8001482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3778      	adds	r7, #120	; 0x78
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40005400 	.word	0x40005400
 8001498:	40021000 	.word	0x40021000

0800149c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b09e      	sub	sp, #120	; 0x78
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	2254      	movs	r2, #84	; 0x54
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fd13 	bl	8004ee8 <memset>
  if(huart->Instance==USART2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a28      	ldr	r2, [pc, #160]	; (8001568 <HAL_UART_MspInit+0xcc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d148      	bne.n	800155e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f887 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e4:	f7ff ff58 	bl	8001398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_UART_MspInit+0xd0>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	4a1f      	ldr	r2, [pc, #124]	; (800156c <HAL_UART_MspInit+0xd0>)
 80014ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f2:	6593      	str	r3, [r2, #88]	; 0x58
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_UART_MspInit+0xd0>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_UART_MspInit+0xd0>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a19      	ldr	r2, [pc, #100]	; (800156c <HAL_UART_MspInit+0xd0>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_UART_MspInit+0xd0>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001518:	2304      	movs	r3, #4
 800151a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001528:	2307      	movs	r3, #7
 800152a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001536:	f000 faa1 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800153a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800153e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800154c:	2303      	movs	r3, #3
 800154e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f000 fa8f 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	3778      	adds	r7, #120	; 0x78
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40004400 	.word	0x40004400
 800156c:	40021000 	.word	0x40021000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015bc:	f000 f958 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
	return 1;
 80015c8:	2301      	movs	r3, #1
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_kill>:

int _kill(int pid, int sig)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015de:	f003 fc4b 	bl	8004e78 <__errno>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2216      	movs	r2, #22
 80015e6:	601a      	str	r2, [r3, #0]
	return -1;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_exit>:

void _exit (int status)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ffe7 	bl	80015d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001606:	e7fe      	b.n	8001606 <_exit+0x12>

08001608 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e00a      	b.n	8001630 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800161a:	f3af 8000 	nop.w
 800161e:	4601      	mov	r1, r0
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	60ba      	str	r2, [r7, #8]
 8001626:	b2ca      	uxtb	r2, r1
 8001628:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	dbf0      	blt.n	800161a <_read+0x12>
	}

return len;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e009      	b.n	8001668 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	60ba      	str	r2, [r7, #8]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbf1      	blt.n	8001654 <_write+0x12>
	}
	return len;
 8001670:	687b      	ldr	r3, [r7, #4]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_close>:

int _close(int file)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	return -1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a2:	605a      	str	r2, [r3, #4]
	return 0;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_isatty>:

int _isatty(int file)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	return 1;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f003 fbb0 	bl	8004e78 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20010000 	.word	0x20010000
 8001744:	00000400 	.word	0x00000400
 8001748:	20001b10 	.word	0x20001b10
 800174c:	20003ab8 	.word	0x20003ab8

08001750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001778:	f7ff ffea 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800177e:	490d      	ldr	r1, [pc, #52]	; (80017b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <LoopForever+0xe>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001794:	4c0a      	ldr	r4, [pc, #40]	; (80017c0 <LoopForever+0x16>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017a2:	f003 fb6f 	bl	8004e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017a6:	f7ff fbd1 	bl	8000f4c <main>

080017aa <LoopForever>:

LoopForever:
    b LoopForever
 80017aa:	e7fe      	b.n	80017aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80017b8:	0800a898 	.word	0x0800a898
  ldr r2, =_sbss
 80017bc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80017c0:	20003ab4 	.word	0x20003ab4

080017c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC1_IRQHandler>

080017c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 f91f 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 f80e 	bl	80017f8 <HAL_InitTick>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	e001      	b.n	80017ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017e8:	f7ff fddc 	bl	80013a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ec:	79fb      	ldrb	r3, [r7, #7]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_InitTick+0x6c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d023      	beq.n	8001854 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800180c:	4b16      	ldr	r3, [pc, #88]	; (8001868 <HAL_InitTick+0x70>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_InitTick+0x6c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f91d 	bl	8001a62 <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10f      	bne.n	800184e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d809      	bhi.n	8001848 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f000 f8f5 	bl	8001a2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_InitTick+0x74>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e007      	b.n	8001858 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e004      	b.n	8001858 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	e001      	b.n	8001858 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000018 	.word	0x20000018
 8001868:	20000010 	.word	0x20000010
 800186c:	20000014 	.word	0x20000014

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000018 	.word	0x20000018
 8001894:	20001b14 	.word	0x20001b14

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20001b14 	.word	0x20001b14

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff47 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff5c 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff8e 	bl	8001968 <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffb0 	bl	80019d0 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8a:	e148      	b.n	8001d1e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 813a 	beq.w	8001d18 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d005      	beq.n	8001abc <HAL_GPIO_Init+0x40>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d130      	bne.n	8001b1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001af2:	2201      	movs	r2, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	f003 0201 	and.w	r2, r3, #1
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d017      	beq.n	8001b5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d123      	bne.n	8001bae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	08da      	lsrs	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3208      	adds	r2, #8
 8001b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	6939      	ldr	r1, [r7, #16]
 8001baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0203 	and.w	r2, r3, #3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8094 	beq.w	8001d18 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf0:	4b52      	ldr	r3, [pc, #328]	; (8001d3c <HAL_GPIO_Init+0x2c0>)
 8001bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf4:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <HAL_GPIO_Init+0x2c0>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6613      	str	r3, [r2, #96]	; 0x60
 8001bfc:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <HAL_GPIO_Init+0x2c0>)
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c08:	4a4d      	ldr	r2, [pc, #308]	; (8001d40 <HAL_GPIO_Init+0x2c4>)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c32:	d00d      	beq.n	8001c50 <HAL_GPIO_Init+0x1d4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a43      	ldr	r2, [pc, #268]	; (8001d44 <HAL_GPIO_Init+0x2c8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d007      	beq.n	8001c4c <HAL_GPIO_Init+0x1d0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a42      	ldr	r2, [pc, #264]	; (8001d48 <HAL_GPIO_Init+0x2cc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d101      	bne.n	8001c48 <HAL_GPIO_Init+0x1cc>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e004      	b.n	8001c52 <HAL_GPIO_Init+0x1d6>
 8001c48:	2307      	movs	r3, #7
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x1d6>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_GPIO_Init+0x1d6>
 8001c50:	2300      	movs	r3, #0
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	f002 0203 	and.w	r2, r2, #3
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c62:	4937      	ldr	r1, [pc, #220]	; (8001d40 <HAL_GPIO_Init+0x2c4>)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c70:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c94:	4a2d      	ldr	r2, [pc, #180]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c9a:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cbe:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ce8:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d12:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f47f aeaf 	bne.w	8001a8c <HAL_GPIO_Init+0x10>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010000 	.word	0x40010000
 8001d44:	48000400 	.word	0x48000400
 8001d48:	48000800 	.word	0x48000800
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e081      	b.n	8001e96 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fb20 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d107      	bne.n	8001dfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	e006      	b.n	8001e08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d104      	bne.n	8001e1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69d9      	ldr	r1, [r3, #28]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1a      	ldr	r2, [r3, #32]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2220      	movs	r2, #32
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	460b      	mov	r3, r1
 8001eae:	817b      	strh	r3, [r7, #10]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	f040 80da 	bne.w	8002076 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_I2C_Master_Transmit+0x30>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e0d3      	b.n	8002078 <HAL_I2C_Master_Transmit+0x1d8>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ed8:	f7ff fcde 	bl	8001898 <HAL_GetTick>
 8001edc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2319      	movs	r3, #25
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f9e6 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0be      	b.n	8002078 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2221      	movs	r2, #33	; 0x21
 8001efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2210      	movs	r2, #16
 8001f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	893a      	ldrh	r2, [r7, #8]
 8001f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2bff      	cmp	r3, #255	; 0xff
 8001f2a:	d90e      	bls.n	8001f4a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	22ff      	movs	r2, #255	; 0xff
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	8979      	ldrh	r1, [r7, #10]
 8001f3a:	4b51      	ldr	r3, [pc, #324]	; (8002080 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fbdc 	bl	8002700 <I2C_TransferConfig>
 8001f48:	e06c      	b.n	8002024 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	8979      	ldrh	r1, [r7, #10]
 8001f5c:	4b48      	ldr	r3, [pc, #288]	; (8002080 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fbcb 	bl	8002700 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f6a:	e05b      	b.n	8002024 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	6a39      	ldr	r1, [r7, #32]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f9e3 	bl	800233c <I2C_WaitOnTXISFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e07b      	b.n	8002078 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d034      	beq.n	8002024 <HAL_I2C_Master_Transmit+0x184>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d130      	bne.n	8002024 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f975 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e04d      	b.n	8002078 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2bff      	cmp	r3, #255	; 0xff
 8001fe4:	d90e      	bls.n	8002004 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	22ff      	movs	r2, #255	; 0xff
 8001fea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	8979      	ldrh	r1, [r7, #10]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fb7f 	bl	8002700 <I2C_TransferConfig>
 8002002:	e00f      	b.n	8002024 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	b2da      	uxtb	r2, r3
 8002014:	8979      	ldrh	r1, [r7, #10]
 8002016:	2300      	movs	r3, #0
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fb6e 	bl	8002700 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d19e      	bne.n	8001f6c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	6a39      	ldr	r1, [r7, #32]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f9c2 	bl	80023bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e01a      	b.n	8002078 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2220      	movs	r2, #32
 8002048:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_I2C_Master_Transmit+0x1e4>)
 8002056:	400b      	ands	r3, r1
 8002058:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	e000      	b.n	8002078 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002076:	2302      	movs	r3, #2
  }
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	80002000 	.word	0x80002000
 8002084:	fe00e800 	.word	0xfe00e800

08002088 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	461a      	mov	r2, r3
 8002094:	460b      	mov	r3, r1
 8002096:	817b      	strh	r3, [r7, #10]
 8002098:	4613      	mov	r3, r2
 800209a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	f040 80db 	bne.w	8002260 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_I2C_Master_Receive+0x30>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e0d4      	b.n	8002262 <HAL_I2C_Master_Receive+0x1da>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020c0:	f7ff fbea 	bl	8001898 <HAL_GetTick>
 80020c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2319      	movs	r3, #25
 80020cc:	2201      	movs	r2, #1
 80020ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f8f2 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0bf      	b.n	8002262 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2222      	movs	r2, #34	; 0x22
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2210      	movs	r2, #16
 80020ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	893a      	ldrh	r2, [r7, #8]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	2bff      	cmp	r3, #255	; 0xff
 8002112:	d90e      	bls.n	8002132 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	22ff      	movs	r2, #255	; 0xff
 8002118:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	b2da      	uxtb	r2, r3
 8002120:	8979      	ldrh	r1, [r7, #10]
 8002122:	4b52      	ldr	r3, [pc, #328]	; (800226c <HAL_I2C_Master_Receive+0x1e4>)
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fae8 	bl	8002700 <I2C_TransferConfig>
 8002130:	e06d      	b.n	800220e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	b2da      	uxtb	r2, r3
 8002142:	8979      	ldrh	r1, [r7, #10]
 8002144:	4b49      	ldr	r3, [pc, #292]	; (800226c <HAL_I2C_Master_Receive+0x1e4>)
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fad7 	bl	8002700 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002152:	e05c      	b.n	800220e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	6a39      	ldr	r1, [r7, #32]
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f96b 	bl	8002434 <I2C_WaitOnRXNEFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e07c      	b.n	8002262 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d034      	beq.n	800220e <HAL_I2C_Master_Receive+0x186>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d130      	bne.n	800220e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	2200      	movs	r2, #0
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f880 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e04d      	b.n	8002262 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2bff      	cmp	r3, #255	; 0xff
 80021ce:	d90e      	bls.n	80021ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	22ff      	movs	r2, #255	; 0xff
 80021d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	8979      	ldrh	r1, [r7, #10]
 80021de:	2300      	movs	r3, #0
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fa8a 	bl	8002700 <I2C_TransferConfig>
 80021ec:	e00f      	b.n	800220e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	8979      	ldrh	r1, [r7, #10]
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fa79 	bl	8002700 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d19d      	bne.n	8002154 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6a39      	ldr	r1, [r7, #32]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f8cd 	bl	80023bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e01a      	b.n	8002262 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2220      	movs	r2, #32
 8002232:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6859      	ldr	r1, [r3, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_I2C_Master_Receive+0x1e8>)
 8002240:	400b      	ands	r3, r1
 8002242:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e000      	b.n	8002262 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002260:	2302      	movs	r3, #2
  }
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	80002400 	.word	0x80002400
 8002270:	fe00e800 	.word	0xfe00e800

08002274 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d103      	bne.n	8002292 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2200      	movs	r2, #0
 8002290:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d007      	beq.n	80022b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	619a      	str	r2, [r3, #24]
  }
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022cc:	e022      	b.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d01e      	beq.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d6:	f7ff fadf 	bl	8001898 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d302      	bcc.n	80022ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d113      	bne.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f043 0220 	orr.w	r2, r3, #32
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e00f      	b.n	8002334 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4013      	ands	r3, r2
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	429a      	cmp	r2, r3
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	429a      	cmp	r2, r3
 8002330:	d0cd      	beq.n	80022ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002348:	e02c      	b.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f8ea 	bl	8002528 <I2C_IsErrorOccurred>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e02a      	b.n	80023b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d01e      	beq.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002366:	f7ff fa97 	bl	8001898 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d113      	bne.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	f043 0220 	orr.w	r2, r3, #32
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e007      	b.n	80023b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d1cb      	bne.n	800234a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c8:	e028      	b.n	800241c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f8aa 	bl	8002528 <I2C_IsErrorOccurred>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e026      	b.n	800242c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023de:	f7ff fa5b 	bl	8001898 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d302      	bcc.n	80023f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d113      	bne.n	800241c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e007      	b.n	800242c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b20      	cmp	r3, #32
 8002428:	d1cf      	bne.n	80023ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002440:	e064      	b.n	800250c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f86e 	bl	8002528 <I2C_IsErrorOccurred>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e062      	b.n	800251c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b20      	cmp	r3, #32
 8002462:	d138      	bne.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d105      	bne.n	800247e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e04e      	b.n	800251c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b10      	cmp	r3, #16
 800248a:	d107      	bne.n	800249c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2210      	movs	r2, #16
 8002492:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2204      	movs	r2, #4
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
 800249a:	e002      	b.n	80024a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2220      	movs	r2, #32
 80024a8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80024b6:	400b      	ands	r3, r1
 80024b8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e022      	b.n	800251c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d6:	f7ff f9df 	bl	8001898 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10f      	bne.n	800250c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	f043 0220 	orr.w	r2, r3, #32
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e007      	b.n	800251c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d193      	bne.n	8002442 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	fe00e800 	.word	0xfe00e800

08002528 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d075      	beq.n	8002640 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2210      	movs	r2, #16
 800255a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800255c:	e056      	b.n	800260c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d052      	beq.n	800260c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002566:	f7ff f997 	bl	8001898 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d302      	bcc.n	800257c <I2C_IsErrorOccurred+0x54>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d147      	bne.n	800260c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800258e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800259a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800259e:	d12e      	bne.n	80025fe <I2C_IsErrorOccurred+0xd6>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a6:	d02a      	beq.n	80025fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d027      	beq.n	80025fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025be:	f7ff f96b 	bl	8001898 <HAL_GetTick>
 80025c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025c4:	e01b      	b.n	80025fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025c6:	f7ff f967 	bl	8001898 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b19      	cmp	r3, #25
 80025d2:	d914      	bls.n	80025fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b20      	cmp	r3, #32
 800260a:	d1dc      	bne.n	80025c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b20      	cmp	r3, #32
 8002618:	d003      	beq.n	8002622 <I2C_IsErrorOccurred+0xfa>
 800261a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800261e:	2b00      	cmp	r3, #0
 8002620:	d09d      	beq.n	800255e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002626:	2b00      	cmp	r3, #0
 8002628:	d103      	bne.n	8002632 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2220      	movs	r2, #32
 8002630:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002662:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01c      	beq.n	80026f0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7ff fddc 	bl	8002274 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <I2C_IsErrorOccurred+0x1d4>)
 80026c8:	400b      	ands	r3, r1
 80026ca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3728      	adds	r7, #40	; 0x28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	fe00e800 	.word	0xfe00e800

08002700 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	817b      	strh	r3, [r7, #10]
 800270e:	4613      	mov	r3, r2
 8002710:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002712:	897b      	ldrh	r3, [r7, #10]
 8002714:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002718:	7a7b      	ldrb	r3, [r7, #9]
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002720:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	4313      	orrs	r3, r2
 800272a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800272e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	0d5b      	lsrs	r3, r3, #21
 800273a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <I2C_TransferConfig+0x60>)
 8002740:	430b      	orrs	r3, r1
 8002742:	43db      	mvns	r3, r3
 8002744:	ea02 0103 	and.w	r1, r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	03ff63ff 	.word	0x03ff63ff

08002764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b20      	cmp	r3, #32
 8002778:	d138      	bne.n	80027ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002784:	2302      	movs	r3, #2
 8002786:	e032      	b.n	80027ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2224      	movs	r2, #36	; 0x24
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6819      	ldr	r1, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b20      	cmp	r3, #32
 800280e:	d139      	bne.n	8002884 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800281a:	2302      	movs	r3, #2
 800281c:	e033      	b.n	8002886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2224      	movs	r2, #36	; 0x24
 800282a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800284c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	6013      	str	r3, [r2, #0]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40007000 	.word	0x40007000

080028b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_PWREx_GetVoltageRange+0x18>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40007000 	.word	0x40007000

080028d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028de:	d130      	bne.n	8002942 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e0:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ec:	d038      	beq.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2232      	movs	r2, #50	; 0x32
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0c9b      	lsrs	r3, r3, #18
 8002910:	3301      	adds	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002914:	e002      	b.n	800291c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b01      	subs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002928:	d102      	bne.n	8002930 <HAL_PWREx_ControlVoltageScaling+0x60>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f2      	bne.n	8002916 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293c:	d110      	bne.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e00f      	b.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294e:	d007      	beq.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002958:	4a05      	ldr	r2, [pc, #20]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800295e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40007000 	.word	0x40007000
 8002974:	20000010 	.word	0x20000010
 8002978:	431bde83 	.word	0x431bde83

0800297c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f000 bc02 	b.w	8003194 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002990:	4b96      	ldr	r3, [pc, #600]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800299a:	4b94      	ldr	r3, [pc, #592]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80e4 	beq.w	8002b7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <HAL_RCC_OscConfig+0x4c>
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	f040 808b 	bne.w	8002ad6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	f040 8087 	bne.w	8002ad6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029c8:	4b88      	ldr	r3, [pc, #544]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x64>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e3d9      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1a      	ldr	r2, [r3, #32]
 80029e4:	4b81      	ldr	r3, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <HAL_RCC_OscConfig+0x7e>
 80029f0:	4b7e      	ldr	r3, [pc, #504]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f8:	e005      	b.n	8002a06 <HAL_RCC_OscConfig+0x8a>
 80029fa:	4b7c      	ldr	r3, [pc, #496]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d223      	bcs.n	8002a52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fd8c 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e3ba      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a1e:	4b73      	ldr	r3, [pc, #460]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a72      	ldr	r2, [pc, #456]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a24:	f043 0308 	orr.w	r3, r3, #8
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b70      	ldr	r3, [pc, #448]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	496d      	ldr	r1, [pc, #436]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a3c:	4b6b      	ldr	r3, [pc, #428]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	4968      	ldr	r1, [pc, #416]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
 8002a50:	e025      	b.n	8002a9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a52:	4b66      	ldr	r3, [pc, #408]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a65      	ldr	r2, [pc, #404]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a58:	f043 0308 	orr.w	r3, r3, #8
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b63      	ldr	r3, [pc, #396]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4960      	ldr	r1, [pc, #384]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a70:	4b5e      	ldr	r3, [pc, #376]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	495b      	ldr	r1, [pc, #364]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fd4c 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e37a      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a9e:	f000 fc81 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4b51      	ldr	r3, [pc, #324]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	4950      	ldr	r1, [pc, #320]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	5ccb      	ldrb	r3, [r1, r3]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	4a4e      	ldr	r2, [pc, #312]	; (8002bf4 <HAL_RCC_OscConfig+0x278>)
 8002abc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002abe:	4b4e      	ldr	r3, [pc, #312]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fe98 	bl	80017f8 <HAL_InitTick>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d052      	beq.n	8002b78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	e35e      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d032      	beq.n	8002b44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ade:	4b43      	ldr	r3, [pc, #268]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a42      	ldr	r2, [pc, #264]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aea:	f7fe fed5 	bl	8001898 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002af2:	f7fe fed1 	bl	8001898 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e347      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b04:	4b39      	ldr	r3, [pc, #228]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b10:	4b36      	ldr	r3, [pc, #216]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a35      	ldr	r2, [pc, #212]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b33      	ldr	r3, [pc, #204]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4930      	ldr	r1, [pc, #192]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	492b      	ldr	r1, [pc, #172]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
 8002b42:	e01a      	b.n	8002b7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b44:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a28      	ldr	r2, [pc, #160]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b50:	f7fe fea2 	bl	8001898 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b58:	f7fe fe9e 	bl	8001898 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e314      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x1dc>
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d073      	beq.n	8002c6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_OscConfig+0x21c>
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d10e      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d063      	beq.n	8002c6c <HAL_RCC_OscConfig+0x2f0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d15f      	bne.n	8002c6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e2f1      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x24c>
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e025      	b.n	8002c14 <HAL_RCC_OscConfig+0x298>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d114      	bne.n	8002bfc <HAL_RCC_OscConfig+0x280>
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a05      	ldr	r2, [pc, #20]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a02      	ldr	r2, [pc, #8]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e013      	b.n	8002c14 <HAL_RCC_OscConfig+0x298>
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	0800a430 	.word	0x0800a430
 8002bf4:	20000010 	.word	0x20000010
 8002bf8:	20000014 	.word	0x20000014
 8002bfc:	4ba0      	ldr	r3, [pc, #640]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a9f      	ldr	r2, [pc, #636]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b9d      	ldr	r3, [pc, #628]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a9c      	ldr	r2, [pc, #624]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fe3c 	bl	8001898 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fe38 	bl	8001898 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e2ae      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c36:	4b92      	ldr	r3, [pc, #584]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x2a8>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fe28 	bl	8001898 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fe24 	bl	8001898 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e29a      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c5e:	4b88      	ldr	r3, [pc, #544]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x2d0>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d060      	beq.n	8002d3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_OscConfig+0x310>
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d119      	bne.n	8002cba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d116      	bne.n	8002cba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c8c:	4b7c      	ldr	r3, [pc, #496]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x328>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e277      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca4:	4b76      	ldr	r3, [pc, #472]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	061b      	lsls	r3, r3, #24
 8002cb2:	4973      	ldr	r1, [pc, #460]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb8:	e040      	b.n	8002d3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d023      	beq.n	8002d0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc2:	4b6f      	ldr	r3, [pc, #444]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a6e      	ldr	r2, [pc, #440]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fe fde3 	bl	8001898 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7fe fddf 	bl	8001898 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e255      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce8:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	495f      	ldr	r1, [pc, #380]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
 8002d08:	e018      	b.n	8002d3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0a:	4b5d      	ldr	r3, [pc, #372]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a5c      	ldr	r2, [pc, #368]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fe fdbf 	bl	8001898 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1e:	f7fe fdbb 	bl	8001898 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e231      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f0      	bne.n	8002d1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d03c      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01c      	beq.n	8002d8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d50:	4b4b      	ldr	r3, [pc, #300]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d56:	4a4a      	ldr	r2, [pc, #296]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe fd9a 	bl	8001898 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d68:	f7fe fd96 	bl	8001898 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e20c      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d7a:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ef      	beq.n	8002d68 <HAL_RCC_OscConfig+0x3ec>
 8002d88:	e01b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8a:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d90:	4a3b      	ldr	r2, [pc, #236]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fd7d 	bl	8001898 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da2:	f7fe fd79 	bl	8001898 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1ef      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1ef      	bne.n	8002da2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80a6 	beq.w	8002f1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dd4:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10d      	bne.n	8002dfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dea:	6593      	str	r3, [r2, #88]	; 0x58
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dfc:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <HAL_RCC_OscConfig+0x508>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d118      	bne.n	8002e3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e08:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_RCC_OscConfig+0x508>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <HAL_RCC_OscConfig+0x508>)
 8002e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e14:	f7fe fd40 	bl	8001898 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1c:	f7fe fd3c 	bl	8001898 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e1b2      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_RCC_OscConfig+0x508>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d108      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4d8>
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e52:	e029      	b.n	8002ea8 <HAL_RCC_OscConfig+0x52c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d115      	bne.n	8002e88 <HAL_RCC_OscConfig+0x50c>
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002e64:	f043 0304 	orr.w	r3, r3, #4
 8002e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	4a03      	ldr	r2, [pc, #12]	; (8002e80 <HAL_RCC_OscConfig+0x504>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e7c:	e014      	b.n	8002ea8 <HAL_RCC_OscConfig+0x52c>
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40007000 	.word	0x40007000
 8002e88:	4b9a      	ldr	r3, [pc, #616]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	4a99      	ldr	r2, [pc, #612]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e98:	4b96      	ldr	r3, [pc, #600]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	4a95      	ldr	r2, [pc, #596]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d016      	beq.n	8002ede <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe fcf2 	bl	8001898 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fcee 	bl	8001898 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e162      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ece:	4b89      	ldr	r3, [pc, #548]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ed      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x53c>
 8002edc:	e015      	b.n	8002f0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7fe fcdb 	bl	8001898 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7fe fcd7 	bl	8001898 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e14b      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002efc:	4b7d      	ldr	r3, [pc, #500]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1ed      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0a:	7ffb      	ldrb	r3, [r7, #31]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f10:	4b78      	ldr	r3, [pc, #480]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	4a77      	ldr	r2, [pc, #476]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d03c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01c      	beq.n	8002f6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f30:	4b70      	ldr	r3, [pc, #448]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f36:	4a6f      	ldr	r2, [pc, #444]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fe fcaa 	bl	8001898 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f48:	f7fe fca6 	bl	8001898 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e11c      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f5a:	4b66      	ldr	r3, [pc, #408]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ef      	beq.n	8002f48 <HAL_RCC_OscConfig+0x5cc>
 8002f68:	e01b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f6a:	4b62      	ldr	r3, [pc, #392]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f70:	4a60      	ldr	r2, [pc, #384]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fe fc8d 	bl	8001898 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f82:	f7fe fc89 	bl	8001898 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0ff      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f94:	4b57      	ldr	r3, [pc, #348]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1ef      	bne.n	8002f82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80f3 	beq.w	8003192 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	f040 80c9 	bne.w	8003148 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fb6:	4b4f      	ldr	r3, [pc, #316]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f003 0203 	and.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d12c      	bne.n	8003024 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d123      	bne.n	8003024 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d11b      	bne.n	8003024 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d113      	bne.n	8003024 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	085b      	lsrs	r3, r3, #1
 8003008:	3b01      	subs	r3, #1
 800300a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d109      	bne.n	8003024 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	3b01      	subs	r3, #1
 800301e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d06b      	beq.n	80030fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b0c      	cmp	r3, #12
 8003028:	d062      	beq.n	80030f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800302a:	4b32      	ldr	r3, [pc, #200]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e0ac      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800303a:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2d      	ldr	r2, [pc, #180]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8003040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003044:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003046:	f7fe fc27 	bl	8001898 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe fc23 	bl	8001898 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e099      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <HAL_RCC_OscConfig+0x77c>)
 8003072:	4013      	ands	r3, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800307c:	3a01      	subs	r2, #1
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	4311      	orrs	r1, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003086:	0212      	lsls	r2, r2, #8
 8003088:	4311      	orrs	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800308e:	0852      	lsrs	r2, r2, #1
 8003090:	3a01      	subs	r2, #1
 8003092:	0552      	lsls	r2, r2, #21
 8003094:	4311      	orrs	r1, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800309a:	0852      	lsrs	r2, r2, #1
 800309c:	3a01      	subs	r2, #1
 800309e:	0652      	lsls	r2, r2, #25
 80030a0:	4311      	orrs	r1, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030a6:	06d2      	lsls	r2, r2, #27
 80030a8:	430a      	orrs	r2, r1
 80030aa:	4912      	ldr	r1, [pc, #72]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 80030b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030bc:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a0c      	ldr	r2, [pc, #48]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 80030c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030c8:	f7fe fbe6 	bl	8001898 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe fbe2 	bl	8001898 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e058      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e2:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ee:	e050      	b.n	8003192 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e04f      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
 80030f4:	40021000 	.word	0x40021000
 80030f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fc:	4b27      	ldr	r3, [pc, #156]	; (800319c <HAL_RCC_OscConfig+0x820>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d144      	bne.n	8003192 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003108:	4b24      	ldr	r3, [pc, #144]	; (800319c <HAL_RCC_OscConfig+0x820>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a23      	ldr	r2, [pc, #140]	; (800319c <HAL_RCC_OscConfig+0x820>)
 800310e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003112:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <HAL_RCC_OscConfig+0x820>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4a20      	ldr	r2, [pc, #128]	; (800319c <HAL_RCC_OscConfig+0x820>)
 800311a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003120:	f7fe fbba 	bl	8001898 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe fbb6 	bl	8001898 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e02c      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <HAL_RCC_OscConfig+0x820>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x7ac>
 8003146:	e024      	b.n	8003192 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b0c      	cmp	r3, #12
 800314c:	d01f      	beq.n	800318e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <HAL_RCC_OscConfig+0x820>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a12      	ldr	r2, [pc, #72]	; (800319c <HAL_RCC_OscConfig+0x820>)
 8003154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fe fb9d 	bl	8001898 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003162:	f7fe fb99 	bl	8001898 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e00f      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003174:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_RCC_OscConfig+0x820>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_OscConfig+0x820>)
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	4905      	ldr	r1, [pc, #20]	; (800319c <HAL_RCC_OscConfig+0x820>)
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_OscConfig+0x824>)
 8003188:	4013      	ands	r3, r2
 800318a:	60cb      	str	r3, [r1, #12]
 800318c:	e001      	b.n	8003192 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	feeefffc 	.word	0xfeeefffc

080031a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0e7      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b75      	ldr	r3, [pc, #468]	; (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d910      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b72      	ldr	r3, [pc, #456]	; (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4970      	ldr	r1, [pc, #448]	; (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b6e      	ldr	r3, [pc, #440]	; (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0cf      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d010      	beq.n	8003216 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	4b66      	ldr	r3, [pc, #408]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003200:	429a      	cmp	r2, r3
 8003202:	d908      	bls.n	8003216 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4960      	ldr	r1, [pc, #384]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d04c      	beq.n	80032bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b03      	cmp	r3, #3
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322a:	4b5a      	ldr	r3, [pc, #360]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d121      	bne.n	800327a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0a6      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003242:	4b54      	ldr	r3, [pc, #336]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e09a      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800325a:	4b4e      	ldr	r3, [pc, #312]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e08e      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800326a:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e086      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800327a:	4b46      	ldr	r3, [pc, #280]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4943      	ldr	r1, [pc, #268]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328c:	f7fe fb04 	bl	8001898 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	e00a      	b.n	80032aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003294:	f7fe fb00 	bl	8001898 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e06e      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	4b3a      	ldr	r3, [pc, #232]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 020c 	and.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d1eb      	bne.n	8003294 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d010      	beq.n	80032ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	4b31      	ldr	r3, [pc, #196]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d208      	bcs.n	80032ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	492b      	ldr	r1, [pc, #172]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d210      	bcs.n	800331a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 0207 	bic.w	r2, r3, #7
 8003300:	4923      	ldr	r1, [pc, #140]	; (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d001      	beq.n	800331a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e036      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	4918      	ldr	r1, [pc, #96]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4910      	ldr	r1, [pc, #64]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003354:	4313      	orrs	r3, r2
 8003356:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003358:	f000 f824 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	490b      	ldr	r1, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x1f4>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	4a09      	ldr	r2, [pc, #36]	; (800339c <HAL_RCC_ClockConfig+0x1f8>)
 8003376:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1fc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe fa3b 	bl	80017f8 <HAL_InitTick>
 8003382:	4603      	mov	r3, r0
 8003384:	72fb      	strb	r3, [r7, #11]

  return status;
 8003386:	7afb      	ldrb	r3, [r7, #11]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40022000 	.word	0x40022000
 8003394:	40021000 	.word	0x40021000
 8003398:	0800a430 	.word	0x0800a430
 800339c:	20000010 	.word	0x20000010
 80033a0:	20000014 	.word	0x20000014

080033a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b2:	4b3e      	ldr	r3, [pc, #248]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033bc:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x34>
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	d121      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d11e      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033d8:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e005      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033f4:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003400:	4a2b      	ldr	r2, [pc, #172]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003408:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003414:	e00a      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d102      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800341c:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	e004      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d101      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003428:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800342a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	2b0c      	cmp	r3, #12
 8003430:	d134      	bne.n	800349c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003432:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d003      	beq.n	800344a <HAL_RCC_GetSysClockFreq+0xa6>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d003      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0xac>
 8003448:	e005      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800344a:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800344c:	617b      	str	r3, [r7, #20]
      break;
 800344e:	e005      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003452:	617b      	str	r3, [r7, #20]
      break;
 8003454:	e002      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	617b      	str	r3, [r7, #20]
      break;
 800345a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	3301      	adds	r3, #1
 8003468:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	fb03 f202 	mul.w	r2, r3, r2
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	0e5b      	lsrs	r3, r3, #25
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	3301      	adds	r3, #1
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800349c:	69bb      	ldr	r3, [r7, #24]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3724      	adds	r7, #36	; 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	0800a448 	.word	0x0800a448
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	007a1200 	.word	0x007a1200

080034bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000010 	.word	0x20000010

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4904      	ldr	r1, [pc, #16]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	0800a440 	.word	0x0800a440

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003504:	f7ff ffda 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0adb      	lsrs	r3, r3, #11
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4904      	ldr	r1, [pc, #16]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	0800a440 	.word	0x0800a440

0800352c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003538:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003544:	f7ff f9b6 	bl	80028b4 <HAL_PWREx_GetVoltageRange>
 8003548:	6178      	str	r0, [r7, #20]
 800354a:	e014      	b.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4a24      	ldr	r2, [pc, #144]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	; 0x58
 8003558:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003564:	f7ff f9a6 	bl	80028b4 <HAL_PWREx_GetVoltageRange>
 8003568:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003574:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357c:	d10b      	bne.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d919      	bls.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2ba0      	cmp	r3, #160	; 0xa0
 8003588:	d902      	bls.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800358a:	2302      	movs	r3, #2
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e013      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003590:	2301      	movs	r3, #1
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e010      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d902      	bls.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800359c:	2303      	movs	r3, #3
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e00a      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d102      	bne.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a8:	2302      	movs	r3, #2
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	e004      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b70      	cmp	r3, #112	; 0x70
 80035b2:	d101      	bne.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b4:	2301      	movs	r3, #1
 80035b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 0207 	bic.w	r2, r3, #7
 80035c0:	4909      	ldr	r1, [pc, #36]	; (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40022000 	.word	0x40022000

080035ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f4:	2300      	movs	r3, #0
 80035f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f8:	2300      	movs	r3, #0
 80035fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003604:	2b00      	cmp	r3, #0
 8003606:	d031      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003610:	d01a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003612:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003616:	d814      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800361c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003620:	d10f      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	4a5c      	ldr	r2, [pc, #368]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800362e:	e00c      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f9de 	bl	80039f8 <RCCEx_PLLSAI1_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003640:	e003      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	74fb      	strb	r3, [r7, #19]
      break;
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003650:	4b51      	ldr	r3, [pc, #324]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	494e      	ldr	r1, [pc, #312]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003666:	e001      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 809e 	beq.w	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367a:	2300      	movs	r3, #0
 800367c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800367e:	4b46      	ldr	r3, [pc, #280]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800368e:	2300      	movs	r3, #0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003694:	4b40      	ldr	r3, [pc, #256]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	4a3f      	ldr	r2, [pc, #252]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800369a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369e:	6593      	str	r3, [r2, #88]	; 0x58
 80036a0:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ac:	2301      	movs	r3, #1
 80036ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b0:	4b3a      	ldr	r3, [pc, #232]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a39      	ldr	r2, [pc, #228]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036bc:	f7fe f8ec 	bl	8001898 <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036c2:	e009      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c4:	f7fe f8e8 	bl	8001898 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d902      	bls.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	74fb      	strb	r3, [r7, #19]
        break;
 80036d6:	e005      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036d8:	4b30      	ldr	r3, [pc, #192]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ef      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d15a      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036ea:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01e      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	429a      	cmp	r2, r3
 8003704:	d019      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003710:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003712:	4b21      	ldr	r3, [pc, #132]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800371a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800372a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003732:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d016      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe f8a8 	bl	8001898 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800374a:	e00b      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f7fe f8a4 	bl	8001898 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d902      	bls.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	74fb      	strb	r3, [r7, #19]
            break;
 8003762:	e006      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0ec      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10b      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003786:	4904      	ldr	r1, [pc, #16]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800378e:	e009      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	74bb      	strb	r3, [r7, #18]
 8003794:	e006      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a4:	7c7b      	ldrb	r3, [r7, #17]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d105      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037aa:	4b8a      	ldr	r3, [pc, #552]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	4a89      	ldr	r2, [pc, #548]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037c2:	4b84      	ldr	r3, [pc, #528]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	f023 0203 	bic.w	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	4980      	ldr	r1, [pc, #512]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e4:	4b7b      	ldr	r3, [pc, #492]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	f023 020c 	bic.w	r2, r3, #12
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	4978      	ldr	r1, [pc, #480]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003806:	4b73      	ldr	r3, [pc, #460]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	496f      	ldr	r1, [pc, #444]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003828:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	4967      	ldr	r1, [pc, #412]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800384a:	4b62      	ldr	r3, [pc, #392]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	495e      	ldr	r1, [pc, #376]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800386c:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	4956      	ldr	r1, [pc, #344]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800388e:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	494d      	ldr	r1, [pc, #308]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d028      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038b0:	4b48      	ldr	r3, [pc, #288]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	4945      	ldr	r1, [pc, #276]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ce:	d106      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d0:	4b40      	ldr	r3, [pc, #256]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4a3f      	ldr	r2, [pc, #252]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038da:	60d3      	str	r3, [r2, #12]
 80038dc:	e011      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e6:	d10c      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f882 	bl	80039f8 <RCCEx_PLLSAI1_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d028      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800390e:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	492d      	ldr	r1, [pc, #180]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392c:	d106      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392e:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003938:	60d3      	str	r3, [r2, #12]
 800393a:	e011      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003944:	d10c      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	2101      	movs	r1, #1
 800394c:	4618      	mov	r0, r3
 800394e:	f000 f853 	bl	80039f8 <RCCEx_PLLSAI1_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01c      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800396c:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397a:	4916      	ldr	r1, [pc, #88]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800398a:	d10c      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	2102      	movs	r1, #2
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f830 	bl	80039f8 <RCCEx_PLLSAI1_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c0:	4904      	ldr	r1, [pc, #16]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000

080039d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	6013      	str	r3, [r2, #0]
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000

080039f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a06:	4b74      	ldr	r3, [pc, #464]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d018      	beq.n	8003a44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a12:	4b71      	ldr	r3, [pc, #452]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0203 	and.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d10d      	bne.n	8003a3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
       ||
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a2a:	4b6b      	ldr	r3, [pc, #428]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
       ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d047      	beq.n	8003ace <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e044      	b.n	8003ace <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d018      	beq.n	8003a7e <RCCEx_PLLSAI1_Config+0x86>
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d825      	bhi.n	8003a9c <RCCEx_PLLSAI1_Config+0xa4>
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d002      	beq.n	8003a5a <RCCEx_PLLSAI1_Config+0x62>
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d009      	beq.n	8003a6c <RCCEx_PLLSAI1_Config+0x74>
 8003a58:	e020      	b.n	8003a9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a5a:	4b5f      	ldr	r3, [pc, #380]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11d      	bne.n	8003aa2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6a:	e01a      	b.n	8003aa2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a6c:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d116      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7c:	e013      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a7e:	4b56      	ldr	r3, [pc, #344]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a8a:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a9a:	e006      	b.n	8003aaa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa0:	e004      	b.n	8003aac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ab2:	4b49      	ldr	r3, [pc, #292]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	4943      	ldr	r1, [pc, #268]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d17c      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ad4:	4b40      	ldr	r3, [pc, #256]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3f      	ldr	r2, [pc, #252]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ada:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae0:	f7fd feda 	bl	8001898 <HAL_GetTick>
 8003ae4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ae6:	e009      	b.n	8003afc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ae8:	f7fd fed6 	bl	8001898 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d902      	bls.n	8003afc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	73fb      	strb	r3, [r7, #15]
        break;
 8003afa:	e005      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003afc:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ef      	bne.n	8003ae8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d15f      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d110      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b14:	4b30      	ldr	r3, [pc, #192]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6892      	ldr	r2, [r2, #8]
 8003b24:	0211      	lsls	r1, r2, #8
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68d2      	ldr	r2, [r2, #12]
 8003b2a:	06d2      	lsls	r2, r2, #27
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	492a      	ldr	r1, [pc, #168]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	610b      	str	r3, [r1, #16]
 8003b34:	e027      	b.n	8003b86 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d112      	bne.n	8003b62 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b3c:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6892      	ldr	r2, [r2, #8]
 8003b4c:	0211      	lsls	r1, r2, #8
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6912      	ldr	r2, [r2, #16]
 8003b52:	0852      	lsrs	r2, r2, #1
 8003b54:	3a01      	subs	r2, #1
 8003b56:	0552      	lsls	r2, r2, #21
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	491f      	ldr	r1, [pc, #124]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	610b      	str	r3, [r1, #16]
 8003b60:	e011      	b.n	8003b86 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b62:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	0211      	lsls	r1, r2, #8
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6952      	ldr	r2, [r2, #20]
 8003b78:	0852      	lsrs	r2, r2, #1
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0652      	lsls	r2, r2, #25
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	4915      	ldr	r1, [pc, #84]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b86:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a13      	ldr	r2, [pc, #76]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b90:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b92:	f7fd fe81 	bl	8001898 <HAL_GetTick>
 8003b96:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b98:	e009      	b.n	8003bae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b9a:	f7fd fe7d 	bl	8001898 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d902      	bls.n	8003bae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	73fb      	strb	r3, [r7, #15]
          break;
 8003bac:	e005      	b.n	8003bba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ef      	beq.n	8003b9a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000

08003bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e040      	b.n	8003c70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fc4c 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8c0 	bl	8003da0 <UART_SetConfig>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e022      	b.n	8003c70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fae0 	bl	80041f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fb67 	bl	800433c <UART_CheckIdleState>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	f040 8082 	bne.w	8003d96 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_UART_Transmit+0x26>
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e07a      	b.n	8003d98 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_UART_Transmit+0x38>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e073      	b.n	8003d98 <HAL_UART_Transmit+0x120>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2221      	movs	r2, #33	; 0x21
 8003cc4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc6:	f7fd fde7 	bl	8001898 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	88fa      	ldrh	r2, [r7, #6]
 8003cd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce4:	d108      	bne.n	8003cf8 <HAL_UART_Transmit+0x80>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	e003      	b.n	8003d00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d08:	e02d      	b.n	8003d66 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2200      	movs	r2, #0
 8003d12:	2180      	movs	r1, #128	; 0x80
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fb5a 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e039      	b.n	8003d98 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d36:	b292      	uxth	r2, r2
 8003d38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	e008      	b.n	8003d54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3301      	adds	r3, #1
 8003d52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1cb      	bne.n	8003d0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2140      	movs	r1, #64	; 0x40
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fb26 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e005      	b.n	8003d98 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e000      	b.n	8003d98 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
  }
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3720      	adds	r7, #32
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da4:	b08a      	sub	sp, #40	; 0x28
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4bb4      	ldr	r3, [pc, #720]	; (80040a0 <UART_SetConfig+0x300>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4aa9      	ldr	r2, [pc, #676]	; (80040a4 <UART_SetConfig+0x304>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4aa0      	ldr	r2, [pc, #640]	; (80040a8 <UART_SetConfig+0x308>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d126      	bne.n	8003e78 <UART_SetConfig+0xd8>
 8003e2a:	4ba0      	ldr	r3, [pc, #640]	; (80040ac <UART_SetConfig+0x30c>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d81b      	bhi.n	8003e70 <UART_SetConfig+0xd0>
 8003e38:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <UART_SetConfig+0xa0>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e51 	.word	0x08003e51
 8003e44:	08003e61 	.word	0x08003e61
 8003e48:	08003e59 	.word	0x08003e59
 8003e4c:	08003e69 	.word	0x08003e69
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e56:	e080      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5e:	e07c      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003e60:	2304      	movs	r3, #4
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e66:	e078      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003e68:	2308      	movs	r3, #8
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6e:	e074      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003e70:	2310      	movs	r3, #16
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e76:	e070      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a8c      	ldr	r2, [pc, #560]	; (80040b0 <UART_SetConfig+0x310>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d138      	bne.n	8003ef4 <UART_SetConfig+0x154>
 8003e82:	4b8a      	ldr	r3, [pc, #552]	; (80040ac <UART_SetConfig+0x30c>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	d82d      	bhi.n	8003eec <UART_SetConfig+0x14c>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <UART_SetConfig+0xf8>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ecd 	.word	0x08003ecd
 8003e9c:	08003eed 	.word	0x08003eed
 8003ea0:	08003eed 	.word	0x08003eed
 8003ea4:	08003eed 	.word	0x08003eed
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003eed 	.word	0x08003eed
 8003eb0:	08003eed 	.word	0x08003eed
 8003eb4:	08003eed 	.word	0x08003eed
 8003eb8:	08003ed5 	.word	0x08003ed5
 8003ebc:	08003eed 	.word	0x08003eed
 8003ec0:	08003eed 	.word	0x08003eed
 8003ec4:	08003eed 	.word	0x08003eed
 8003ec8:	08003ee5 	.word	0x08003ee5
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed2:	e042      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eda:	e03e      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003edc:	2304      	movs	r3, #4
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee2:	e03a      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003ee4:	2308      	movs	r3, #8
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eea:	e036      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003eec:	2310      	movs	r3, #16
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef2:	e032      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6a      	ldr	r2, [pc, #424]	; (80040a4 <UART_SetConfig+0x304>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d12a      	bne.n	8003f54 <UART_SetConfig+0x1b4>
 8003efe:	4b6b      	ldr	r3, [pc, #428]	; (80040ac <UART_SetConfig+0x30c>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f0c:	d01a      	beq.n	8003f44 <UART_SetConfig+0x1a4>
 8003f0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f12:	d81b      	bhi.n	8003f4c <UART_SetConfig+0x1ac>
 8003f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f18:	d00c      	beq.n	8003f34 <UART_SetConfig+0x194>
 8003f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f1e:	d815      	bhi.n	8003f4c <UART_SetConfig+0x1ac>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <UART_SetConfig+0x18c>
 8003f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f28:	d008      	beq.n	8003f3c <UART_SetConfig+0x19c>
 8003f2a:	e00f      	b.n	8003f4c <UART_SetConfig+0x1ac>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f32:	e012      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003f34:	2302      	movs	r3, #2
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3a:	e00e      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f42:	e00a      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003f44:	2308      	movs	r3, #8
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4a:	e006      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f52:	e002      	b.n	8003f5a <UART_SetConfig+0x1ba>
 8003f54:	2310      	movs	r3, #16
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a51      	ldr	r2, [pc, #324]	; (80040a4 <UART_SetConfig+0x304>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d17a      	bne.n	800405a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d824      	bhi.n	8003fb6 <UART_SetConfig+0x216>
 8003f6c:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <UART_SetConfig+0x1d4>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003fb7 	.word	0x08003fb7
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	08003fb7 	.word	0x08003fb7
 8003f84:	08003fa7 	.word	0x08003fa7
 8003f88:	08003fb7 	.word	0x08003fb7
 8003f8c:	08003fb7 	.word	0x08003fb7
 8003f90:	08003fb7 	.word	0x08003fb7
 8003f94:	08003faf 	.word	0x08003faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f98:	f7ff fa9c 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8003f9c:	61f8      	str	r0, [r7, #28]
        break;
 8003f9e:	e010      	b.n	8003fc2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa0:	4b44      	ldr	r3, [pc, #272]	; (80040b4 <UART_SetConfig+0x314>)
 8003fa2:	61fb      	str	r3, [r7, #28]
        break;
 8003fa4:	e00d      	b.n	8003fc2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa6:	f7ff f9fd 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8003faa:	61f8      	str	r0, [r7, #28]
        break;
 8003fac:	e009      	b.n	8003fc2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fb2:	61fb      	str	r3, [r7, #28]
        break;
 8003fb4:	e005      	b.n	8003fc2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8107 	beq.w	80041d8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	4413      	add	r3, r2
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d305      	bcc.n	8003fe6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d903      	bls.n	8003fee <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fec:	e0f4      	b.n	80041d8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	461c      	mov	r4, r3
 8003ff4:	4615      	mov	r5, r2
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	022b      	lsls	r3, r5, #8
 8004000:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004004:	0222      	lsls	r2, r4, #8
 8004006:	68f9      	ldr	r1, [r7, #12]
 8004008:	6849      	ldr	r1, [r1, #4]
 800400a:	0849      	lsrs	r1, r1, #1
 800400c:	2000      	movs	r0, #0
 800400e:	4688      	mov	r8, r1
 8004010:	4681      	mov	r9, r0
 8004012:	eb12 0a08 	adds.w	sl, r2, r8
 8004016:	eb43 0b09 	adc.w	fp, r3, r9
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004028:	4650      	mov	r0, sl
 800402a:	4659      	mov	r1, fp
 800402c:	f7fc fe0c 	bl	8000c48 <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4613      	mov	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800403e:	d308      	bcc.n	8004052 <UART_SetConfig+0x2b2>
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004046:	d204      	bcs.n	8004052 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	60da      	str	r2, [r3, #12]
 8004050:	e0c2      	b.n	80041d8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004058:	e0be      	b.n	80041d8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004062:	d16a      	bne.n	800413a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004068:	2b08      	cmp	r3, #8
 800406a:	d834      	bhi.n	80040d6 <UART_SetConfig+0x336>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0x2d4>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004099 	.word	0x08004099
 8004078:	080040b9 	.word	0x080040b9
 800407c:	080040c1 	.word	0x080040c1
 8004080:	080040d7 	.word	0x080040d7
 8004084:	080040c7 	.word	0x080040c7
 8004088:	080040d7 	.word	0x080040d7
 800408c:	080040d7 	.word	0x080040d7
 8004090:	080040d7 	.word	0x080040d7
 8004094:	080040cf 	.word	0x080040cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004098:	f7ff fa1c 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 800409c:	61f8      	str	r0, [r7, #28]
        break;
 800409e:	e020      	b.n	80040e2 <UART_SetConfig+0x342>
 80040a0:	efff69f3 	.word	0xefff69f3
 80040a4:	40008000 	.word	0x40008000
 80040a8:	40013800 	.word	0x40013800
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40004400 	.word	0x40004400
 80040b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040b8:	f7ff fa22 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 80040bc:	61f8      	str	r0, [r7, #28]
        break;
 80040be:	e010      	b.n	80040e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c0:	4b4c      	ldr	r3, [pc, #304]	; (80041f4 <UART_SetConfig+0x454>)
 80040c2:	61fb      	str	r3, [r7, #28]
        break;
 80040c4:	e00d      	b.n	80040e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040c6:	f7ff f96d 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 80040ca:	61f8      	str	r0, [r7, #28]
        break;
 80040cc:	e009      	b.n	80040e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d2:	61fb      	str	r3, [r7, #28]
        break;
 80040d4:	e005      	b.n	80040e2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d077      	beq.n	80041d8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	005a      	lsls	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	441a      	add	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b0f      	cmp	r3, #15
 8004102:	d916      	bls.n	8004132 <UART_SetConfig+0x392>
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410a:	d212      	bcs.n	8004132 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	b29b      	uxth	r3, r3
 8004110:	f023 030f 	bic.w	r3, r3, #15
 8004114:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	b29b      	uxth	r3, r3
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	b29a      	uxth	r2, r3
 8004122:	8afb      	ldrh	r3, [r7, #22]
 8004124:	4313      	orrs	r3, r2
 8004126:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	8afa      	ldrh	r2, [r7, #22]
 800412e:	60da      	str	r2, [r3, #12]
 8004130:	e052      	b.n	80041d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004138:	e04e      	b.n	80041d8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800413a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800413e:	2b08      	cmp	r3, #8
 8004140:	d827      	bhi.n	8004192 <UART_SetConfig+0x3f2>
 8004142:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0x3a8>)
 8004144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004148:	0800416d 	.word	0x0800416d
 800414c:	08004175 	.word	0x08004175
 8004150:	0800417d 	.word	0x0800417d
 8004154:	08004193 	.word	0x08004193
 8004158:	08004183 	.word	0x08004183
 800415c:	08004193 	.word	0x08004193
 8004160:	08004193 	.word	0x08004193
 8004164:	08004193 	.word	0x08004193
 8004168:	0800418b 	.word	0x0800418b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7ff f9b2 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004170:	61f8      	str	r0, [r7, #28]
        break;
 8004172:	e014      	b.n	800419e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004174:	f7ff f9c4 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8004178:	61f8      	str	r0, [r7, #28]
        break;
 800417a:	e010      	b.n	800419e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800417c:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <UART_SetConfig+0x454>)
 800417e:	61fb      	str	r3, [r7, #28]
        break;
 8004180:	e00d      	b.n	800419e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004182:	f7ff f90f 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8004186:	61f8      	str	r0, [r7, #28]
        break;
 8004188:	e009      	b.n	800419e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800418a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800418e:	61fb      	str	r3, [r7, #28]
        break;
 8004190:	e005      	b.n	800419e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800419c:	bf00      	nop
    }

    if (pclk != 0U)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d019      	beq.n	80041d8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	085a      	lsrs	r2, r3, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	441a      	add	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b0f      	cmp	r3, #15
 80041bc:	d909      	bls.n	80041d2 <UART_SetConfig+0x432>
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c4:	d205      	bcs.n	80041d2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	e002      	b.n	80041d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3728      	adds	r7, #40	; 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f2:	bf00      	nop
 80041f4:	00f42400 	.word	0x00f42400

080041f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01a      	beq.n	800430e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f6:	d10a      	bne.n	800430e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	605a      	str	r2, [r3, #4]
  }
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af02      	add	r7, sp, #8
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800434c:	f7fd faa4 	bl	8001898 <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d10e      	bne.n	800437e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f82d 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e023      	b.n	80043c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b04      	cmp	r3, #4
 800438a:	d10e      	bne.n	80043aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800438c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f817 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e00d      	b.n	80043c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b09c      	sub	sp, #112	; 0x70
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	4613      	mov	r3, r2
 80043dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043de:	e0a5      	b.n	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	f000 80a1 	beq.w	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ea:	f7fd fa55 	bl	8001898 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d302      	bcc.n	8004400 <UART_WaitOnFlagUntilTimeout+0x32>
 80043fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d13e      	bne.n	800447e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800440e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004414:	667b      	str	r3, [r7, #100]	; 0x64
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800441e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004420:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800442c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e6      	bne.n	8004400 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3308      	adds	r3, #8
 8004438:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	663b      	str	r3, [r7, #96]	; 0x60
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3308      	adds	r3, #8
 8004450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004452:	64ba      	str	r2, [r7, #72]	; 0x48
 8004454:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e067      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d04f      	beq.n	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449a:	d147      	bne.n	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
 80044c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e6      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3308      	adds	r3, #8
 80044de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	613b      	str	r3, [r7, #16]
   return(result);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044f8:	623a      	str	r2, [r7, #32]
 80044fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	69f9      	ldr	r1, [r7, #28]
 80044fe:	6a3a      	ldr	r2, [r7, #32]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	61bb      	str	r3, [r7, #24]
   return(result);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e010      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69da      	ldr	r2, [r3, #28]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	429a      	cmp	r2, r3
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	429a      	cmp	r2, r3
 8004548:	f43f af4a 	beq.w	80043e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3770      	adds	r7, #112	; 0x70
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <neai_classification_init>:
 8004558:	4b71      	ldr	r3, [pc, #452]	; (8004720 <neai_classification_init+0x1c8>)
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	f640 72df 	movw	r2, #4063	; 0xfdf
 8004560:	401a      	ands	r2, r3
 8004562:	f240 4115 	movw	r1, #1045	; 0x415
 8004566:	428a      	cmp	r2, r1
 8004568:	d00e      	beq.n	8004588 <neai_classification_init+0x30>
 800456a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456e:	f46f 628c 	mvn.w	r2, #1120	; 0x460
 8004572:	4413      	add	r3, r2
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b10      	cmp	r3, #16
 8004578:	f200 80cd 	bhi.w	8004716 <neai_classification_init+0x1be>
 800457c:	4a69      	ldr	r2, [pc, #420]	; (8004724 <neai_classification_init+0x1cc>)
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	07db      	lsls	r3, r3, #31
 8004584:	f140 80c7 	bpl.w	8004716 <neai_classification_init+0x1be>
 8004588:	4b67      	ldr	r3, [pc, #412]	; (8004728 <neai_classification_init+0x1d0>)
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	2ba5      	cmp	r3, #165	; 0xa5
 800458e:	f040 80c2 	bne.w	8004716 <neai_classification_init+0x1be>
 8004592:	4966      	ldr	r1, [pc, #408]	; (800472c <neai_classification_init+0x1d4>)
 8004594:	4a66      	ldr	r2, [pc, #408]	; (8004730 <neai_classification_init+0x1d8>)
 8004596:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 800459a:	ed93 7a05 	vldr	s14, [r3, #20]
 800459e:	3314      	adds	r3, #20
 80045a0:	b4f0      	push	{r4, r5, r6, r7}
 80045a2:	600b      	str	r3, [r1, #0]
 80045a4:	4f63      	ldr	r7, [pc, #396]	; (8004734 <neai_classification_init+0x1dc>)
 80045a6:	4e64      	ldr	r6, [pc, #400]	; (8004738 <neai_classification_init+0x1e0>)
 80045a8:	4c64      	ldr	r4, [pc, #400]	; (800473c <neai_classification_init+0x1e4>)
 80045aa:	4d65      	ldr	r5, [pc, #404]	; (8004740 <neai_classification_init+0x1e8>)
 80045ac:	4965      	ldr	r1, [pc, #404]	; (8004744 <neai_classification_init+0x1ec>)
 80045ae:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 80045b2:	3308      	adds	r3, #8
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045ba:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80045be:	8033      	strh	r3, [r6, #0]
 80045c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045c4:	8013      	strh	r3, [r2, #0]
 80045c6:	eeb4 7a67 	vcmp.f32	s14, s15
 80045ca:	2300      	movs	r3, #0
 80045cc:	4a5e      	ldr	r2, [pc, #376]	; (8004748 <neai_classification_init+0x1f0>)
 80045ce:	8023      	strh	r3, [r4, #0]
 80045d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d4:	f240 24d6 	movw	r4, #726	; 0x2d6
 80045d8:	802b      	strh	r3, [r5, #0]
 80045da:	600c      	str	r4, [r1, #0]
 80045dc:	6010      	str	r0, [r2, #0]
 80045de:	f040 8095 	bne.w	800470c <neai_classification_init+0x1b4>
 80045e2:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 80045e6:	ed93 7a06 	vldr	s14, [r3, #24]
 80045ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80045ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f2:	f040 808b 	bne.w	800470c <neai_classification_init+0x1b4>
 80045f6:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 80045fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80045fe:	eddf 7a53 	vldr	s15, [pc, #332]	; 800474c <neai_classification_init+0x1f4>
 8004602:	eeb4 7a67 	vcmp.f32	s14, s15
 8004606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460a:	d17f      	bne.n	800470c <neai_classification_init+0x1b4>
 800460c:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 8004610:	ed93 7a08 	vldr	s14, [r3, #32]
 8004614:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004618:	eeb4 7a67 	vcmp.f32	s14, s15
 800461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004620:	d174      	bne.n	800470c <neai_classification_init+0x1b4>
 8004622:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 8004626:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800462a:	eeb4 7a67 	vcmp.f32	s14, s15
 800462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004632:	d16b      	bne.n	800470c <neai_classification_init+0x1b4>
 8004634:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 8004638:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800463c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	d162      	bne.n	800470c <neai_classification_init+0x1b4>
 8004646:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 800464a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800464e:	eeb4 7a67 	vcmp.f32	s14, s15
 8004652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004656:	d159      	bne.n	800470c <neai_classification_init+0x1b4>
 8004658:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 800465c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004660:	eeb4 7a67 	vcmp.f32	s14, s15
 8004664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004668:	d150      	bne.n	800470c <neai_classification_init+0x1b4>
 800466a:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 800466e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004672:	eddf 7a37 	vldr	s15, [pc, #220]	; 8004750 <neai_classification_init+0x1f8>
 8004676:	eeb4 7a67 	vcmp.f32	s14, s15
 800467a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467e:	d145      	bne.n	800470c <neai_classification_init+0x1b4>
 8004680:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 8004684:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004688:	eef5 7a40 	vcmp.f32	s15, #0.0
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	d13c      	bne.n	800470c <neai_classification_init+0x1b4>
 8004692:	f500 5308 	add.w	r3, r0, #8704	; 0x2200
 8004696:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800469a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800469e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a2:	d133      	bne.n	800470c <neai_classification_init+0x1b4>
 80046a4:	f500 5309 	add.w	r3, r0, #8768	; 0x2240
 80046a8:	ed93 7a00 	vldr	s14, [r3]
 80046ac:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80046b0:	eeb4 7a67 	vcmp.f32	s14, s15
 80046b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b8:	d128      	bne.n	800470c <neai_classification_init+0x1b4>
 80046ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80046be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c6:	d121      	bne.n	800470c <neai_classification_init+0x1b4>
 80046c8:	f500 5309 	add.w	r3, r0, #8768	; 0x2240
 80046cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80046d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d8:	d118      	bne.n	800470c <neai_classification_init+0x1b4>
 80046da:	f500 5309 	add.w	r3, r0, #8768	; 0x2240
 80046de:	edd3 7a03 	vldr	s15, [r3, #12]
 80046e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	d10f      	bne.n	800470c <neai_classification_init+0x1b4>
 80046ec:	f500 5009 	add.w	r0, r0, #8768	; 0x2240
 80046f0:	ed90 7a04 	vldr	s14, [r0, #16]
 80046f4:	eddf 7a17 	vldr	s15, [pc, #92]	; 8004754 <neai_classification_init+0x1fc>
 80046f8:	eeb4 7a67 	vcmp.f32	s14, s15
 80046fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004700:	f100 0010 	add.w	r0, r0, #16
 8004704:	bf0c      	ite	eq
 8004706:	2000      	moveq	r0, #0
 8004708:	207d      	movne	r0, #125	; 0x7d
 800470a:	e000      	b.n	800470e <neai_classification_init+0x1b6>
 800470c:	207d      	movs	r0, #125	; 0x7d
 800470e:	4b12      	ldr	r3, [pc, #72]	; (8004758 <neai_classification_init+0x200>)
 8004710:	7018      	strb	r0, [r3, #0]
 8004712:	bcf0      	pop	{r4, r5, r6, r7}
 8004714:	4770      	bx	lr
 8004716:	4b10      	ldr	r3, [pc, #64]	; (8004758 <neai_classification_init+0x200>)
 8004718:	207c      	movs	r0, #124	; 0x7c
 800471a:	7018      	strb	r0, [r3, #0]
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	e0042000 	.word	0xe0042000
 8004724:	0001800b 	.word	0x0001800b
 8004728:	1fff77f0 	.word	0x1fff77f0
 800472c:	20003aa8 	.word	0x20003aa8
 8004730:	20003a78 	.word	0x20003a78
 8004734:	20003aa0 	.word	0x20003aa0
 8004738:	20003a76 	.word	0x20003a76
 800473c:	20003a70 	.word	0x20003a70
 8004740:	20003a74 	.word	0x20003a74
 8004744:	20003a7c 	.word	0x20003a7c
 8004748:	20003aa4 	.word	0x20003aa4
 800474c:	44000000 	.word	0x44000000
 8004750:	43720000 	.word	0x43720000
 8004754:	49742400 	.word	0x49742400
 8004758:	20000019 	.word	0x20000019

0800475c <neai_classification>:
 800475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004760:	ed2d 8b08 	vpush	{d8-d11}
 8004764:	4b7f      	ldr	r3, [pc, #508]	; (8004964 <neai_classification+0x208>)
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	9205      	str	r2, [sp, #20]
 800476c:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8004770:	b12b      	cbz	r3, 800477e <neai_classification+0x22>
 8004772:	9802      	ldr	r0, [sp, #8]
 8004774:	b009      	add	sp, #36	; 0x24
 8004776:	ecbd 8b08 	vpop	{d8-d11}
 800477a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477e:	4689      	mov	r9, r1
 8004780:	4619      	mov	r1, r3
 8004782:	4b79      	ldr	r3, [pc, #484]	; (8004968 <neai_classification+0x20c>)
 8004784:	4a79      	ldr	r2, [pc, #484]	; (800496c <neai_classification+0x210>)
 8004786:	f8b3 8000 	ldrh.w	r8, [r3]
 800478a:	f8df b200 	ldr.w	fp, [pc, #512]	; 800498c <neai_classification+0x230>
 800478e:	8812      	ldrh	r2, [r2, #0]
 8004790:	eddf 8a77 	vldr	s17, [pc, #476]	; 8004970 <neai_classification+0x214>
 8004794:	ed9f 9a77 	vldr	s18, [pc, #476]	; 8004974 <neai_classification+0x218>
 8004798:	9200      	str	r2, [sp, #0]
 800479a:	9101      	str	r1, [sp, #4]
 800479c:	f8cd b018 	str.w	fp, [sp, #24]
 80047a0:	4644      	mov	r4, r8
 80047a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80047a6:	4874      	ldr	r0, [pc, #464]	; (8004978 <neai_classification+0x21c>)
 80047a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047ac:	2100      	movs	r1, #0
 80047ae:	f000 fb9b 	bl	8004ee8 <memset>
 80047b2:	2c00      	cmp	r4, #0
 80047b4:	f000 8322 	beq.w	8004dfc <neai_classification+0x6a0>
 80047b8:	4b70      	ldr	r3, [pc, #448]	; (800497c <neai_classification+0x220>)
 80047ba:	4a71      	ldr	r2, [pc, #452]	; (8004980 <neai_classification+0x224>)
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	9801      	ldr	r0, [sp, #4]
 80047c0:	9e03      	ldr	r6, [sp, #12]
 80047c2:	4970      	ldr	r1, [pc, #448]	; (8004984 <neai_classification+0x228>)
 80047c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80047c8:	1e67      	subs	r7, r4, #1
 80047ca:	4403      	add	r3, r0
 80047cc:	1d15      	adds	r5, r2, #4
 80047ce:	b2b8      	uxth	r0, r7
 80047d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80047d4:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80047d8:	4616      	mov	r6, r2
 80047da:	4610      	mov	r0, r2
 80047dc:	f853 cb0c 	ldr.w	ip, [r3], #12
 80047e0:	f840 cb04 	str.w	ip, [r0], #4
 80047e4:	4285      	cmp	r5, r0
 80047e6:	ece1 8a01 	vstmia	r1!, {s17}
 80047ea:	d1f7      	bne.n	80047dc <neai_classification+0x80>
 80047ec:	2c01      	cmp	r4, #1
 80047ee:	edd6 7a00 	vldr	s15, [r6]
 80047f2:	d00e      	beq.n	8004812 <neai_classification+0xb6>
 80047f4:	4b64      	ldr	r3, [pc, #400]	; (8004988 <neai_classification+0x22c>)
 80047f6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80047fa:	ecb3 7a01 	vldmia	r3!, {s14}
 80047fe:	4299      	cmp	r1, r3
 8004800:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004804:	d1f9      	bne.n	80047fa <neai_classification+0x9e>
 8004806:	ee07 4a10 	vmov	s14, r4
 800480a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800480e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8004812:	2300      	movs	r3, #0
 8004814:	3301      	adds	r3, #1
 8004816:	429c      	cmp	r4, r3
 8004818:	ed92 7a00 	vldr	s14, [r2]
 800481c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004820:	eca2 7a01 	vstmia	r2!, {s14}
 8004824:	d8f6      	bhi.n	8004814 <neai_classification+0xb8>
 8004826:	07e2      	lsls	r2, r4, #31
 8004828:	ea4f 0554 	mov.w	r5, r4, lsr #1
 800482c:	4620      	mov	r0, r4
 800482e:	f100 82ef 	bmi.w	8004e10 <neai_classification+0x6b4>
 8004832:	f7fb fe77 	bl	8000524 <__aeabi_i2d>
 8004836:	2600      	movs	r6, #0
 8004838:	3601      	adds	r6, #1
 800483a:	b2b6      	uxth	r6, r6
 800483c:	fa44 f306 	asr.w	r3, r4, r6
 8004840:	07db      	lsls	r3, r3, #31
 8004842:	d5f9      	bpl.n	8004838 <neai_classification+0xdc>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	2000      	movs	r0, #0
 800484a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800484e:	f7fb fffd 	bl	800084c <__aeabi_ddiv>
 8004852:	f7fc f9a9 	bl	8000ba8 <__aeabi_d2f>
 8004856:	2c01      	cmp	r4, #1
 8004858:	ee09 0a90 	vmov	s19, r0
 800485c:	dd20      	ble.n	80048a0 <neai_classification+0x144>
 800485e:	2300      	movs	r3, #0
 8004860:	4847      	ldr	r0, [pc, #284]	; (8004980 <neai_classification+0x224>)
 8004862:	4619      	mov	r1, r3
 8004864:	42ab      	cmp	r3, r5
 8004866:	462a      	mov	r2, r5
 8004868:	d305      	bcc.n	8004876 <neai_classification+0x11a>
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	b29b      	uxth	r3, r3
 800486e:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8004872:	4293      	cmp	r3, r2
 8004874:	d2f9      	bcs.n	800486a <neai_classification+0x10e>
 8004876:	3101      	adds	r1, #1
 8004878:	b289      	uxth	r1, r1
 800487a:	4413      	add	r3, r2
 800487c:	42b9      	cmp	r1, r7
 800487e:	b29b      	uxth	r3, r3
 8004880:	da0e      	bge.n	80048a0 <neai_classification+0x144>
 8004882:	428b      	cmp	r3, r1
 8004884:	d9ee      	bls.n	8004864 <neai_classification+0x108>
 8004886:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800488a:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800488e:	f8d2 e000 	ldr.w	lr, [r2]
 8004892:	f8dc 8000 	ldr.w	r8, [ip]
 8004896:	f8c2 8000 	str.w	r8, [r2]
 800489a:	f8cc e000 	str.w	lr, [ip]
 800489e:	e7e1      	b.n	8004864 <neai_classification+0x108>
 80048a0:	2e00      	cmp	r6, #0
 80048a2:	f000 809f 	beq.w	80049e4 <neai_classification+0x288>
 80048a6:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8004984 <neai_classification+0x228>
 80048aa:	9504      	str	r5, [sp, #16]
 80048ac:	eeb0 aa68 	vmov.f32	s20, s17
 80048b0:	f04f 0800 	mov.w	r8, #0
 80048b4:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 80048b8:	2701      	movs	r7, #1
 80048ba:	4635      	mov	r5, r6
 80048bc:	4639      	mov	r1, r7
 80048be:	007f      	lsls	r7, r7, #1
 80048c0:	b2bf      	uxth	r7, r7
 80048c2:	2900      	cmp	r1, #0
 80048c4:	d064      	beq.n	8004990 <neai_classification+0x234>
 80048c6:	2c00      	cmp	r4, #0
 80048c8:	d062      	beq.n	8004990 <neai_classification+0x234>
 80048ca:	2000      	movs	r0, #0
 80048cc:	428c      	cmp	r4, r1
 80048ce:	46a2      	mov	sl, r4
 80048d0:	4603      	mov	r3, r0
 80048d2:	bf28      	it	cs
 80048d4:	468a      	movcs	sl, r1
 80048d6:	eef0 7a68 	vmov.f32	s15, s17
 80048da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048de:	4e28      	ldr	r6, [pc, #160]	; (8004980 <neai_classification+0x224>)
 80048e0:	185a      	adds	r2, r3, r1
 80048e2:	b292      	uxth	r2, r2
 80048e4:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 80048e8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80048ec:	eddc 5a00 	vldr	s11, [ip]
 80048f0:	ed92 5a00 	vldr	s10, [r2]
 80048f4:	ee65 6aa7 	vmul.f32	s13, s11, s15
 80048f8:	ee27 6ac5 	vnmul.f32	s12, s15, s10
 80048fc:	eee5 6a07 	vfma.f32	s13, s10, s14
 8004900:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
 8004904:	eb09 0683 	add.w	r6, r9, r3, lsl #2
 8004908:	eea5 6a87 	vfma.f32	s12, s11, s14
 800490c:	443b      	add	r3, r7
 800490e:	b29b      	uxth	r3, r3
 8004910:	ed9e 5a00 	vldr	s10, [lr]
 8004914:	edd6 5a00 	vldr	s11, [r6]
 8004918:	ee35 5a46 	vsub.f32	s10, s10, s12
 800491c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8004920:	ed8c 5a00 	vstr	s10, [ip]
 8004924:	edc2 5a00 	vstr	s11, [r2]
 8004928:	ed9e 5a00 	vldr	s10, [lr]
 800492c:	edd6 5a00 	vldr	s11, [r6]
 8004930:	ee35 6a06 	vadd.f32	s12, s10, s12
 8004934:	ee75 6aa6 	vadd.f32	s13, s11, s13
 8004938:	42a3      	cmp	r3, r4
 800493a:	ed8e 6a00 	vstr	s12, [lr]
 800493e:	edc6 6a00 	vstr	s13, [r6]
 8004942:	d3cc      	bcc.n	80048de <neai_classification+0x182>
 8004944:	3001      	adds	r0, #1
 8004946:	ee6a 6a67 	vnmul.f32	s13, s20, s15
 800494a:	b283      	uxth	r3, r0
 800494c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004950:	4553      	cmp	r3, sl
 8004952:	eee8 6a07 	vfma.f32	s13, s16, s14
 8004956:	eee7 7a0a 	vfma.f32	s15, s14, s20
 800495a:	d219      	bcs.n	8004990 <neai_classification+0x234>
 800495c:	eeb0 7a66 	vmov.f32	s14, s13
 8004960:	e7bd      	b.n	80048de <neai_classification+0x182>
 8004962:	bf00      	nop
 8004964:	20000019 	.word	0x20000019
 8004968:	20003a76 	.word	0x20003a76
 800496c:	20003a78 	.word	0x20003a78
 8004970:	00000000 	.word	0x00000000
 8004974:	3b03126f 	.word	0x3b03126f
 8004978:	20003670 	.word	0x20003670
 800497c:	20003a70 	.word	0x20003a70
 8004980:	20002670 	.word	0x20002670
 8004984:	20002e70 	.word	0x20002e70
 8004988:	20002674 	.word	0x20002674
 800498c:	20001b18 	.word	0x20001b18
 8004990:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004994:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004998:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800499c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80049a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80049a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a8:	eeb1 aac0 	vsqrt.f32	s20, s0
 80049ac:	f100 8249 	bmi.w	8004e42 <neai_classification+0x6e6>
 80049b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80049b4:	ee38 8a00 	vadd.f32	s16, s16, s0
 80049b8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80049bc:	ee28 0a00 	vmul.f32	s0, s16, s0
 80049c0:	eeb1 aa4a 	vneg.f32	s20, s20
 80049c4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80049c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049cc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80049d0:	f100 8234 	bmi.w	8004e3c <neai_classification+0x6e0>
 80049d4:	f108 0801 	add.w	r8, r8, #1
 80049d8:	fa1f f388 	uxth.w	r3, r8
 80049dc:	429d      	cmp	r5, r3
 80049de:	f63f af6d 	bhi.w	80048bc <neai_classification+0x160>
 80049e2:	9d04      	ldr	r5, [sp, #16]
 80049e4:	2c00      	cmp	r4, #0
 80049e6:	f000 820f 	beq.w	8004e08 <neai_classification+0x6ac>
 80049ea:	4e6f      	ldr	r6, [pc, #444]	; (8004ba8 <neai_classification+0x44c>)
 80049ec:	496f      	ldr	r1, [pc, #444]	; (8004bac <neai_classification+0x450>)
 80049ee:	4632      	mov	r2, r6
 80049f0:	2300      	movs	r3, #0
 80049f2:	ed91 7a00 	vldr	s14, [r1]
 80049f6:	edd2 7a00 	vldr	s15, [r2]
 80049fa:	3301      	adds	r3, #1
 80049fc:	ee27 7a29 	vmul.f32	s14, s14, s19
 8004a00:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8004a04:	b298      	uxth	r0, r3
 8004a06:	4284      	cmp	r4, r0
 8004a08:	eca1 7a01 	vstmia	r1!, {s14}
 8004a0c:	ece2 7a01 	vstmia	r2!, {s15}
 8004a10:	d8ef      	bhi.n	80049f2 <neai_classification+0x296>
 8004a12:	2d00      	cmp	r5, #0
 8004a14:	d040      	beq.n	8004a98 <neai_classification+0x33c>
 8004a16:	4a66      	ldr	r2, [pc, #408]	; (8004bb0 <neai_classification+0x454>)
 8004a18:	4b63      	ldr	r3, [pc, #396]	; (8004ba8 <neai_classification+0x44c>)
 8004a1a:	eb06 0785 	add.w	r7, r6, r5, lsl #2
 8004a1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a22:	ecb2 7a01 	vldmia	r2!, {s14}
 8004a26:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a2a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8004a2e:	ece3 7a01 	vstmia	r3!, {s15}
 8004a32:	429f      	cmp	r7, r3
 8004a34:	d1f3      	bne.n	8004a1e <neai_classification+0x2c2>
 8004a36:	ecb6 0a01 	vldmia	r6!, {s0}
 8004a3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a42:	da0a      	bge.n	8004a5a <neai_classification+0x2fe>
 8004a44:	42b7      	cmp	r7, r6
 8004a46:	ed46 8a01 	vstr	s17, [r6, #-4]
 8004a4a:	d012      	beq.n	8004a72 <neai_classification+0x316>
 8004a4c:	ecb6 0a01 	vldmia	r6!, {s0}
 8004a50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a58:	dbf4      	blt.n	8004a44 <neai_classification+0x2e8>
 8004a5a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a62:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004a66:	f100 81ef 	bmi.w	8004e48 <neai_classification+0x6ec>
 8004a6a:	42b7      	cmp	r7, r6
 8004a6c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004a70:	d1ec      	bne.n	8004a4c <neai_classification+0x2f0>
 8004a72:	4a50      	ldr	r2, [pc, #320]	; (8004bb4 <neai_classification+0x458>)
 8004a74:	4b50      	ldr	r3, [pc, #320]	; (8004bb8 <neai_classification+0x45c>)
 8004a76:	8812      	ldrh	r2, [r2, #0]
 8004a78:	494b      	ldr	r1, [pc, #300]	; (8004ba8 <neai_classification+0x44c>)
 8004a7a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	edd3 7a00 	vldr	s15, [r3]
 8004a84:	ecb1 7a01 	vldmia	r1!, {s14}
 8004a88:	3201      	adds	r2, #1
 8004a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a8e:	b290      	uxth	r0, r2
 8004a90:	4285      	cmp	r5, r0
 8004a92:	ece3 7a01 	vstmia	r3!, {s15}
 8004a96:	d8f3      	bhi.n	8004a80 <neai_classification+0x324>
 8004a98:	9b00      	ldr	r3, [sp, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 809e 	beq.w	8004bdc <neai_classification+0x480>
 8004aa0:	4b45      	ldr	r3, [pc, #276]	; (8004bb8 <neai_classification+0x45c>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	461f      	mov	r7, r3
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	ecf1 7a01 	vldmia	r1!, {s15}
 8004aac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab4:	da07      	bge.n	8004ac6 <neai_classification+0x36a>
 8004ab6:	ee07 2a90 	vmov	s15, r2
 8004aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abe:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004ac2:	ed41 7a01 	vstr	s15, [r1, #-4]
 8004ac6:	9d00      	ldr	r5, [sp, #0]
 8004ac8:	3201      	adds	r2, #1
 8004aca:	b290      	uxth	r0, r2
 8004acc:	42a8      	cmp	r0, r5
 8004ace:	d3eb      	bcc.n	8004aa8 <neai_classification+0x34c>
 8004ad0:	2df2      	cmp	r5, #242	; 0xf2
 8004ad2:	462a      	mov	r2, r5
 8004ad4:	d97a      	bls.n	8004bcc <neai_classification+0x470>
 8004ad6:	ee07 2a90 	vmov	s15, r2
 8004ada:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ade:	eddf 7a37 	vldr	s15, [pc, #220]	; 8004bbc <neai_classification+0x460>
 8004ae2:	ed93 aa00 	vldr	s20, [r3]
 8004ae6:	eec7 ba27 	vdiv.f32	s23, s14, s15
 8004aea:	4611      	mov	r1, r2
 8004aec:	4a34      	ldr	r2, [pc, #208]	; (8004bc0 <neai_classification+0x464>)
 8004aee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004af2:	eeb0 8a4a 	vmov.f32	s16, s20
 8004af6:	ecf2 7a01 	vldmia	r2!, {s15}
 8004afa:	eeb4 8a67 	vcmp.f32	s16, s15
 8004afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b02:	bfc8      	it	gt
 8004b04:	eeb0 8a67 	vmovgt.f32	s16, s15
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d1f4      	bne.n	8004af6 <neai_classification+0x39a>
 8004b0c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8004b10:	ee78 9a69 	vsub.f32	s19, s16, s19
 8004b14:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004bc8 <neai_classification+0x46c>
 8004b18:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8004bc4 <neai_classification+0x468>
 8004b1c:	46d8      	mov	r8, fp
 8004b1e:	2601      	movs	r6, #1
 8004b20:	2500      	movs	r5, #0
 8004b22:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8004b26:	ee07 6a10 	vmov	s14, r6
 8004b2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b2e:	eef0 aa4b 	vmov.f32	s21, s22
 8004b32:	eee7 aa2b 	vfma.f32	s21, s14, s23
 8004b36:	ece8 9a01 	vstmia	r8!, {s19}
 8004b3a:	eef4 7aea 	vcmpe.f32	s15, s21
 8004b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b42:	eeb0 0a69 	vmov.f32	s0, s19
 8004b46:	d812      	bhi.n	8004b6e <neai_classification+0x412>
 8004b48:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8004b4c:	3501      	adds	r5, #1
 8004b4e:	edd3 0a00 	vldr	s1, [r3]
 8004b52:	b2ad      	uxth	r5, r5
 8004b54:	f003 f8a6 	bl	8007ca4 <fmaxf>
 8004b58:	ee07 5a90 	vmov	s15, r5
 8004b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b60:	eef4 7aea 	vcmpe.f32	s15, s21
 8004b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b68:	d9ee      	bls.n	8004b48 <neai_classification+0x3ec>
 8004b6a:	ed08 0a01 	vstr	s0, [r8, #-4]
 8004b6e:	ed9b 7a00 	vldr	s14, [fp]
 8004b72:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8004b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7a:	bfc4      	itt	gt
 8004b7c:	ed8b aa00 	vstrgt	s20, [fp]
 8004b80:	ed18 0a01 	vldrgt	s0, [r8, #-4]
 8004b84:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8004b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8c:	dd06      	ble.n	8004b9c <neai_classification+0x440>
 8004b8e:	b2b3      	uxth	r3, r6
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d005      	beq.n	8004ba0 <neai_classification+0x444>
 8004b94:	f8d9 3000 	ldr.w	r3, [r9]
 8004b98:	f848 3c04 	str.w	r3, [r8, #-4]
 8004b9c:	2ef2      	cmp	r6, #242	; 0xf2
 8004b9e:	d01d      	beq.n	8004bdc <neai_classification+0x480>
 8004ba0:	3601      	adds	r6, #1
 8004ba2:	f109 0904 	add.w	r9, r9, #4
 8004ba6:	e7be      	b.n	8004b26 <neai_classification+0x3ca>
 8004ba8:	20002e70 	.word	0x20002e70
 8004bac:	20002670 	.word	0x20002670
 8004bb0:	20002674 	.word	0x20002674
 8004bb4:	20003a74 	.word	0x20003a74
 8004bb8:	20003670 	.word	0x20003670
 8004bbc:	43720000 	.word	0x43720000
 8004bc0:	20003674 	.word	0x20003674
 8004bc4:	00000000 	.word	0x00000000
 8004bc8:	20001b14 	.word	0x20001b14
 8004bcc:	3a01      	subs	r2, #1
 8004bce:	b292      	uxth	r2, r2
 8004bd0:	3201      	adds	r2, #1
 8004bd2:	49a0      	ldr	r1, [pc, #640]	; (8004e54 <neai_classification+0x6f8>)
 8004bd4:	0092      	lsls	r2, r2, #2
 8004bd6:	4658      	mov	r0, fp
 8004bd8:	f000 f978 	bl	8004ecc <memcpy>
 8004bdc:	9b01      	ldr	r3, [sp, #4]
 8004bde:	3301      	adds	r3, #1
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	f50b 7b72 	add.w	fp, fp, #968	; 0x3c8
 8004be8:	f47f addd 	bne.w	80047a6 <neai_classification+0x4a>
 8004bec:	e9dd b906 	ldrd	fp, r9, [sp, #24]
 8004bf0:	4b99      	ldr	r3, [pc, #612]	; (8004e58 <neai_classification+0x6fc>)
 8004bf2:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8004e5c <neai_classification+0x700>
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	f240 24d6 	movw	r4, #726	; 0x2d6
 8004bfc:	eddf 7a98 	vldr	s15, [pc, #608]	; 8004e60 <neai_classification+0x704>
 8004c00:	461a      	mov	r2, r3
 8004c02:	f503 7072 	add.w	r0, r3, #968	; 0x3c8
 8004c06:	ecb2 7a01 	vldmia	r2!, {s14}
 8004c0a:	4290      	cmp	r0, r2
 8004c0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c10:	d1f9      	bne.n	8004c06 <neai_classification+0x4aa>
 8004c12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c16:	edd3 7a00 	vldr	s15, [r3]
 8004c1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c1e:	ece3 7a01 	vstmia	r3!, {s15}
 8004c22:	4298      	cmp	r0, r3
 8004c24:	d1f7      	bne.n	8004c16 <neai_classification+0x4ba>
 8004c26:	31f2      	adds	r1, #242	; 0xf2
 8004c28:	42a1      	cmp	r1, r4
 8004c2a:	d1e7      	bne.n	8004bfc <neai_classification+0x4a0>
 8004c2c:	4b8d      	ldr	r3, [pc, #564]	; (8004e64 <neai_classification+0x708>)
 8004c2e:	ecfb 7a01 	vldmia	fp!, {s15}
 8004c32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	bf48      	it	mi
 8004c3c:	eef1 7a67 	vnegmi.f32	s15, s15
 8004c40:	455b      	cmp	r3, fp
 8004c42:	ed4b 7a01 	vstr	s15, [fp, #-4]
 8004c46:	d1f2      	bne.n	8004c2e <neai_classification+0x4d2>
 8004c48:	4a87      	ldr	r2, [pc, #540]	; (8004e68 <neai_classification+0x70c>)
 8004c4a:	4b88      	ldr	r3, [pc, #544]	; (8004e6c <neai_classification+0x710>)
 8004c4c:	4988      	ldr	r1, [pc, #544]	; (8004e70 <neai_classification+0x714>)
 8004c4e:	f8d2 c000 	ldr.w	ip, [r2]
 8004c52:	681e      	ldr	r6, [r3, #0]
 8004c54:	4887      	ldr	r0, [pc, #540]	; (8004e74 <neai_classification+0x718>)
 8004c56:	680d      	ldr	r5, [r1, #0]
 8004c58:	2400      	movs	r4, #0
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	f04f 0801 	mov.w	r8, #1
 8004c60:	f04f 0e02 	mov.w	lr, #2
 8004c64:	2d00      	cmp	r5, #0
 8004c66:	f340 80e6 	ble.w	8004e36 <neai_classification+0x6da>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8004e60 <neai_classification+0x704>
 8004c70:	461a      	mov	r2, r3
 8004c72:	4f79      	ldr	r7, [pc, #484]	; (8004e58 <neai_classification+0x6fc>)
 8004c74:	4422      	add	r2, r4
 8004c76:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8004c7a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8004c7e:	3301      	adds	r3, #1
 8004c80:	edd2 6a00 	vldr	s13, [r2]
 8004c84:	ed97 7a00 	vldr	s14, [r7]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	42ab      	cmp	r3, r5
 8004c8c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004c90:	461a      	mov	r2, r3
 8004c92:	dbee      	blt.n	8004c72 <neai_classification+0x516>
 8004c94:	ecb6 7a01 	vldmia	r6!, {s14}
 8004c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c9c:	442c      	add	r4, r5
 8004c9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca6:	bfcc      	ite	gt
 8004ca8:	f820 e011 	strhgt.w	lr, [r0, r1, lsl #1]
 8004cac:	f820 8011 	strhle.w	r8, [r0, r1, lsl #1]
 8004cb0:	3101      	adds	r1, #1
 8004cb2:	2903      	cmp	r1, #3
 8004cb4:	d1d6      	bne.n	8004c64 <neai_classification+0x508>
 8004cb6:	8803      	ldrh	r3, [r0, #0]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d003      	beq.n	8004cc4 <neai_classification+0x568>
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	bf1c      	itt	ne
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	8003      	strhne	r3, [r0, #0]
 8004cc4:	8843      	ldrh	r3, [r0, #2]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d004      	beq.n	8004cd4 <neai_classification+0x578>
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	bf14      	ite	ne
 8004cce:	2300      	movne	r3, #0
 8004cd0:	2303      	moveq	r3, #3
 8004cd2:	8043      	strh	r3, [r0, #2]
 8004cd4:	8883      	ldrh	r3, [r0, #4]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	f000 80b9 	beq.w	8004e4e <neai_classification+0x6f2>
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	bf0c      	ite	eq
 8004ce0:	2303      	moveq	r3, #3
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	8083      	strh	r3, [r0, #4]
 8004ce6:	8801      	ldrh	r1, [r0, #0]
 8004ce8:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8004e60 <neai_classification+0x704>
 8004cec:	8842      	ldrh	r2, [r0, #2]
 8004cee:	ed89 8a01 	vstr	s16, [r9, #4]
 8004cf2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8004cf6:	4421      	add	r1, r4
 8004cf8:	ed89 8a00 	vstr	s16, [r9]
 8004cfc:	ed89 8a02 	vstr	s16, [r9, #8]
 8004d00:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8004d04:	edd1 7a00 	vldr	s15, [r1]
 8004d08:	8883      	ldrh	r3, [r0, #4]
 8004d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d12:	4422      	add	r2, r4
 8004d14:	edc1 7a00 	vstr	s15, [r1]
 8004d18:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8004d1c:	edd2 7a00 	vldr	s15, [r2]
 8004d20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d24:	4423      	add	r3, r4
 8004d26:	edc2 7a00 	vstr	s15, [r2]
 8004d2a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8004d2e:	edd3 7a00 	vldr	s15, [r3]
 8004d32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d36:	464c      	mov	r4, r9
 8004d38:	edc3 7a00 	vstr	s15, [r3]
 8004d3c:	edd9 8a00 	vldr	s17, [r9]
 8004d40:	ed99 7a01 	vldr	s14, [r9, #4]
 8004d44:	edd9 7a02 	vldr	s15, [r9, #8]
 8004d48:	eeb4 7a68 	vcmp.f32	s14, s17
 8004d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d50:	bfc8      	it	gt
 8004d52:	eef0 8a47 	vmovgt.f32	s17, s14
 8004d56:	eef4 7a68 	vcmp.f32	s15, s17
 8004d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5e:	bfc8      	it	gt
 8004d60:	eef0 8a67 	vmovgt.f32	s17, s15
 8004d64:	f109 050c 	add.w	r5, r9, #12
 8004d68:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
 8004d6c:	edd4 7a00 	vldr	s15, [r4]
 8004d70:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8004d74:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004d78:	ee17 0a90 	vmov	r0, s15
 8004d7c:	f7fb fbe4 	bl	8000548 <__aeabi_f2d>
 8004d80:	ec41 0b10 	vmov	d0, r0, r1
 8004d84:	f002 ffc8 	bl	8007d18 <exp>
 8004d88:	ec51 0b10 	vmov	r0, r1, d0
 8004d8c:	f7fb ff0c 	bl	8000ba8 <__aeabi_d2f>
 8004d90:	f844 0b04 	str.w	r0, [r4], #4
 8004d94:	ee07 0a90 	vmov	s15, r0
 8004d98:	42ac      	cmp	r4, r5
 8004d9a:	ee38 8a27 	vadd.f32	s16, s16, s15
 8004d9e:	d1e5      	bne.n	8004d6c <neai_classification+0x610>
 8004da0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004da4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8004da8:	9a05      	ldr	r2, [sp, #20]
 8004daa:	9802      	ldr	r0, [sp, #8]
 8004dac:	ed99 7a00 	vldr	s14, [r9]
 8004db0:	edd9 6a01 	vldr	s13, [r9, #4]
 8004db4:	ed99 6a02 	vldr	s12, [r9, #8]
 8004db8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004dbc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004dc0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004dc4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dcc:	ed89 7a00 	vstr	s14, [r9]
 8004dd0:	bf48      	it	mi
 8004dd2:	eeb0 7a66 	vmovmi.f32	s14, s13
 8004dd6:	eeb4 7a67 	vcmp.f32	s14, s15
 8004dda:	bf4c      	ite	mi
 8004ddc:	2302      	movmi	r3, #2
 8004dde:	2301      	movpl	r3, #1
 8004de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de4:	bf48      	it	mi
 8004de6:	2303      	movmi	r3, #3
 8004de8:	edc9 6a01 	vstr	s13, [r9, #4]
 8004dec:	edc9 7a02 	vstr	s15, [r9, #8]
 8004df0:	8013      	strh	r3, [r2, #0]
 8004df2:	b009      	add	sp, #36	; 0x24
 8004df4:	ecbd 8b08 	vpop	{d8-d11}
 8004df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4625      	mov	r5, r4
 8004e02:	f04f 37ff 	mov.w	r7, #4294967295
 8004e06:	e516      	b.n	8004836 <neai_classification+0xda>
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	f43f ae45 	beq.w	8004a98 <neai_classification+0x33c>
 8004e0e:	e630      	b.n	8004a72 <neai_classification+0x316>
 8004e10:	f7fb fb88 	bl	8000524 <__aeabi_i2d>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	2000      	movs	r0, #0
 8004e1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e1e:	f7fb fd15 	bl	800084c <__aeabi_ddiv>
 8004e22:	f7fb fec1 	bl	8000ba8 <__aeabi_d2f>
 8004e26:	2c01      	cmp	r4, #1
 8004e28:	ee09 0a90 	vmov	s19, r0
 8004e2c:	bf18      	it	ne
 8004e2e:	2600      	movne	r6, #0
 8004e30:	f47f ad15 	bne.w	800485e <neai_classification+0x102>
 8004e34:	e5d9      	b.n	80049ea <neai_classification+0x28e>
 8004e36:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8004e60 <neai_classification+0x704>
 8004e3a:	e72b      	b.n	8004c94 <neai_classification+0x538>
 8004e3c:	f002 ffb4 	bl	8007da8 <sqrtf>
 8004e40:	e5c8      	b.n	80049d4 <neai_classification+0x278>
 8004e42:	f002 ffb1 	bl	8007da8 <sqrtf>
 8004e46:	e5b3      	b.n	80049b0 <neai_classification+0x254>
 8004e48:	f002 ffae 	bl	8007da8 <sqrtf>
 8004e4c:	e60d      	b.n	8004a6a <neai_classification+0x30e>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	8083      	strh	r3, [r0, #4]
 8004e52:	e748      	b.n	8004ce6 <neai_classification+0x58a>
 8004e54:	20003670 	.word	0x20003670
 8004e58:	20001b18 	.word	0x20001b18
 8004e5c:	43720000 	.word	0x43720000
 8004e60:	00000000 	.word	0x00000000
 8004e64:	20002670 	.word	0x20002670
 8004e68:	20003aa4 	.word	0x20003aa4
 8004e6c:	20003aa0 	.word	0x20003aa0
 8004e70:	20003a7c 	.word	0x20003a7c
 8004e74:	20003a80 	.word	0x20003a80

08004e78 <__errno>:
 8004e78:	4b01      	ldr	r3, [pc, #4]	; (8004e80 <__errno+0x8>)
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	2000001c 	.word	0x2000001c

08004e84 <__libc_init_array>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4d0d      	ldr	r5, [pc, #52]	; (8004ebc <__libc_init_array+0x38>)
 8004e88:	4c0d      	ldr	r4, [pc, #52]	; (8004ec0 <__libc_init_array+0x3c>)
 8004e8a:	1b64      	subs	r4, r4, r5
 8004e8c:	10a4      	asrs	r4, r4, #2
 8004e8e:	2600      	movs	r6, #0
 8004e90:	42a6      	cmp	r6, r4
 8004e92:	d109      	bne.n	8004ea8 <__libc_init_array+0x24>
 8004e94:	4d0b      	ldr	r5, [pc, #44]	; (8004ec4 <__libc_init_array+0x40>)
 8004e96:	4c0c      	ldr	r4, [pc, #48]	; (8004ec8 <__libc_init_array+0x44>)
 8004e98:	f003 f966 	bl	8008168 <_init>
 8004e9c:	1b64      	subs	r4, r4, r5
 8004e9e:	10a4      	asrs	r4, r4, #2
 8004ea0:	2600      	movs	r6, #0
 8004ea2:	42a6      	cmp	r6, r4
 8004ea4:	d105      	bne.n	8004eb2 <__libc_init_array+0x2e>
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eac:	4798      	blx	r3
 8004eae:	3601      	adds	r6, #1
 8004eb0:	e7ee      	b.n	8004e90 <__libc_init_array+0xc>
 8004eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb6:	4798      	blx	r3
 8004eb8:	3601      	adds	r6, #1
 8004eba:	e7f2      	b.n	8004ea2 <__libc_init_array+0x1e>
 8004ebc:	0800a890 	.word	0x0800a890
 8004ec0:	0800a890 	.word	0x0800a890
 8004ec4:	0800a890 	.word	0x0800a890
 8004ec8:	0800a894 	.word	0x0800a894

08004ecc <memcpy>:
 8004ecc:	440a      	add	r2, r1
 8004ece:	4291      	cmp	r1, r2
 8004ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ed4:	d100      	bne.n	8004ed8 <memcpy+0xc>
 8004ed6:	4770      	bx	lr
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ee2:	4291      	cmp	r1, r2
 8004ee4:	d1f9      	bne.n	8004eda <memcpy+0xe>
 8004ee6:	bd10      	pop	{r4, pc}

08004ee8 <memset>:
 8004ee8:	4402      	add	r2, r0
 8004eea:	4603      	mov	r3, r0
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d100      	bne.n	8004ef2 <memset+0xa>
 8004ef0:	4770      	bx	lr
 8004ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef6:	e7f9      	b.n	8004eec <memset+0x4>

08004ef8 <__cvt>:
 8004ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004efc:	ec55 4b10 	vmov	r4, r5, d0
 8004f00:	2d00      	cmp	r5, #0
 8004f02:	460e      	mov	r6, r1
 8004f04:	4619      	mov	r1, r3
 8004f06:	462b      	mov	r3, r5
 8004f08:	bfbb      	ittet	lt
 8004f0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f0e:	461d      	movlt	r5, r3
 8004f10:	2300      	movge	r3, #0
 8004f12:	232d      	movlt	r3, #45	; 0x2d
 8004f14:	700b      	strb	r3, [r1, #0]
 8004f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f1c:	4691      	mov	r9, r2
 8004f1e:	f023 0820 	bic.w	r8, r3, #32
 8004f22:	bfbc      	itt	lt
 8004f24:	4622      	movlt	r2, r4
 8004f26:	4614      	movlt	r4, r2
 8004f28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f2c:	d005      	beq.n	8004f3a <__cvt+0x42>
 8004f2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f32:	d100      	bne.n	8004f36 <__cvt+0x3e>
 8004f34:	3601      	adds	r6, #1
 8004f36:	2102      	movs	r1, #2
 8004f38:	e000      	b.n	8004f3c <__cvt+0x44>
 8004f3a:	2103      	movs	r1, #3
 8004f3c:	ab03      	add	r3, sp, #12
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	ab02      	add	r3, sp, #8
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	ec45 4b10 	vmov	d0, r4, r5
 8004f48:	4653      	mov	r3, sl
 8004f4a:	4632      	mov	r2, r6
 8004f4c:	f000 fcec 	bl	8005928 <_dtoa_r>
 8004f50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f54:	4607      	mov	r7, r0
 8004f56:	d102      	bne.n	8004f5e <__cvt+0x66>
 8004f58:	f019 0f01 	tst.w	r9, #1
 8004f5c:	d022      	beq.n	8004fa4 <__cvt+0xac>
 8004f5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f62:	eb07 0906 	add.w	r9, r7, r6
 8004f66:	d110      	bne.n	8004f8a <__cvt+0x92>
 8004f68:	783b      	ldrb	r3, [r7, #0]
 8004f6a:	2b30      	cmp	r3, #48	; 0x30
 8004f6c:	d10a      	bne.n	8004f84 <__cvt+0x8c>
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2300      	movs	r3, #0
 8004f72:	4620      	mov	r0, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	f7fb fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f7a:	b918      	cbnz	r0, 8004f84 <__cvt+0x8c>
 8004f7c:	f1c6 0601 	rsb	r6, r6, #1
 8004f80:	f8ca 6000 	str.w	r6, [sl]
 8004f84:	f8da 3000 	ldr.w	r3, [sl]
 8004f88:	4499      	add	r9, r3
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	4620      	mov	r0, r4
 8004f90:	4629      	mov	r1, r5
 8004f92:	f7fb fd99 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f96:	b108      	cbz	r0, 8004f9c <__cvt+0xa4>
 8004f98:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f9c:	2230      	movs	r2, #48	; 0x30
 8004f9e:	9b03      	ldr	r3, [sp, #12]
 8004fa0:	454b      	cmp	r3, r9
 8004fa2:	d307      	bcc.n	8004fb4 <__cvt+0xbc>
 8004fa4:	9b03      	ldr	r3, [sp, #12]
 8004fa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fa8:	1bdb      	subs	r3, r3, r7
 8004faa:	4638      	mov	r0, r7
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	b004      	add	sp, #16
 8004fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb4:	1c59      	adds	r1, r3, #1
 8004fb6:	9103      	str	r1, [sp, #12]
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	e7f0      	b.n	8004f9e <__cvt+0xa6>

08004fbc <__exponent>:
 8004fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	bfb8      	it	lt
 8004fc4:	4249      	neglt	r1, r1
 8004fc6:	f803 2b02 	strb.w	r2, [r3], #2
 8004fca:	bfb4      	ite	lt
 8004fcc:	222d      	movlt	r2, #45	; 0x2d
 8004fce:	222b      	movge	r2, #43	; 0x2b
 8004fd0:	2909      	cmp	r1, #9
 8004fd2:	7042      	strb	r2, [r0, #1]
 8004fd4:	dd2a      	ble.n	800502c <__exponent+0x70>
 8004fd6:	f10d 0407 	add.w	r4, sp, #7
 8004fda:	46a4      	mov	ip, r4
 8004fdc:	270a      	movs	r7, #10
 8004fde:	46a6      	mov	lr, r4
 8004fe0:	460a      	mov	r2, r1
 8004fe2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004fe6:	fb07 1516 	mls	r5, r7, r6, r1
 8004fea:	3530      	adds	r5, #48	; 0x30
 8004fec:	2a63      	cmp	r2, #99	; 0x63
 8004fee:	f104 34ff 	add.w	r4, r4, #4294967295
 8004ff2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	dcf1      	bgt.n	8004fde <__exponent+0x22>
 8004ffa:	3130      	adds	r1, #48	; 0x30
 8004ffc:	f1ae 0502 	sub.w	r5, lr, #2
 8005000:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005004:	1c44      	adds	r4, r0, #1
 8005006:	4629      	mov	r1, r5
 8005008:	4561      	cmp	r1, ip
 800500a:	d30a      	bcc.n	8005022 <__exponent+0x66>
 800500c:	f10d 0209 	add.w	r2, sp, #9
 8005010:	eba2 020e 	sub.w	r2, r2, lr
 8005014:	4565      	cmp	r5, ip
 8005016:	bf88      	it	hi
 8005018:	2200      	movhi	r2, #0
 800501a:	4413      	add	r3, r2
 800501c:	1a18      	subs	r0, r3, r0
 800501e:	b003      	add	sp, #12
 8005020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005022:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005026:	f804 2f01 	strb.w	r2, [r4, #1]!
 800502a:	e7ed      	b.n	8005008 <__exponent+0x4c>
 800502c:	2330      	movs	r3, #48	; 0x30
 800502e:	3130      	adds	r1, #48	; 0x30
 8005030:	7083      	strb	r3, [r0, #2]
 8005032:	70c1      	strb	r1, [r0, #3]
 8005034:	1d03      	adds	r3, r0, #4
 8005036:	e7f1      	b.n	800501c <__exponent+0x60>

08005038 <_printf_float>:
 8005038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	ed2d 8b02 	vpush	{d8}
 8005040:	b08d      	sub	sp, #52	; 0x34
 8005042:	460c      	mov	r4, r1
 8005044:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005048:	4616      	mov	r6, r2
 800504a:	461f      	mov	r7, r3
 800504c:	4605      	mov	r5, r0
 800504e:	f001 fa59 	bl	8006504 <_localeconv_r>
 8005052:	f8d0 a000 	ldr.w	sl, [r0]
 8005056:	4650      	mov	r0, sl
 8005058:	f7fb f8ba 	bl	80001d0 <strlen>
 800505c:	2300      	movs	r3, #0
 800505e:	930a      	str	r3, [sp, #40]	; 0x28
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	9305      	str	r3, [sp, #20]
 8005064:	f8d8 3000 	ldr.w	r3, [r8]
 8005068:	f894 b018 	ldrb.w	fp, [r4, #24]
 800506c:	3307      	adds	r3, #7
 800506e:	f023 0307 	bic.w	r3, r3, #7
 8005072:	f103 0208 	add.w	r2, r3, #8
 8005076:	f8c8 2000 	str.w	r2, [r8]
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005082:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005086:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800508a:	9307      	str	r3, [sp, #28]
 800508c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005090:	ee08 0a10 	vmov	s16, r0
 8005094:	4b9f      	ldr	r3, [pc, #636]	; (8005314 <_printf_float+0x2dc>)
 8005096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800509a:	f04f 32ff 	mov.w	r2, #4294967295
 800509e:	f7fb fd45 	bl	8000b2c <__aeabi_dcmpun>
 80050a2:	bb88      	cbnz	r0, 8005108 <_printf_float+0xd0>
 80050a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050a8:	4b9a      	ldr	r3, [pc, #616]	; (8005314 <_printf_float+0x2dc>)
 80050aa:	f04f 32ff 	mov.w	r2, #4294967295
 80050ae:	f7fb fd1f 	bl	8000af0 <__aeabi_dcmple>
 80050b2:	bb48      	cbnz	r0, 8005108 <_printf_float+0xd0>
 80050b4:	2200      	movs	r2, #0
 80050b6:	2300      	movs	r3, #0
 80050b8:	4640      	mov	r0, r8
 80050ba:	4649      	mov	r1, r9
 80050bc:	f7fb fd0e 	bl	8000adc <__aeabi_dcmplt>
 80050c0:	b110      	cbz	r0, 80050c8 <_printf_float+0x90>
 80050c2:	232d      	movs	r3, #45	; 0x2d
 80050c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c8:	4b93      	ldr	r3, [pc, #588]	; (8005318 <_printf_float+0x2e0>)
 80050ca:	4894      	ldr	r0, [pc, #592]	; (800531c <_printf_float+0x2e4>)
 80050cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80050d0:	bf94      	ite	ls
 80050d2:	4698      	movls	r8, r3
 80050d4:	4680      	movhi	r8, r0
 80050d6:	2303      	movs	r3, #3
 80050d8:	6123      	str	r3, [r4, #16]
 80050da:	9b05      	ldr	r3, [sp, #20]
 80050dc:	f023 0204 	bic.w	r2, r3, #4
 80050e0:	6022      	str	r2, [r4, #0]
 80050e2:	f04f 0900 	mov.w	r9, #0
 80050e6:	9700      	str	r7, [sp, #0]
 80050e8:	4633      	mov	r3, r6
 80050ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80050ec:	4621      	mov	r1, r4
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f9d8 	bl	80054a4 <_printf_common>
 80050f4:	3001      	adds	r0, #1
 80050f6:	f040 8090 	bne.w	800521a <_printf_float+0x1e2>
 80050fa:	f04f 30ff 	mov.w	r0, #4294967295
 80050fe:	b00d      	add	sp, #52	; 0x34
 8005100:	ecbd 8b02 	vpop	{d8}
 8005104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005108:	4642      	mov	r2, r8
 800510a:	464b      	mov	r3, r9
 800510c:	4640      	mov	r0, r8
 800510e:	4649      	mov	r1, r9
 8005110:	f7fb fd0c 	bl	8000b2c <__aeabi_dcmpun>
 8005114:	b140      	cbz	r0, 8005128 <_printf_float+0xf0>
 8005116:	464b      	mov	r3, r9
 8005118:	2b00      	cmp	r3, #0
 800511a:	bfbc      	itt	lt
 800511c:	232d      	movlt	r3, #45	; 0x2d
 800511e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005122:	487f      	ldr	r0, [pc, #508]	; (8005320 <_printf_float+0x2e8>)
 8005124:	4b7f      	ldr	r3, [pc, #508]	; (8005324 <_printf_float+0x2ec>)
 8005126:	e7d1      	b.n	80050cc <_printf_float+0x94>
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800512e:	9206      	str	r2, [sp, #24]
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	d13f      	bne.n	80051b4 <_printf_float+0x17c>
 8005134:	2306      	movs	r3, #6
 8005136:	6063      	str	r3, [r4, #4]
 8005138:	9b05      	ldr	r3, [sp, #20]
 800513a:	6861      	ldr	r1, [r4, #4]
 800513c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005140:	2300      	movs	r3, #0
 8005142:	9303      	str	r3, [sp, #12]
 8005144:	ab0a      	add	r3, sp, #40	; 0x28
 8005146:	e9cd b301 	strd	fp, r3, [sp, #4]
 800514a:	ab09      	add	r3, sp, #36	; 0x24
 800514c:	ec49 8b10 	vmov	d0, r8, r9
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	6022      	str	r2, [r4, #0]
 8005154:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005158:	4628      	mov	r0, r5
 800515a:	f7ff fecd 	bl	8004ef8 <__cvt>
 800515e:	9b06      	ldr	r3, [sp, #24]
 8005160:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005162:	2b47      	cmp	r3, #71	; 0x47
 8005164:	4680      	mov	r8, r0
 8005166:	d108      	bne.n	800517a <_printf_float+0x142>
 8005168:	1cc8      	adds	r0, r1, #3
 800516a:	db02      	blt.n	8005172 <_printf_float+0x13a>
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	4299      	cmp	r1, r3
 8005170:	dd41      	ble.n	80051f6 <_printf_float+0x1be>
 8005172:	f1ab 0b02 	sub.w	fp, fp, #2
 8005176:	fa5f fb8b 	uxtb.w	fp, fp
 800517a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800517e:	d820      	bhi.n	80051c2 <_printf_float+0x18a>
 8005180:	3901      	subs	r1, #1
 8005182:	465a      	mov	r2, fp
 8005184:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005188:	9109      	str	r1, [sp, #36]	; 0x24
 800518a:	f7ff ff17 	bl	8004fbc <__exponent>
 800518e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005190:	1813      	adds	r3, r2, r0
 8005192:	2a01      	cmp	r2, #1
 8005194:	4681      	mov	r9, r0
 8005196:	6123      	str	r3, [r4, #16]
 8005198:	dc02      	bgt.n	80051a0 <_printf_float+0x168>
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	07d2      	lsls	r2, r2, #31
 800519e:	d501      	bpl.n	80051a4 <_printf_float+0x16c>
 80051a0:	3301      	adds	r3, #1
 80051a2:	6123      	str	r3, [r4, #16]
 80051a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d09c      	beq.n	80050e6 <_printf_float+0xae>
 80051ac:	232d      	movs	r3, #45	; 0x2d
 80051ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b2:	e798      	b.n	80050e6 <_printf_float+0xae>
 80051b4:	9a06      	ldr	r2, [sp, #24]
 80051b6:	2a47      	cmp	r2, #71	; 0x47
 80051b8:	d1be      	bne.n	8005138 <_printf_float+0x100>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1bc      	bne.n	8005138 <_printf_float+0x100>
 80051be:	2301      	movs	r3, #1
 80051c0:	e7b9      	b.n	8005136 <_printf_float+0xfe>
 80051c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80051c6:	d118      	bne.n	80051fa <_printf_float+0x1c2>
 80051c8:	2900      	cmp	r1, #0
 80051ca:	6863      	ldr	r3, [r4, #4]
 80051cc:	dd0b      	ble.n	80051e6 <_printf_float+0x1ae>
 80051ce:	6121      	str	r1, [r4, #16]
 80051d0:	b913      	cbnz	r3, 80051d8 <_printf_float+0x1a0>
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	07d0      	lsls	r0, r2, #31
 80051d6:	d502      	bpl.n	80051de <_printf_float+0x1a6>
 80051d8:	3301      	adds	r3, #1
 80051da:	440b      	add	r3, r1
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	65a1      	str	r1, [r4, #88]	; 0x58
 80051e0:	f04f 0900 	mov.w	r9, #0
 80051e4:	e7de      	b.n	80051a4 <_printf_float+0x16c>
 80051e6:	b913      	cbnz	r3, 80051ee <_printf_float+0x1b6>
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	07d2      	lsls	r2, r2, #31
 80051ec:	d501      	bpl.n	80051f2 <_printf_float+0x1ba>
 80051ee:	3302      	adds	r3, #2
 80051f0:	e7f4      	b.n	80051dc <_printf_float+0x1a4>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e7f2      	b.n	80051dc <_printf_float+0x1a4>
 80051f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051fc:	4299      	cmp	r1, r3
 80051fe:	db05      	blt.n	800520c <_printf_float+0x1d4>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	6121      	str	r1, [r4, #16]
 8005204:	07d8      	lsls	r0, r3, #31
 8005206:	d5ea      	bpl.n	80051de <_printf_float+0x1a6>
 8005208:	1c4b      	adds	r3, r1, #1
 800520a:	e7e7      	b.n	80051dc <_printf_float+0x1a4>
 800520c:	2900      	cmp	r1, #0
 800520e:	bfd4      	ite	le
 8005210:	f1c1 0202 	rsble	r2, r1, #2
 8005214:	2201      	movgt	r2, #1
 8005216:	4413      	add	r3, r2
 8005218:	e7e0      	b.n	80051dc <_printf_float+0x1a4>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	055a      	lsls	r2, r3, #21
 800521e:	d407      	bmi.n	8005230 <_printf_float+0x1f8>
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	4642      	mov	r2, r8
 8005224:	4631      	mov	r1, r6
 8005226:	4628      	mov	r0, r5
 8005228:	47b8      	blx	r7
 800522a:	3001      	adds	r0, #1
 800522c:	d12c      	bne.n	8005288 <_printf_float+0x250>
 800522e:	e764      	b.n	80050fa <_printf_float+0xc2>
 8005230:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005234:	f240 80e0 	bls.w	80053f8 <_printf_float+0x3c0>
 8005238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	f7fb fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8005244:	2800      	cmp	r0, #0
 8005246:	d034      	beq.n	80052b2 <_printf_float+0x27a>
 8005248:	4a37      	ldr	r2, [pc, #220]	; (8005328 <_printf_float+0x2f0>)
 800524a:	2301      	movs	r3, #1
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f af51 	beq.w	80050fa <_printf_float+0xc2>
 8005258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800525c:	429a      	cmp	r2, r3
 800525e:	db02      	blt.n	8005266 <_printf_float+0x22e>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	07d8      	lsls	r0, r3, #31
 8005264:	d510      	bpl.n	8005288 <_printf_float+0x250>
 8005266:	ee18 3a10 	vmov	r3, s16
 800526a:	4652      	mov	r2, sl
 800526c:	4631      	mov	r1, r6
 800526e:	4628      	mov	r0, r5
 8005270:	47b8      	blx	r7
 8005272:	3001      	adds	r0, #1
 8005274:	f43f af41 	beq.w	80050fa <_printf_float+0xc2>
 8005278:	f04f 0800 	mov.w	r8, #0
 800527c:	f104 091a 	add.w	r9, r4, #26
 8005280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005282:	3b01      	subs	r3, #1
 8005284:	4543      	cmp	r3, r8
 8005286:	dc09      	bgt.n	800529c <_printf_float+0x264>
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	079b      	lsls	r3, r3, #30
 800528c:	f100 8105 	bmi.w	800549a <_printf_float+0x462>
 8005290:	68e0      	ldr	r0, [r4, #12]
 8005292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005294:	4298      	cmp	r0, r3
 8005296:	bfb8      	it	lt
 8005298:	4618      	movlt	r0, r3
 800529a:	e730      	b.n	80050fe <_printf_float+0xc6>
 800529c:	2301      	movs	r3, #1
 800529e:	464a      	mov	r2, r9
 80052a0:	4631      	mov	r1, r6
 80052a2:	4628      	mov	r0, r5
 80052a4:	47b8      	blx	r7
 80052a6:	3001      	adds	r0, #1
 80052a8:	f43f af27 	beq.w	80050fa <_printf_float+0xc2>
 80052ac:	f108 0801 	add.w	r8, r8, #1
 80052b0:	e7e6      	b.n	8005280 <_printf_float+0x248>
 80052b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	dc39      	bgt.n	800532c <_printf_float+0x2f4>
 80052b8:	4a1b      	ldr	r2, [pc, #108]	; (8005328 <_printf_float+0x2f0>)
 80052ba:	2301      	movs	r3, #1
 80052bc:	4631      	mov	r1, r6
 80052be:	4628      	mov	r0, r5
 80052c0:	47b8      	blx	r7
 80052c2:	3001      	adds	r0, #1
 80052c4:	f43f af19 	beq.w	80050fa <_printf_float+0xc2>
 80052c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052cc:	4313      	orrs	r3, r2
 80052ce:	d102      	bne.n	80052d6 <_printf_float+0x29e>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	07d9      	lsls	r1, r3, #31
 80052d4:	d5d8      	bpl.n	8005288 <_printf_float+0x250>
 80052d6:	ee18 3a10 	vmov	r3, s16
 80052da:	4652      	mov	r2, sl
 80052dc:	4631      	mov	r1, r6
 80052de:	4628      	mov	r0, r5
 80052e0:	47b8      	blx	r7
 80052e2:	3001      	adds	r0, #1
 80052e4:	f43f af09 	beq.w	80050fa <_printf_float+0xc2>
 80052e8:	f04f 0900 	mov.w	r9, #0
 80052ec:	f104 0a1a 	add.w	sl, r4, #26
 80052f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f2:	425b      	negs	r3, r3
 80052f4:	454b      	cmp	r3, r9
 80052f6:	dc01      	bgt.n	80052fc <_printf_float+0x2c4>
 80052f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052fa:	e792      	b.n	8005222 <_printf_float+0x1ea>
 80052fc:	2301      	movs	r3, #1
 80052fe:	4652      	mov	r2, sl
 8005300:	4631      	mov	r1, r6
 8005302:	4628      	mov	r0, r5
 8005304:	47b8      	blx	r7
 8005306:	3001      	adds	r0, #1
 8005308:	f43f aef7 	beq.w	80050fa <_printf_float+0xc2>
 800530c:	f109 0901 	add.w	r9, r9, #1
 8005310:	e7ee      	b.n	80052f0 <_printf_float+0x2b8>
 8005312:	bf00      	nop
 8005314:	7fefffff 	.word	0x7fefffff
 8005318:	0800a47c 	.word	0x0800a47c
 800531c:	0800a480 	.word	0x0800a480
 8005320:	0800a488 	.word	0x0800a488
 8005324:	0800a484 	.word	0x0800a484
 8005328:	0800a48c 	.word	0x0800a48c
 800532c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800532e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005330:	429a      	cmp	r2, r3
 8005332:	bfa8      	it	ge
 8005334:	461a      	movge	r2, r3
 8005336:	2a00      	cmp	r2, #0
 8005338:	4691      	mov	r9, r2
 800533a:	dc37      	bgt.n	80053ac <_printf_float+0x374>
 800533c:	f04f 0b00 	mov.w	fp, #0
 8005340:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005344:	f104 021a 	add.w	r2, r4, #26
 8005348:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	eba3 0309 	sub.w	r3, r3, r9
 8005350:	455b      	cmp	r3, fp
 8005352:	dc33      	bgt.n	80053bc <_printf_float+0x384>
 8005354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005358:	429a      	cmp	r2, r3
 800535a:	db3b      	blt.n	80053d4 <_printf_float+0x39c>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	07da      	lsls	r2, r3, #31
 8005360:	d438      	bmi.n	80053d4 <_printf_float+0x39c>
 8005362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005364:	9a05      	ldr	r2, [sp, #20]
 8005366:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005368:	1a9a      	subs	r2, r3, r2
 800536a:	eba3 0901 	sub.w	r9, r3, r1
 800536e:	4591      	cmp	r9, r2
 8005370:	bfa8      	it	ge
 8005372:	4691      	movge	r9, r2
 8005374:	f1b9 0f00 	cmp.w	r9, #0
 8005378:	dc35      	bgt.n	80053e6 <_printf_float+0x3ae>
 800537a:	f04f 0800 	mov.w	r8, #0
 800537e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005382:	f104 0a1a 	add.w	sl, r4, #26
 8005386:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	eba3 0309 	sub.w	r3, r3, r9
 8005390:	4543      	cmp	r3, r8
 8005392:	f77f af79 	ble.w	8005288 <_printf_float+0x250>
 8005396:	2301      	movs	r3, #1
 8005398:	4652      	mov	r2, sl
 800539a:	4631      	mov	r1, r6
 800539c:	4628      	mov	r0, r5
 800539e:	47b8      	blx	r7
 80053a0:	3001      	adds	r0, #1
 80053a2:	f43f aeaa 	beq.w	80050fa <_printf_float+0xc2>
 80053a6:	f108 0801 	add.w	r8, r8, #1
 80053aa:	e7ec      	b.n	8005386 <_printf_float+0x34e>
 80053ac:	4613      	mov	r3, r2
 80053ae:	4631      	mov	r1, r6
 80053b0:	4642      	mov	r2, r8
 80053b2:	4628      	mov	r0, r5
 80053b4:	47b8      	blx	r7
 80053b6:	3001      	adds	r0, #1
 80053b8:	d1c0      	bne.n	800533c <_printf_float+0x304>
 80053ba:	e69e      	b.n	80050fa <_printf_float+0xc2>
 80053bc:	2301      	movs	r3, #1
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	9205      	str	r2, [sp, #20]
 80053c4:	47b8      	blx	r7
 80053c6:	3001      	adds	r0, #1
 80053c8:	f43f ae97 	beq.w	80050fa <_printf_float+0xc2>
 80053cc:	9a05      	ldr	r2, [sp, #20]
 80053ce:	f10b 0b01 	add.w	fp, fp, #1
 80053d2:	e7b9      	b.n	8005348 <_printf_float+0x310>
 80053d4:	ee18 3a10 	vmov	r3, s16
 80053d8:	4652      	mov	r2, sl
 80053da:	4631      	mov	r1, r6
 80053dc:	4628      	mov	r0, r5
 80053de:	47b8      	blx	r7
 80053e0:	3001      	adds	r0, #1
 80053e2:	d1be      	bne.n	8005362 <_printf_float+0x32a>
 80053e4:	e689      	b.n	80050fa <_printf_float+0xc2>
 80053e6:	9a05      	ldr	r2, [sp, #20]
 80053e8:	464b      	mov	r3, r9
 80053ea:	4442      	add	r2, r8
 80053ec:	4631      	mov	r1, r6
 80053ee:	4628      	mov	r0, r5
 80053f0:	47b8      	blx	r7
 80053f2:	3001      	adds	r0, #1
 80053f4:	d1c1      	bne.n	800537a <_printf_float+0x342>
 80053f6:	e680      	b.n	80050fa <_printf_float+0xc2>
 80053f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053fa:	2a01      	cmp	r2, #1
 80053fc:	dc01      	bgt.n	8005402 <_printf_float+0x3ca>
 80053fe:	07db      	lsls	r3, r3, #31
 8005400:	d538      	bpl.n	8005474 <_printf_float+0x43c>
 8005402:	2301      	movs	r3, #1
 8005404:	4642      	mov	r2, r8
 8005406:	4631      	mov	r1, r6
 8005408:	4628      	mov	r0, r5
 800540a:	47b8      	blx	r7
 800540c:	3001      	adds	r0, #1
 800540e:	f43f ae74 	beq.w	80050fa <_printf_float+0xc2>
 8005412:	ee18 3a10 	vmov	r3, s16
 8005416:	4652      	mov	r2, sl
 8005418:	4631      	mov	r1, r6
 800541a:	4628      	mov	r0, r5
 800541c:	47b8      	blx	r7
 800541e:	3001      	adds	r0, #1
 8005420:	f43f ae6b 	beq.w	80050fa <_printf_float+0xc2>
 8005424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005428:	2200      	movs	r2, #0
 800542a:	2300      	movs	r3, #0
 800542c:	f7fb fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005430:	b9d8      	cbnz	r0, 800546a <_printf_float+0x432>
 8005432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005434:	f108 0201 	add.w	r2, r8, #1
 8005438:	3b01      	subs	r3, #1
 800543a:	4631      	mov	r1, r6
 800543c:	4628      	mov	r0, r5
 800543e:	47b8      	blx	r7
 8005440:	3001      	adds	r0, #1
 8005442:	d10e      	bne.n	8005462 <_printf_float+0x42a>
 8005444:	e659      	b.n	80050fa <_printf_float+0xc2>
 8005446:	2301      	movs	r3, #1
 8005448:	4652      	mov	r2, sl
 800544a:	4631      	mov	r1, r6
 800544c:	4628      	mov	r0, r5
 800544e:	47b8      	blx	r7
 8005450:	3001      	adds	r0, #1
 8005452:	f43f ae52 	beq.w	80050fa <_printf_float+0xc2>
 8005456:	f108 0801 	add.w	r8, r8, #1
 800545a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800545c:	3b01      	subs	r3, #1
 800545e:	4543      	cmp	r3, r8
 8005460:	dcf1      	bgt.n	8005446 <_printf_float+0x40e>
 8005462:	464b      	mov	r3, r9
 8005464:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005468:	e6dc      	b.n	8005224 <_printf_float+0x1ec>
 800546a:	f04f 0800 	mov.w	r8, #0
 800546e:	f104 0a1a 	add.w	sl, r4, #26
 8005472:	e7f2      	b.n	800545a <_printf_float+0x422>
 8005474:	2301      	movs	r3, #1
 8005476:	4642      	mov	r2, r8
 8005478:	e7df      	b.n	800543a <_printf_float+0x402>
 800547a:	2301      	movs	r3, #1
 800547c:	464a      	mov	r2, r9
 800547e:	4631      	mov	r1, r6
 8005480:	4628      	mov	r0, r5
 8005482:	47b8      	blx	r7
 8005484:	3001      	adds	r0, #1
 8005486:	f43f ae38 	beq.w	80050fa <_printf_float+0xc2>
 800548a:	f108 0801 	add.w	r8, r8, #1
 800548e:	68e3      	ldr	r3, [r4, #12]
 8005490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005492:	1a5b      	subs	r3, r3, r1
 8005494:	4543      	cmp	r3, r8
 8005496:	dcf0      	bgt.n	800547a <_printf_float+0x442>
 8005498:	e6fa      	b.n	8005290 <_printf_float+0x258>
 800549a:	f04f 0800 	mov.w	r8, #0
 800549e:	f104 0919 	add.w	r9, r4, #25
 80054a2:	e7f4      	b.n	800548e <_printf_float+0x456>

080054a4 <_printf_common>:
 80054a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a8:	4616      	mov	r6, r2
 80054aa:	4699      	mov	r9, r3
 80054ac:	688a      	ldr	r2, [r1, #8]
 80054ae:	690b      	ldr	r3, [r1, #16]
 80054b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054b4:	4293      	cmp	r3, r2
 80054b6:	bfb8      	it	lt
 80054b8:	4613      	movlt	r3, r2
 80054ba:	6033      	str	r3, [r6, #0]
 80054bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054c0:	4607      	mov	r7, r0
 80054c2:	460c      	mov	r4, r1
 80054c4:	b10a      	cbz	r2, 80054ca <_printf_common+0x26>
 80054c6:	3301      	adds	r3, #1
 80054c8:	6033      	str	r3, [r6, #0]
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	0699      	lsls	r1, r3, #26
 80054ce:	bf42      	ittt	mi
 80054d0:	6833      	ldrmi	r3, [r6, #0]
 80054d2:	3302      	addmi	r3, #2
 80054d4:	6033      	strmi	r3, [r6, #0]
 80054d6:	6825      	ldr	r5, [r4, #0]
 80054d8:	f015 0506 	ands.w	r5, r5, #6
 80054dc:	d106      	bne.n	80054ec <_printf_common+0x48>
 80054de:	f104 0a19 	add.w	sl, r4, #25
 80054e2:	68e3      	ldr	r3, [r4, #12]
 80054e4:	6832      	ldr	r2, [r6, #0]
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	42ab      	cmp	r3, r5
 80054ea:	dc26      	bgt.n	800553a <_printf_common+0x96>
 80054ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054f0:	1e13      	subs	r3, r2, #0
 80054f2:	6822      	ldr	r2, [r4, #0]
 80054f4:	bf18      	it	ne
 80054f6:	2301      	movne	r3, #1
 80054f8:	0692      	lsls	r2, r2, #26
 80054fa:	d42b      	bmi.n	8005554 <_printf_common+0xb0>
 80054fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005500:	4649      	mov	r1, r9
 8005502:	4638      	mov	r0, r7
 8005504:	47c0      	blx	r8
 8005506:	3001      	adds	r0, #1
 8005508:	d01e      	beq.n	8005548 <_printf_common+0xa4>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	68e5      	ldr	r5, [r4, #12]
 800550e:	6832      	ldr	r2, [r6, #0]
 8005510:	f003 0306 	and.w	r3, r3, #6
 8005514:	2b04      	cmp	r3, #4
 8005516:	bf08      	it	eq
 8005518:	1aad      	subeq	r5, r5, r2
 800551a:	68a3      	ldr	r3, [r4, #8]
 800551c:	6922      	ldr	r2, [r4, #16]
 800551e:	bf0c      	ite	eq
 8005520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005524:	2500      	movne	r5, #0
 8005526:	4293      	cmp	r3, r2
 8005528:	bfc4      	itt	gt
 800552a:	1a9b      	subgt	r3, r3, r2
 800552c:	18ed      	addgt	r5, r5, r3
 800552e:	2600      	movs	r6, #0
 8005530:	341a      	adds	r4, #26
 8005532:	42b5      	cmp	r5, r6
 8005534:	d11a      	bne.n	800556c <_printf_common+0xc8>
 8005536:	2000      	movs	r0, #0
 8005538:	e008      	b.n	800554c <_printf_common+0xa8>
 800553a:	2301      	movs	r3, #1
 800553c:	4652      	mov	r2, sl
 800553e:	4649      	mov	r1, r9
 8005540:	4638      	mov	r0, r7
 8005542:	47c0      	blx	r8
 8005544:	3001      	adds	r0, #1
 8005546:	d103      	bne.n	8005550 <_printf_common+0xac>
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005550:	3501      	adds	r5, #1
 8005552:	e7c6      	b.n	80054e2 <_printf_common+0x3e>
 8005554:	18e1      	adds	r1, r4, r3
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	2030      	movs	r0, #48	; 0x30
 800555a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800555e:	4422      	add	r2, r4
 8005560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005568:	3302      	adds	r3, #2
 800556a:	e7c7      	b.n	80054fc <_printf_common+0x58>
 800556c:	2301      	movs	r3, #1
 800556e:	4622      	mov	r2, r4
 8005570:	4649      	mov	r1, r9
 8005572:	4638      	mov	r0, r7
 8005574:	47c0      	blx	r8
 8005576:	3001      	adds	r0, #1
 8005578:	d0e6      	beq.n	8005548 <_printf_common+0xa4>
 800557a:	3601      	adds	r6, #1
 800557c:	e7d9      	b.n	8005532 <_printf_common+0x8e>
	...

08005580 <_printf_i>:
 8005580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005584:	7e0f      	ldrb	r7, [r1, #24]
 8005586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005588:	2f78      	cmp	r7, #120	; 0x78
 800558a:	4691      	mov	r9, r2
 800558c:	4680      	mov	r8, r0
 800558e:	460c      	mov	r4, r1
 8005590:	469a      	mov	sl, r3
 8005592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005596:	d807      	bhi.n	80055a8 <_printf_i+0x28>
 8005598:	2f62      	cmp	r7, #98	; 0x62
 800559a:	d80a      	bhi.n	80055b2 <_printf_i+0x32>
 800559c:	2f00      	cmp	r7, #0
 800559e:	f000 80d8 	beq.w	8005752 <_printf_i+0x1d2>
 80055a2:	2f58      	cmp	r7, #88	; 0x58
 80055a4:	f000 80a3 	beq.w	80056ee <_printf_i+0x16e>
 80055a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055b0:	e03a      	b.n	8005628 <_printf_i+0xa8>
 80055b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055b6:	2b15      	cmp	r3, #21
 80055b8:	d8f6      	bhi.n	80055a8 <_printf_i+0x28>
 80055ba:	a101      	add	r1, pc, #4	; (adr r1, 80055c0 <_printf_i+0x40>)
 80055bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055c0:	08005619 	.word	0x08005619
 80055c4:	0800562d 	.word	0x0800562d
 80055c8:	080055a9 	.word	0x080055a9
 80055cc:	080055a9 	.word	0x080055a9
 80055d0:	080055a9 	.word	0x080055a9
 80055d4:	080055a9 	.word	0x080055a9
 80055d8:	0800562d 	.word	0x0800562d
 80055dc:	080055a9 	.word	0x080055a9
 80055e0:	080055a9 	.word	0x080055a9
 80055e4:	080055a9 	.word	0x080055a9
 80055e8:	080055a9 	.word	0x080055a9
 80055ec:	08005739 	.word	0x08005739
 80055f0:	0800565d 	.word	0x0800565d
 80055f4:	0800571b 	.word	0x0800571b
 80055f8:	080055a9 	.word	0x080055a9
 80055fc:	080055a9 	.word	0x080055a9
 8005600:	0800575b 	.word	0x0800575b
 8005604:	080055a9 	.word	0x080055a9
 8005608:	0800565d 	.word	0x0800565d
 800560c:	080055a9 	.word	0x080055a9
 8005610:	080055a9 	.word	0x080055a9
 8005614:	08005723 	.word	0x08005723
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	1d1a      	adds	r2, r3, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	602a      	str	r2, [r5, #0]
 8005620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005628:	2301      	movs	r3, #1
 800562a:	e0a3      	b.n	8005774 <_printf_i+0x1f4>
 800562c:	6820      	ldr	r0, [r4, #0]
 800562e:	6829      	ldr	r1, [r5, #0]
 8005630:	0606      	lsls	r6, r0, #24
 8005632:	f101 0304 	add.w	r3, r1, #4
 8005636:	d50a      	bpl.n	800564e <_printf_i+0xce>
 8005638:	680e      	ldr	r6, [r1, #0]
 800563a:	602b      	str	r3, [r5, #0]
 800563c:	2e00      	cmp	r6, #0
 800563e:	da03      	bge.n	8005648 <_printf_i+0xc8>
 8005640:	232d      	movs	r3, #45	; 0x2d
 8005642:	4276      	negs	r6, r6
 8005644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005648:	485e      	ldr	r0, [pc, #376]	; (80057c4 <_printf_i+0x244>)
 800564a:	230a      	movs	r3, #10
 800564c:	e019      	b.n	8005682 <_printf_i+0x102>
 800564e:	680e      	ldr	r6, [r1, #0]
 8005650:	602b      	str	r3, [r5, #0]
 8005652:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005656:	bf18      	it	ne
 8005658:	b236      	sxthne	r6, r6
 800565a:	e7ef      	b.n	800563c <_printf_i+0xbc>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	1d19      	adds	r1, r3, #4
 8005662:	6029      	str	r1, [r5, #0]
 8005664:	0601      	lsls	r1, r0, #24
 8005666:	d501      	bpl.n	800566c <_printf_i+0xec>
 8005668:	681e      	ldr	r6, [r3, #0]
 800566a:	e002      	b.n	8005672 <_printf_i+0xf2>
 800566c:	0646      	lsls	r6, r0, #25
 800566e:	d5fb      	bpl.n	8005668 <_printf_i+0xe8>
 8005670:	881e      	ldrh	r6, [r3, #0]
 8005672:	4854      	ldr	r0, [pc, #336]	; (80057c4 <_printf_i+0x244>)
 8005674:	2f6f      	cmp	r7, #111	; 0x6f
 8005676:	bf0c      	ite	eq
 8005678:	2308      	moveq	r3, #8
 800567a:	230a      	movne	r3, #10
 800567c:	2100      	movs	r1, #0
 800567e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005682:	6865      	ldr	r5, [r4, #4]
 8005684:	60a5      	str	r5, [r4, #8]
 8005686:	2d00      	cmp	r5, #0
 8005688:	bfa2      	ittt	ge
 800568a:	6821      	ldrge	r1, [r4, #0]
 800568c:	f021 0104 	bicge.w	r1, r1, #4
 8005690:	6021      	strge	r1, [r4, #0]
 8005692:	b90e      	cbnz	r6, 8005698 <_printf_i+0x118>
 8005694:	2d00      	cmp	r5, #0
 8005696:	d04d      	beq.n	8005734 <_printf_i+0x1b4>
 8005698:	4615      	mov	r5, r2
 800569a:	fbb6 f1f3 	udiv	r1, r6, r3
 800569e:	fb03 6711 	mls	r7, r3, r1, r6
 80056a2:	5dc7      	ldrb	r7, [r0, r7]
 80056a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056a8:	4637      	mov	r7, r6
 80056aa:	42bb      	cmp	r3, r7
 80056ac:	460e      	mov	r6, r1
 80056ae:	d9f4      	bls.n	800569a <_printf_i+0x11a>
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d10b      	bne.n	80056cc <_printf_i+0x14c>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	07de      	lsls	r6, r3, #31
 80056b8:	d508      	bpl.n	80056cc <_printf_i+0x14c>
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	6861      	ldr	r1, [r4, #4]
 80056be:	4299      	cmp	r1, r3
 80056c0:	bfde      	ittt	le
 80056c2:	2330      	movle	r3, #48	; 0x30
 80056c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056cc:	1b52      	subs	r2, r2, r5
 80056ce:	6122      	str	r2, [r4, #16]
 80056d0:	f8cd a000 	str.w	sl, [sp]
 80056d4:	464b      	mov	r3, r9
 80056d6:	aa03      	add	r2, sp, #12
 80056d8:	4621      	mov	r1, r4
 80056da:	4640      	mov	r0, r8
 80056dc:	f7ff fee2 	bl	80054a4 <_printf_common>
 80056e0:	3001      	adds	r0, #1
 80056e2:	d14c      	bne.n	800577e <_printf_i+0x1fe>
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	b004      	add	sp, #16
 80056ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ee:	4835      	ldr	r0, [pc, #212]	; (80057c4 <_printf_i+0x244>)
 80056f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80056f4:	6829      	ldr	r1, [r5, #0]
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80056fc:	6029      	str	r1, [r5, #0]
 80056fe:	061d      	lsls	r5, r3, #24
 8005700:	d514      	bpl.n	800572c <_printf_i+0x1ac>
 8005702:	07df      	lsls	r7, r3, #31
 8005704:	bf44      	itt	mi
 8005706:	f043 0320 	orrmi.w	r3, r3, #32
 800570a:	6023      	strmi	r3, [r4, #0]
 800570c:	b91e      	cbnz	r6, 8005716 <_printf_i+0x196>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	f023 0320 	bic.w	r3, r3, #32
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	2310      	movs	r3, #16
 8005718:	e7b0      	b.n	800567c <_printf_i+0xfc>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	f043 0320 	orr.w	r3, r3, #32
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	2378      	movs	r3, #120	; 0x78
 8005724:	4828      	ldr	r0, [pc, #160]	; (80057c8 <_printf_i+0x248>)
 8005726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800572a:	e7e3      	b.n	80056f4 <_printf_i+0x174>
 800572c:	0659      	lsls	r1, r3, #25
 800572e:	bf48      	it	mi
 8005730:	b2b6      	uxthmi	r6, r6
 8005732:	e7e6      	b.n	8005702 <_printf_i+0x182>
 8005734:	4615      	mov	r5, r2
 8005736:	e7bb      	b.n	80056b0 <_printf_i+0x130>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	6826      	ldr	r6, [r4, #0]
 800573c:	6961      	ldr	r1, [r4, #20]
 800573e:	1d18      	adds	r0, r3, #4
 8005740:	6028      	str	r0, [r5, #0]
 8005742:	0635      	lsls	r5, r6, #24
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	d501      	bpl.n	800574c <_printf_i+0x1cc>
 8005748:	6019      	str	r1, [r3, #0]
 800574a:	e002      	b.n	8005752 <_printf_i+0x1d2>
 800574c:	0670      	lsls	r0, r6, #25
 800574e:	d5fb      	bpl.n	8005748 <_printf_i+0x1c8>
 8005750:	8019      	strh	r1, [r3, #0]
 8005752:	2300      	movs	r3, #0
 8005754:	6123      	str	r3, [r4, #16]
 8005756:	4615      	mov	r5, r2
 8005758:	e7ba      	b.n	80056d0 <_printf_i+0x150>
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	1d1a      	adds	r2, r3, #4
 800575e:	602a      	str	r2, [r5, #0]
 8005760:	681d      	ldr	r5, [r3, #0]
 8005762:	6862      	ldr	r2, [r4, #4]
 8005764:	2100      	movs	r1, #0
 8005766:	4628      	mov	r0, r5
 8005768:	f7fa fd3a 	bl	80001e0 <memchr>
 800576c:	b108      	cbz	r0, 8005772 <_printf_i+0x1f2>
 800576e:	1b40      	subs	r0, r0, r5
 8005770:	6060      	str	r0, [r4, #4]
 8005772:	6863      	ldr	r3, [r4, #4]
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	2300      	movs	r3, #0
 8005778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800577c:	e7a8      	b.n	80056d0 <_printf_i+0x150>
 800577e:	6923      	ldr	r3, [r4, #16]
 8005780:	462a      	mov	r2, r5
 8005782:	4649      	mov	r1, r9
 8005784:	4640      	mov	r0, r8
 8005786:	47d0      	blx	sl
 8005788:	3001      	adds	r0, #1
 800578a:	d0ab      	beq.n	80056e4 <_printf_i+0x164>
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	079b      	lsls	r3, r3, #30
 8005790:	d413      	bmi.n	80057ba <_printf_i+0x23a>
 8005792:	68e0      	ldr	r0, [r4, #12]
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	4298      	cmp	r0, r3
 8005798:	bfb8      	it	lt
 800579a:	4618      	movlt	r0, r3
 800579c:	e7a4      	b.n	80056e8 <_printf_i+0x168>
 800579e:	2301      	movs	r3, #1
 80057a0:	4632      	mov	r2, r6
 80057a2:	4649      	mov	r1, r9
 80057a4:	4640      	mov	r0, r8
 80057a6:	47d0      	blx	sl
 80057a8:	3001      	adds	r0, #1
 80057aa:	d09b      	beq.n	80056e4 <_printf_i+0x164>
 80057ac:	3501      	adds	r5, #1
 80057ae:	68e3      	ldr	r3, [r4, #12]
 80057b0:	9903      	ldr	r1, [sp, #12]
 80057b2:	1a5b      	subs	r3, r3, r1
 80057b4:	42ab      	cmp	r3, r5
 80057b6:	dcf2      	bgt.n	800579e <_printf_i+0x21e>
 80057b8:	e7eb      	b.n	8005792 <_printf_i+0x212>
 80057ba:	2500      	movs	r5, #0
 80057bc:	f104 0619 	add.w	r6, r4, #25
 80057c0:	e7f5      	b.n	80057ae <_printf_i+0x22e>
 80057c2:	bf00      	nop
 80057c4:	0800a48e 	.word	0x0800a48e
 80057c8:	0800a49f 	.word	0x0800a49f

080057cc <siprintf>:
 80057cc:	b40e      	push	{r1, r2, r3}
 80057ce:	b500      	push	{lr}
 80057d0:	b09c      	sub	sp, #112	; 0x70
 80057d2:	ab1d      	add	r3, sp, #116	; 0x74
 80057d4:	9002      	str	r0, [sp, #8]
 80057d6:	9006      	str	r0, [sp, #24]
 80057d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057dc:	4809      	ldr	r0, [pc, #36]	; (8005804 <siprintf+0x38>)
 80057de:	9107      	str	r1, [sp, #28]
 80057e0:	9104      	str	r1, [sp, #16]
 80057e2:	4909      	ldr	r1, [pc, #36]	; (8005808 <siprintf+0x3c>)
 80057e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e8:	9105      	str	r1, [sp, #20]
 80057ea:	6800      	ldr	r0, [r0, #0]
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	a902      	add	r1, sp, #8
 80057f0:	f001 fb6a 	bl	8006ec8 <_svfiprintf_r>
 80057f4:	9b02      	ldr	r3, [sp, #8]
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	b01c      	add	sp, #112	; 0x70
 80057fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005800:	b003      	add	sp, #12
 8005802:	4770      	bx	lr
 8005804:	2000001c 	.word	0x2000001c
 8005808:	ffff0208 	.word	0xffff0208

0800580c <quorem>:
 800580c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	6903      	ldr	r3, [r0, #16]
 8005812:	690c      	ldr	r4, [r1, #16]
 8005814:	42a3      	cmp	r3, r4
 8005816:	4607      	mov	r7, r0
 8005818:	f2c0 8081 	blt.w	800591e <quorem+0x112>
 800581c:	3c01      	subs	r4, #1
 800581e:	f101 0814 	add.w	r8, r1, #20
 8005822:	f100 0514 	add.w	r5, r0, #20
 8005826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005834:	3301      	adds	r3, #1
 8005836:	429a      	cmp	r2, r3
 8005838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800583c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005840:	fbb2 f6f3 	udiv	r6, r2, r3
 8005844:	d331      	bcc.n	80058aa <quorem+0x9e>
 8005846:	f04f 0e00 	mov.w	lr, #0
 800584a:	4640      	mov	r0, r8
 800584c:	46ac      	mov	ip, r5
 800584e:	46f2      	mov	sl, lr
 8005850:	f850 2b04 	ldr.w	r2, [r0], #4
 8005854:	b293      	uxth	r3, r2
 8005856:	fb06 e303 	mla	r3, r6, r3, lr
 800585a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800585e:	b29b      	uxth	r3, r3
 8005860:	ebaa 0303 	sub.w	r3, sl, r3
 8005864:	f8dc a000 	ldr.w	sl, [ip]
 8005868:	0c12      	lsrs	r2, r2, #16
 800586a:	fa13 f38a 	uxtah	r3, r3, sl
 800586e:	fb06 e202 	mla	r2, r6, r2, lr
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	9b00      	ldr	r3, [sp, #0]
 8005876:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800587a:	b292      	uxth	r2, r2
 800587c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005884:	f8bd 3000 	ldrh.w	r3, [sp]
 8005888:	4581      	cmp	r9, r0
 800588a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800588e:	f84c 3b04 	str.w	r3, [ip], #4
 8005892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005896:	d2db      	bcs.n	8005850 <quorem+0x44>
 8005898:	f855 300b 	ldr.w	r3, [r5, fp]
 800589c:	b92b      	cbnz	r3, 80058aa <quorem+0x9e>
 800589e:	9b01      	ldr	r3, [sp, #4]
 80058a0:	3b04      	subs	r3, #4
 80058a2:	429d      	cmp	r5, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	d32e      	bcc.n	8005906 <quorem+0xfa>
 80058a8:	613c      	str	r4, [r7, #16]
 80058aa:	4638      	mov	r0, r7
 80058ac:	f001 f8b8 	bl	8006a20 <__mcmp>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	db24      	blt.n	80058fe <quorem+0xf2>
 80058b4:	3601      	adds	r6, #1
 80058b6:	4628      	mov	r0, r5
 80058b8:	f04f 0c00 	mov.w	ip, #0
 80058bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80058c0:	f8d0 e000 	ldr.w	lr, [r0]
 80058c4:	b293      	uxth	r3, r2
 80058c6:	ebac 0303 	sub.w	r3, ip, r3
 80058ca:	0c12      	lsrs	r2, r2, #16
 80058cc:	fa13 f38e 	uxtah	r3, r3, lr
 80058d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058de:	45c1      	cmp	r9, r8
 80058e0:	f840 3b04 	str.w	r3, [r0], #4
 80058e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058e8:	d2e8      	bcs.n	80058bc <quorem+0xb0>
 80058ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058f2:	b922      	cbnz	r2, 80058fe <quorem+0xf2>
 80058f4:	3b04      	subs	r3, #4
 80058f6:	429d      	cmp	r5, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	d30a      	bcc.n	8005912 <quorem+0x106>
 80058fc:	613c      	str	r4, [r7, #16]
 80058fe:	4630      	mov	r0, r6
 8005900:	b003      	add	sp, #12
 8005902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	3b04      	subs	r3, #4
 800590a:	2a00      	cmp	r2, #0
 800590c:	d1cc      	bne.n	80058a8 <quorem+0x9c>
 800590e:	3c01      	subs	r4, #1
 8005910:	e7c7      	b.n	80058a2 <quorem+0x96>
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	3b04      	subs	r3, #4
 8005916:	2a00      	cmp	r2, #0
 8005918:	d1f0      	bne.n	80058fc <quorem+0xf0>
 800591a:	3c01      	subs	r4, #1
 800591c:	e7eb      	b.n	80058f6 <quorem+0xea>
 800591e:	2000      	movs	r0, #0
 8005920:	e7ee      	b.n	8005900 <quorem+0xf4>
 8005922:	0000      	movs	r0, r0
 8005924:	0000      	movs	r0, r0
	...

08005928 <_dtoa_r>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	ed2d 8b04 	vpush	{d8-d9}
 8005930:	ec57 6b10 	vmov	r6, r7, d0
 8005934:	b093      	sub	sp, #76	; 0x4c
 8005936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800593c:	9106      	str	r1, [sp, #24]
 800593e:	ee10 aa10 	vmov	sl, s0
 8005942:	4604      	mov	r4, r0
 8005944:	9209      	str	r2, [sp, #36]	; 0x24
 8005946:	930c      	str	r3, [sp, #48]	; 0x30
 8005948:	46bb      	mov	fp, r7
 800594a:	b975      	cbnz	r5, 800596a <_dtoa_r+0x42>
 800594c:	2010      	movs	r0, #16
 800594e:	f000 fddd 	bl	800650c <malloc>
 8005952:	4602      	mov	r2, r0
 8005954:	6260      	str	r0, [r4, #36]	; 0x24
 8005956:	b920      	cbnz	r0, 8005962 <_dtoa_r+0x3a>
 8005958:	4ba7      	ldr	r3, [pc, #668]	; (8005bf8 <_dtoa_r+0x2d0>)
 800595a:	21ea      	movs	r1, #234	; 0xea
 800595c:	48a7      	ldr	r0, [pc, #668]	; (8005bfc <_dtoa_r+0x2d4>)
 800595e:	f001 fbc3 	bl	80070e8 <__assert_func>
 8005962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005966:	6005      	str	r5, [r0, #0]
 8005968:	60c5      	str	r5, [r0, #12]
 800596a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800596c:	6819      	ldr	r1, [r3, #0]
 800596e:	b151      	cbz	r1, 8005986 <_dtoa_r+0x5e>
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	604a      	str	r2, [r1, #4]
 8005974:	2301      	movs	r3, #1
 8005976:	4093      	lsls	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
 800597a:	4620      	mov	r0, r4
 800597c:	f000 fe0e 	bl	800659c <_Bfree>
 8005980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	1e3b      	subs	r3, r7, #0
 8005988:	bfaa      	itet	ge
 800598a:	2300      	movge	r3, #0
 800598c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005990:	f8c8 3000 	strge.w	r3, [r8]
 8005994:	4b9a      	ldr	r3, [pc, #616]	; (8005c00 <_dtoa_r+0x2d8>)
 8005996:	bfbc      	itt	lt
 8005998:	2201      	movlt	r2, #1
 800599a:	f8c8 2000 	strlt.w	r2, [r8]
 800599e:	ea33 030b 	bics.w	r3, r3, fp
 80059a2:	d11b      	bne.n	80059dc <_dtoa_r+0xb4>
 80059a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059b0:	4333      	orrs	r3, r6
 80059b2:	f000 8592 	beq.w	80064da <_dtoa_r+0xbb2>
 80059b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059b8:	b963      	cbnz	r3, 80059d4 <_dtoa_r+0xac>
 80059ba:	4b92      	ldr	r3, [pc, #584]	; (8005c04 <_dtoa_r+0x2dc>)
 80059bc:	e022      	b.n	8005a04 <_dtoa_r+0xdc>
 80059be:	4b92      	ldr	r3, [pc, #584]	; (8005c08 <_dtoa_r+0x2e0>)
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	3308      	adds	r3, #8
 80059c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	9801      	ldr	r0, [sp, #4]
 80059ca:	b013      	add	sp, #76	; 0x4c
 80059cc:	ecbd 8b04 	vpop	{d8-d9}
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	4b8b      	ldr	r3, [pc, #556]	; (8005c04 <_dtoa_r+0x2dc>)
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	3303      	adds	r3, #3
 80059da:	e7f3      	b.n	80059c4 <_dtoa_r+0x9c>
 80059dc:	2200      	movs	r2, #0
 80059de:	2300      	movs	r3, #0
 80059e0:	4650      	mov	r0, sl
 80059e2:	4659      	mov	r1, fp
 80059e4:	f7fb f870 	bl	8000ac8 <__aeabi_dcmpeq>
 80059e8:	ec4b ab19 	vmov	d9, sl, fp
 80059ec:	4680      	mov	r8, r0
 80059ee:	b158      	cbz	r0, 8005a08 <_dtoa_r+0xe0>
 80059f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059f2:	2301      	movs	r3, #1
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 856b 	beq.w	80064d4 <_dtoa_r+0xbac>
 80059fe:	4883      	ldr	r0, [pc, #524]	; (8005c0c <_dtoa_r+0x2e4>)
 8005a00:	6018      	str	r0, [r3, #0]
 8005a02:	1e43      	subs	r3, r0, #1
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	e7df      	b.n	80059c8 <_dtoa_r+0xa0>
 8005a08:	ec4b ab10 	vmov	d0, sl, fp
 8005a0c:	aa10      	add	r2, sp, #64	; 0x40
 8005a0e:	a911      	add	r1, sp, #68	; 0x44
 8005a10:	4620      	mov	r0, r4
 8005a12:	f001 f8ab 	bl	8006b6c <__d2b>
 8005a16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005a1a:	ee08 0a10 	vmov	s16, r0
 8005a1e:	2d00      	cmp	r5, #0
 8005a20:	f000 8084 	beq.w	8005b2c <_dtoa_r+0x204>
 8005a24:	ee19 3a90 	vmov	r3, s19
 8005a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a30:	4656      	mov	r6, sl
 8005a32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005a3e:	4b74      	ldr	r3, [pc, #464]	; (8005c10 <_dtoa_r+0x2e8>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	4630      	mov	r0, r6
 8005a44:	4639      	mov	r1, r7
 8005a46:	f7fa fc1f 	bl	8000288 <__aeabi_dsub>
 8005a4a:	a365      	add	r3, pc, #404	; (adr r3, 8005be0 <_dtoa_r+0x2b8>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f7fa fdd2 	bl	80005f8 <__aeabi_dmul>
 8005a54:	a364      	add	r3, pc, #400	; (adr r3, 8005be8 <_dtoa_r+0x2c0>)
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	f7fa fc17 	bl	800028c <__adddf3>
 8005a5e:	4606      	mov	r6, r0
 8005a60:	4628      	mov	r0, r5
 8005a62:	460f      	mov	r7, r1
 8005a64:	f7fa fd5e 	bl	8000524 <__aeabi_i2d>
 8005a68:	a361      	add	r3, pc, #388	; (adr r3, 8005bf0 <_dtoa_r+0x2c8>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fa fdc3 	bl	80005f8 <__aeabi_dmul>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4630      	mov	r0, r6
 8005a78:	4639      	mov	r1, r7
 8005a7a:	f7fa fc07 	bl	800028c <__adddf3>
 8005a7e:	4606      	mov	r6, r0
 8005a80:	460f      	mov	r7, r1
 8005a82:	f7fb f869 	bl	8000b58 <__aeabi_d2iz>
 8005a86:	2200      	movs	r2, #0
 8005a88:	9000      	str	r0, [sp, #0]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	f7fb f824 	bl	8000adc <__aeabi_dcmplt>
 8005a94:	b150      	cbz	r0, 8005aac <_dtoa_r+0x184>
 8005a96:	9800      	ldr	r0, [sp, #0]
 8005a98:	f7fa fd44 	bl	8000524 <__aeabi_i2d>
 8005a9c:	4632      	mov	r2, r6
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	f7fb f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aa4:	b910      	cbnz	r0, 8005aac <_dtoa_r+0x184>
 8005aa6:	9b00      	ldr	r3, [sp, #0]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	9b00      	ldr	r3, [sp, #0]
 8005aae:	2b16      	cmp	r3, #22
 8005ab0:	d85a      	bhi.n	8005b68 <_dtoa_r+0x240>
 8005ab2:	9a00      	ldr	r2, [sp, #0]
 8005ab4:	4b57      	ldr	r3, [pc, #348]	; (8005c14 <_dtoa_r+0x2ec>)
 8005ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	ec51 0b19 	vmov	r0, r1, d9
 8005ac2:	f7fb f80b 	bl	8000adc <__aeabi_dcmplt>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d050      	beq.n	8005b6c <_dtoa_r+0x244>
 8005aca:	9b00      	ldr	r3, [sp, #0]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ad6:	1b5d      	subs	r5, r3, r5
 8005ad8:	1e6b      	subs	r3, r5, #1
 8005ada:	9305      	str	r3, [sp, #20]
 8005adc:	bf45      	ittet	mi
 8005ade:	f1c5 0301 	rsbmi	r3, r5, #1
 8005ae2:	9304      	strmi	r3, [sp, #16]
 8005ae4:	2300      	movpl	r3, #0
 8005ae6:	2300      	movmi	r3, #0
 8005ae8:	bf4c      	ite	mi
 8005aea:	9305      	strmi	r3, [sp, #20]
 8005aec:	9304      	strpl	r3, [sp, #16]
 8005aee:	9b00      	ldr	r3, [sp, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	db3d      	blt.n	8005b70 <_dtoa_r+0x248>
 8005af4:	9b05      	ldr	r3, [sp, #20]
 8005af6:	9a00      	ldr	r2, [sp, #0]
 8005af8:	920a      	str	r2, [sp, #40]	; 0x28
 8005afa:	4413      	add	r3, r2
 8005afc:	9305      	str	r3, [sp, #20]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9307      	str	r3, [sp, #28]
 8005b02:	9b06      	ldr	r3, [sp, #24]
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	f200 8089 	bhi.w	8005c1c <_dtoa_r+0x2f4>
 8005b0a:	2b05      	cmp	r3, #5
 8005b0c:	bfc4      	itt	gt
 8005b0e:	3b04      	subgt	r3, #4
 8005b10:	9306      	strgt	r3, [sp, #24]
 8005b12:	9b06      	ldr	r3, [sp, #24]
 8005b14:	f1a3 0302 	sub.w	r3, r3, #2
 8005b18:	bfcc      	ite	gt
 8005b1a:	2500      	movgt	r5, #0
 8005b1c:	2501      	movle	r5, #1
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	f200 8087 	bhi.w	8005c32 <_dtoa_r+0x30a>
 8005b24:	e8df f003 	tbb	[pc, r3]
 8005b28:	59383a2d 	.word	0x59383a2d
 8005b2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005b30:	441d      	add	r5, r3
 8005b32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	bfc1      	itttt	gt
 8005b3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b42:	fa0b f303 	lslgt.w	r3, fp, r3
 8005b46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b4a:	bfda      	itte	le
 8005b4c:	f1c3 0320 	rsble	r3, r3, #32
 8005b50:	fa06 f003 	lslle.w	r0, r6, r3
 8005b54:	4318      	orrgt	r0, r3
 8005b56:	f7fa fcd5 	bl	8000504 <__aeabi_ui2d>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b62:	3d01      	subs	r5, #1
 8005b64:	930e      	str	r3, [sp, #56]	; 0x38
 8005b66:	e76a      	b.n	8005a3e <_dtoa_r+0x116>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e7b2      	b.n	8005ad2 <_dtoa_r+0x1aa>
 8005b6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b6e:	e7b1      	b.n	8005ad4 <_dtoa_r+0x1ac>
 8005b70:	9b04      	ldr	r3, [sp, #16]
 8005b72:	9a00      	ldr	r2, [sp, #0]
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	9304      	str	r3, [sp, #16]
 8005b78:	4253      	negs	r3, r2
 8005b7a:	9307      	str	r3, [sp, #28]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b80:	e7bf      	b.n	8005b02 <_dtoa_r+0x1da>
 8005b82:	2300      	movs	r3, #0
 8005b84:	9308      	str	r3, [sp, #32]
 8005b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dc55      	bgt.n	8005c38 <_dtoa_r+0x310>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b92:	461a      	mov	r2, r3
 8005b94:	9209      	str	r2, [sp, #36]	; 0x24
 8005b96:	e00c      	b.n	8005bb2 <_dtoa_r+0x28a>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e7f3      	b.n	8005b84 <_dtoa_r+0x25c>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba0:	9308      	str	r3, [sp, #32]
 8005ba2:	9b00      	ldr	r3, [sp, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	9302      	str	r3, [sp, #8]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	9303      	str	r3, [sp, #12]
 8005bae:	bfb8      	it	lt
 8005bb0:	2301      	movlt	r3, #1
 8005bb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	6042      	str	r2, [r0, #4]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	f102 0614 	add.w	r6, r2, #20
 8005bbe:	429e      	cmp	r6, r3
 8005bc0:	6841      	ldr	r1, [r0, #4]
 8005bc2:	d93d      	bls.n	8005c40 <_dtoa_r+0x318>
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fca9 	bl	800651c <_Balloc>
 8005bca:	9001      	str	r0, [sp, #4]
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d13b      	bne.n	8005c48 <_dtoa_r+0x320>
 8005bd0:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <_dtoa_r+0x2f0>)
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005bd8:	e6c0      	b.n	800595c <_dtoa_r+0x34>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e7df      	b.n	8005b9e <_dtoa_r+0x276>
 8005bde:	bf00      	nop
 8005be0:	636f4361 	.word	0x636f4361
 8005be4:	3fd287a7 	.word	0x3fd287a7
 8005be8:	8b60c8b3 	.word	0x8b60c8b3
 8005bec:	3fc68a28 	.word	0x3fc68a28
 8005bf0:	509f79fb 	.word	0x509f79fb
 8005bf4:	3fd34413 	.word	0x3fd34413
 8005bf8:	0800a4bd 	.word	0x0800a4bd
 8005bfc:	0800a4d4 	.word	0x0800a4d4
 8005c00:	7ff00000 	.word	0x7ff00000
 8005c04:	0800a4b9 	.word	0x0800a4b9
 8005c08:	0800a4b0 	.word	0x0800a4b0
 8005c0c:	0800a48d 	.word	0x0800a48d
 8005c10:	3ff80000 	.word	0x3ff80000
 8005c14:	0800a5c8 	.word	0x0800a5c8
 8005c18:	0800a52f 	.word	0x0800a52f
 8005c1c:	2501      	movs	r5, #1
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9306      	str	r3, [sp, #24]
 8005c22:	9508      	str	r5, [sp, #32]
 8005c24:	f04f 33ff 	mov.w	r3, #4294967295
 8005c28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2312      	movs	r3, #18
 8005c30:	e7b0      	b.n	8005b94 <_dtoa_r+0x26c>
 8005c32:	2301      	movs	r3, #1
 8005c34:	9308      	str	r3, [sp, #32]
 8005c36:	e7f5      	b.n	8005c24 <_dtoa_r+0x2fc>
 8005c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c3e:	e7b8      	b.n	8005bb2 <_dtoa_r+0x28a>
 8005c40:	3101      	adds	r1, #1
 8005c42:	6041      	str	r1, [r0, #4]
 8005c44:	0052      	lsls	r2, r2, #1
 8005c46:	e7b8      	b.n	8005bba <_dtoa_r+0x292>
 8005c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c4a:	9a01      	ldr	r2, [sp, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	2b0e      	cmp	r3, #14
 8005c52:	f200 809d 	bhi.w	8005d90 <_dtoa_r+0x468>
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	f000 809a 	beq.w	8005d90 <_dtoa_r+0x468>
 8005c5c:	9b00      	ldr	r3, [sp, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	dd32      	ble.n	8005cc8 <_dtoa_r+0x3a0>
 8005c62:	4ab7      	ldr	r2, [pc, #732]	; (8005f40 <_dtoa_r+0x618>)
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c70:	9b00      	ldr	r3, [sp, #0]
 8005c72:	05d8      	lsls	r0, r3, #23
 8005c74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005c78:	d516      	bpl.n	8005ca8 <_dtoa_r+0x380>
 8005c7a:	4bb2      	ldr	r3, [pc, #712]	; (8005f44 <_dtoa_r+0x61c>)
 8005c7c:	ec51 0b19 	vmov	r0, r1, d9
 8005c80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c84:	f7fa fde2 	bl	800084c <__aeabi_ddiv>
 8005c88:	f007 070f 	and.w	r7, r7, #15
 8005c8c:	4682      	mov	sl, r0
 8005c8e:	468b      	mov	fp, r1
 8005c90:	2503      	movs	r5, #3
 8005c92:	4eac      	ldr	r6, [pc, #688]	; (8005f44 <_dtoa_r+0x61c>)
 8005c94:	b957      	cbnz	r7, 8005cac <_dtoa_r+0x384>
 8005c96:	4642      	mov	r2, r8
 8005c98:	464b      	mov	r3, r9
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	f7fa fdd5 	bl	800084c <__aeabi_ddiv>
 8005ca2:	4682      	mov	sl, r0
 8005ca4:	468b      	mov	fp, r1
 8005ca6:	e028      	b.n	8005cfa <_dtoa_r+0x3d2>
 8005ca8:	2502      	movs	r5, #2
 8005caa:	e7f2      	b.n	8005c92 <_dtoa_r+0x36a>
 8005cac:	07f9      	lsls	r1, r7, #31
 8005cae:	d508      	bpl.n	8005cc2 <_dtoa_r+0x39a>
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cb8:	f7fa fc9e 	bl	80005f8 <__aeabi_dmul>
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	4689      	mov	r9, r1
 8005cc2:	107f      	asrs	r7, r7, #1
 8005cc4:	3608      	adds	r6, #8
 8005cc6:	e7e5      	b.n	8005c94 <_dtoa_r+0x36c>
 8005cc8:	f000 809b 	beq.w	8005e02 <_dtoa_r+0x4da>
 8005ccc:	9b00      	ldr	r3, [sp, #0]
 8005cce:	4f9d      	ldr	r7, [pc, #628]	; (8005f44 <_dtoa_r+0x61c>)
 8005cd0:	425e      	negs	r6, r3
 8005cd2:	4b9b      	ldr	r3, [pc, #620]	; (8005f40 <_dtoa_r+0x618>)
 8005cd4:	f006 020f 	and.w	r2, r6, #15
 8005cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	ec51 0b19 	vmov	r0, r1, d9
 8005ce4:	f7fa fc88 	bl	80005f8 <__aeabi_dmul>
 8005ce8:	1136      	asrs	r6, r6, #4
 8005cea:	4682      	mov	sl, r0
 8005cec:	468b      	mov	fp, r1
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2502      	movs	r5, #2
 8005cf2:	2e00      	cmp	r6, #0
 8005cf4:	d17a      	bne.n	8005dec <_dtoa_r+0x4c4>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1d3      	bne.n	8005ca2 <_dtoa_r+0x37a>
 8005cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8082 	beq.w	8005e06 <_dtoa_r+0x4de>
 8005d02:	4b91      	ldr	r3, [pc, #580]	; (8005f48 <_dtoa_r+0x620>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	4650      	mov	r0, sl
 8005d08:	4659      	mov	r1, fp
 8005d0a:	f7fa fee7 	bl	8000adc <__aeabi_dcmplt>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d079      	beq.n	8005e06 <_dtoa_r+0x4de>
 8005d12:	9b03      	ldr	r3, [sp, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d076      	beq.n	8005e06 <_dtoa_r+0x4de>
 8005d18:	9b02      	ldr	r3, [sp, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	dd36      	ble.n	8005d8c <_dtoa_r+0x464>
 8005d1e:	9b00      	ldr	r3, [sp, #0]
 8005d20:	4650      	mov	r0, sl
 8005d22:	4659      	mov	r1, fp
 8005d24:	1e5f      	subs	r7, r3, #1
 8005d26:	2200      	movs	r2, #0
 8005d28:	4b88      	ldr	r3, [pc, #544]	; (8005f4c <_dtoa_r+0x624>)
 8005d2a:	f7fa fc65 	bl	80005f8 <__aeabi_dmul>
 8005d2e:	9e02      	ldr	r6, [sp, #8]
 8005d30:	4682      	mov	sl, r0
 8005d32:	468b      	mov	fp, r1
 8005d34:	3501      	adds	r5, #1
 8005d36:	4628      	mov	r0, r5
 8005d38:	f7fa fbf4 	bl	8000524 <__aeabi_i2d>
 8005d3c:	4652      	mov	r2, sl
 8005d3e:	465b      	mov	r3, fp
 8005d40:	f7fa fc5a 	bl	80005f8 <__aeabi_dmul>
 8005d44:	4b82      	ldr	r3, [pc, #520]	; (8005f50 <_dtoa_r+0x628>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	f7fa faa0 	bl	800028c <__adddf3>
 8005d4c:	46d0      	mov	r8, sl
 8005d4e:	46d9      	mov	r9, fp
 8005d50:	4682      	mov	sl, r0
 8005d52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005d56:	2e00      	cmp	r6, #0
 8005d58:	d158      	bne.n	8005e0c <_dtoa_r+0x4e4>
 8005d5a:	4b7e      	ldr	r3, [pc, #504]	; (8005f54 <_dtoa_r+0x62c>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	4640      	mov	r0, r8
 8005d60:	4649      	mov	r1, r9
 8005d62:	f7fa fa91 	bl	8000288 <__aeabi_dsub>
 8005d66:	4652      	mov	r2, sl
 8005d68:	465b      	mov	r3, fp
 8005d6a:	4680      	mov	r8, r0
 8005d6c:	4689      	mov	r9, r1
 8005d6e:	f7fa fed3 	bl	8000b18 <__aeabi_dcmpgt>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	f040 8295 	bne.w	80062a2 <_dtoa_r+0x97a>
 8005d78:	4652      	mov	r2, sl
 8005d7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d7e:	4640      	mov	r0, r8
 8005d80:	4649      	mov	r1, r9
 8005d82:	f7fa feab 	bl	8000adc <__aeabi_dcmplt>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f040 8289 	bne.w	800629e <_dtoa_r+0x976>
 8005d8c:	ec5b ab19 	vmov	sl, fp, d9
 8005d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f2c0 8148 	blt.w	8006028 <_dtoa_r+0x700>
 8005d98:	9a00      	ldr	r2, [sp, #0]
 8005d9a:	2a0e      	cmp	r2, #14
 8005d9c:	f300 8144 	bgt.w	8006028 <_dtoa_r+0x700>
 8005da0:	4b67      	ldr	r3, [pc, #412]	; (8005f40 <_dtoa_r+0x618>)
 8005da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005da6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f280 80d5 	bge.w	8005f5c <_dtoa_r+0x634>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f300 80d1 	bgt.w	8005f5c <_dtoa_r+0x634>
 8005dba:	f040 826f 	bne.w	800629c <_dtoa_r+0x974>
 8005dbe:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <_dtoa_r+0x62c>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	f7fa fc17 	bl	80005f8 <__aeabi_dmul>
 8005dca:	4652      	mov	r2, sl
 8005dcc:	465b      	mov	r3, fp
 8005dce:	f7fa fe99 	bl	8000b04 <__aeabi_dcmpge>
 8005dd2:	9e03      	ldr	r6, [sp, #12]
 8005dd4:	4637      	mov	r7, r6
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f040 8245 	bne.w	8006266 <_dtoa_r+0x93e>
 8005ddc:	9d01      	ldr	r5, [sp, #4]
 8005dde:	2331      	movs	r3, #49	; 0x31
 8005de0:	f805 3b01 	strb.w	r3, [r5], #1
 8005de4:	9b00      	ldr	r3, [sp, #0]
 8005de6:	3301      	adds	r3, #1
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	e240      	b.n	800626e <_dtoa_r+0x946>
 8005dec:	07f2      	lsls	r2, r6, #31
 8005dee:	d505      	bpl.n	8005dfc <_dtoa_r+0x4d4>
 8005df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df4:	f7fa fc00 	bl	80005f8 <__aeabi_dmul>
 8005df8:	3501      	adds	r5, #1
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	1076      	asrs	r6, r6, #1
 8005dfe:	3708      	adds	r7, #8
 8005e00:	e777      	b.n	8005cf2 <_dtoa_r+0x3ca>
 8005e02:	2502      	movs	r5, #2
 8005e04:	e779      	b.n	8005cfa <_dtoa_r+0x3d2>
 8005e06:	9f00      	ldr	r7, [sp, #0]
 8005e08:	9e03      	ldr	r6, [sp, #12]
 8005e0a:	e794      	b.n	8005d36 <_dtoa_r+0x40e>
 8005e0c:	9901      	ldr	r1, [sp, #4]
 8005e0e:	4b4c      	ldr	r3, [pc, #304]	; (8005f40 <_dtoa_r+0x618>)
 8005e10:	4431      	add	r1, r6
 8005e12:	910d      	str	r1, [sp, #52]	; 0x34
 8005e14:	9908      	ldr	r1, [sp, #32]
 8005e16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	d043      	beq.n	8005eaa <_dtoa_r+0x582>
 8005e22:	494d      	ldr	r1, [pc, #308]	; (8005f58 <_dtoa_r+0x630>)
 8005e24:	2000      	movs	r0, #0
 8005e26:	f7fa fd11 	bl	800084c <__aeabi_ddiv>
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	465b      	mov	r3, fp
 8005e2e:	f7fa fa2b 	bl	8000288 <__aeabi_dsub>
 8005e32:	9d01      	ldr	r5, [sp, #4]
 8005e34:	4682      	mov	sl, r0
 8005e36:	468b      	mov	fp, r1
 8005e38:	4649      	mov	r1, r9
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	f7fa fe8c 	bl	8000b58 <__aeabi_d2iz>
 8005e40:	4606      	mov	r6, r0
 8005e42:	f7fa fb6f 	bl	8000524 <__aeabi_i2d>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	f7fa fa1b 	bl	8000288 <__aeabi_dsub>
 8005e52:	3630      	adds	r6, #48	; 0x30
 8005e54:	f805 6b01 	strb.w	r6, [r5], #1
 8005e58:	4652      	mov	r2, sl
 8005e5a:	465b      	mov	r3, fp
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	4689      	mov	r9, r1
 8005e60:	f7fa fe3c 	bl	8000adc <__aeabi_dcmplt>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d163      	bne.n	8005f30 <_dtoa_r+0x608>
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	4936      	ldr	r1, [pc, #216]	; (8005f48 <_dtoa_r+0x620>)
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f7fa fa0a 	bl	8000288 <__aeabi_dsub>
 8005e74:	4652      	mov	r2, sl
 8005e76:	465b      	mov	r3, fp
 8005e78:	f7fa fe30 	bl	8000adc <__aeabi_dcmplt>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	f040 80b5 	bne.w	8005fec <_dtoa_r+0x6c4>
 8005e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e84:	429d      	cmp	r5, r3
 8005e86:	d081      	beq.n	8005d8c <_dtoa_r+0x464>
 8005e88:	4b30      	ldr	r3, [pc, #192]	; (8005f4c <_dtoa_r+0x624>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	4650      	mov	r0, sl
 8005e8e:	4659      	mov	r1, fp
 8005e90:	f7fa fbb2 	bl	80005f8 <__aeabi_dmul>
 8005e94:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <_dtoa_r+0x624>)
 8005e96:	4682      	mov	sl, r0
 8005e98:	468b      	mov	fp, r1
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f7fa fbaa 	bl	80005f8 <__aeabi_dmul>
 8005ea4:	4680      	mov	r8, r0
 8005ea6:	4689      	mov	r9, r1
 8005ea8:	e7c6      	b.n	8005e38 <_dtoa_r+0x510>
 8005eaa:	4650      	mov	r0, sl
 8005eac:	4659      	mov	r1, fp
 8005eae:	f7fa fba3 	bl	80005f8 <__aeabi_dmul>
 8005eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb4:	9d01      	ldr	r5, [sp, #4]
 8005eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005eb8:	4682      	mov	sl, r0
 8005eba:	468b      	mov	fp, r1
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7fa fe4a 	bl	8000b58 <__aeabi_d2iz>
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	f7fa fb2d 	bl	8000524 <__aeabi_i2d>
 8005eca:	3630      	adds	r6, #48	; 0x30
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	f7fa f9d8 	bl	8000288 <__aeabi_dsub>
 8005ed8:	f805 6b01 	strb.w	r6, [r5], #1
 8005edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ede:	429d      	cmp	r5, r3
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	4689      	mov	r9, r1
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	d124      	bne.n	8005f34 <_dtoa_r+0x60c>
 8005eea:	4b1b      	ldr	r3, [pc, #108]	; (8005f58 <_dtoa_r+0x630>)
 8005eec:	4650      	mov	r0, sl
 8005eee:	4659      	mov	r1, fp
 8005ef0:	f7fa f9cc 	bl	800028c <__adddf3>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4640      	mov	r0, r8
 8005efa:	4649      	mov	r1, r9
 8005efc:	f7fa fe0c 	bl	8000b18 <__aeabi_dcmpgt>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d173      	bne.n	8005fec <_dtoa_r+0x6c4>
 8005f04:	4652      	mov	r2, sl
 8005f06:	465b      	mov	r3, fp
 8005f08:	4913      	ldr	r1, [pc, #76]	; (8005f58 <_dtoa_r+0x630>)
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	f7fa f9bc 	bl	8000288 <__aeabi_dsub>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4640      	mov	r0, r8
 8005f16:	4649      	mov	r1, r9
 8005f18:	f7fa fde0 	bl	8000adc <__aeabi_dcmplt>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	f43f af35 	beq.w	8005d8c <_dtoa_r+0x464>
 8005f22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f24:	1e6b      	subs	r3, r5, #1
 8005f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f2c:	2b30      	cmp	r3, #48	; 0x30
 8005f2e:	d0f8      	beq.n	8005f22 <_dtoa_r+0x5fa>
 8005f30:	9700      	str	r7, [sp, #0]
 8005f32:	e049      	b.n	8005fc8 <_dtoa_r+0x6a0>
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <_dtoa_r+0x624>)
 8005f36:	f7fa fb5f 	bl	80005f8 <__aeabi_dmul>
 8005f3a:	4680      	mov	r8, r0
 8005f3c:	4689      	mov	r9, r1
 8005f3e:	e7bd      	b.n	8005ebc <_dtoa_r+0x594>
 8005f40:	0800a5c8 	.word	0x0800a5c8
 8005f44:	0800a5a0 	.word	0x0800a5a0
 8005f48:	3ff00000 	.word	0x3ff00000
 8005f4c:	40240000 	.word	0x40240000
 8005f50:	401c0000 	.word	0x401c0000
 8005f54:	40140000 	.word	0x40140000
 8005f58:	3fe00000 	.word	0x3fe00000
 8005f5c:	9d01      	ldr	r5, [sp, #4]
 8005f5e:	4656      	mov	r6, sl
 8005f60:	465f      	mov	r7, fp
 8005f62:	4642      	mov	r2, r8
 8005f64:	464b      	mov	r3, r9
 8005f66:	4630      	mov	r0, r6
 8005f68:	4639      	mov	r1, r7
 8005f6a:	f7fa fc6f 	bl	800084c <__aeabi_ddiv>
 8005f6e:	f7fa fdf3 	bl	8000b58 <__aeabi_d2iz>
 8005f72:	4682      	mov	sl, r0
 8005f74:	f7fa fad6 	bl	8000524 <__aeabi_i2d>
 8005f78:	4642      	mov	r2, r8
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	f7fa fb3c 	bl	80005f8 <__aeabi_dmul>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4630      	mov	r0, r6
 8005f86:	4639      	mov	r1, r7
 8005f88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005f8c:	f7fa f97c 	bl	8000288 <__aeabi_dsub>
 8005f90:	f805 6b01 	strb.w	r6, [r5], #1
 8005f94:	9e01      	ldr	r6, [sp, #4]
 8005f96:	9f03      	ldr	r7, [sp, #12]
 8005f98:	1bae      	subs	r6, r5, r6
 8005f9a:	42b7      	cmp	r7, r6
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	d135      	bne.n	800600e <_dtoa_r+0x6e6>
 8005fa2:	f7fa f973 	bl	800028c <__adddf3>
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	464b      	mov	r3, r9
 8005faa:	4606      	mov	r6, r0
 8005fac:	460f      	mov	r7, r1
 8005fae:	f7fa fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 8005fb2:	b9d0      	cbnz	r0, 8005fea <_dtoa_r+0x6c2>
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	4630      	mov	r0, r6
 8005fba:	4639      	mov	r1, r7
 8005fbc:	f7fa fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fc0:	b110      	cbz	r0, 8005fc8 <_dtoa_r+0x6a0>
 8005fc2:	f01a 0f01 	tst.w	sl, #1
 8005fc6:	d110      	bne.n	8005fea <_dtoa_r+0x6c2>
 8005fc8:	4620      	mov	r0, r4
 8005fca:	ee18 1a10 	vmov	r1, s16
 8005fce:	f000 fae5 	bl	800659c <_Bfree>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	9800      	ldr	r0, [sp, #0]
 8005fd6:	702b      	strb	r3, [r5, #0]
 8005fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fda:	3001      	adds	r0, #1
 8005fdc:	6018      	str	r0, [r3, #0]
 8005fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f43f acf1 	beq.w	80059c8 <_dtoa_r+0xa0>
 8005fe6:	601d      	str	r5, [r3, #0]
 8005fe8:	e4ee      	b.n	80059c8 <_dtoa_r+0xa0>
 8005fea:	9f00      	ldr	r7, [sp, #0]
 8005fec:	462b      	mov	r3, r5
 8005fee:	461d      	mov	r5, r3
 8005ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ff4:	2a39      	cmp	r2, #57	; 0x39
 8005ff6:	d106      	bne.n	8006006 <_dtoa_r+0x6de>
 8005ff8:	9a01      	ldr	r2, [sp, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d1f7      	bne.n	8005fee <_dtoa_r+0x6c6>
 8005ffe:	9901      	ldr	r1, [sp, #4]
 8006000:	2230      	movs	r2, #48	; 0x30
 8006002:	3701      	adds	r7, #1
 8006004:	700a      	strb	r2, [r1, #0]
 8006006:	781a      	ldrb	r2, [r3, #0]
 8006008:	3201      	adds	r2, #1
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e790      	b.n	8005f30 <_dtoa_r+0x608>
 800600e:	4ba6      	ldr	r3, [pc, #664]	; (80062a8 <_dtoa_r+0x980>)
 8006010:	2200      	movs	r2, #0
 8006012:	f7fa faf1 	bl	80005f8 <__aeabi_dmul>
 8006016:	2200      	movs	r2, #0
 8006018:	2300      	movs	r3, #0
 800601a:	4606      	mov	r6, r0
 800601c:	460f      	mov	r7, r1
 800601e:	f7fa fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 8006022:	2800      	cmp	r0, #0
 8006024:	d09d      	beq.n	8005f62 <_dtoa_r+0x63a>
 8006026:	e7cf      	b.n	8005fc8 <_dtoa_r+0x6a0>
 8006028:	9a08      	ldr	r2, [sp, #32]
 800602a:	2a00      	cmp	r2, #0
 800602c:	f000 80d7 	beq.w	80061de <_dtoa_r+0x8b6>
 8006030:	9a06      	ldr	r2, [sp, #24]
 8006032:	2a01      	cmp	r2, #1
 8006034:	f300 80ba 	bgt.w	80061ac <_dtoa_r+0x884>
 8006038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800603a:	2a00      	cmp	r2, #0
 800603c:	f000 80b2 	beq.w	80061a4 <_dtoa_r+0x87c>
 8006040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006044:	9e07      	ldr	r6, [sp, #28]
 8006046:	9d04      	ldr	r5, [sp, #16]
 8006048:	9a04      	ldr	r2, [sp, #16]
 800604a:	441a      	add	r2, r3
 800604c:	9204      	str	r2, [sp, #16]
 800604e:	9a05      	ldr	r2, [sp, #20]
 8006050:	2101      	movs	r1, #1
 8006052:	441a      	add	r2, r3
 8006054:	4620      	mov	r0, r4
 8006056:	9205      	str	r2, [sp, #20]
 8006058:	f000 fb58 	bl	800670c <__i2b>
 800605c:	4607      	mov	r7, r0
 800605e:	2d00      	cmp	r5, #0
 8006060:	dd0c      	ble.n	800607c <_dtoa_r+0x754>
 8006062:	9b05      	ldr	r3, [sp, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	dd09      	ble.n	800607c <_dtoa_r+0x754>
 8006068:	42ab      	cmp	r3, r5
 800606a:	9a04      	ldr	r2, [sp, #16]
 800606c:	bfa8      	it	ge
 800606e:	462b      	movge	r3, r5
 8006070:	1ad2      	subs	r2, r2, r3
 8006072:	9204      	str	r2, [sp, #16]
 8006074:	9a05      	ldr	r2, [sp, #20]
 8006076:	1aed      	subs	r5, r5, r3
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	9305      	str	r3, [sp, #20]
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	b31b      	cbz	r3, 80060c8 <_dtoa_r+0x7a0>
 8006080:	9b08      	ldr	r3, [sp, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 80af 	beq.w	80061e6 <_dtoa_r+0x8be>
 8006088:	2e00      	cmp	r6, #0
 800608a:	dd13      	ble.n	80060b4 <_dtoa_r+0x78c>
 800608c:	4639      	mov	r1, r7
 800608e:	4632      	mov	r2, r6
 8006090:	4620      	mov	r0, r4
 8006092:	f000 fbfb 	bl	800688c <__pow5mult>
 8006096:	ee18 2a10 	vmov	r2, s16
 800609a:	4601      	mov	r1, r0
 800609c:	4607      	mov	r7, r0
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 fb4a 	bl	8006738 <__multiply>
 80060a4:	ee18 1a10 	vmov	r1, s16
 80060a8:	4680      	mov	r8, r0
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 fa76 	bl	800659c <_Bfree>
 80060b0:	ee08 8a10 	vmov	s16, r8
 80060b4:	9b07      	ldr	r3, [sp, #28]
 80060b6:	1b9a      	subs	r2, r3, r6
 80060b8:	d006      	beq.n	80060c8 <_dtoa_r+0x7a0>
 80060ba:	ee18 1a10 	vmov	r1, s16
 80060be:	4620      	mov	r0, r4
 80060c0:	f000 fbe4 	bl	800688c <__pow5mult>
 80060c4:	ee08 0a10 	vmov	s16, r0
 80060c8:	2101      	movs	r1, #1
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 fb1e 	bl	800670c <__i2b>
 80060d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	4606      	mov	r6, r0
 80060d6:	f340 8088 	ble.w	80061ea <_dtoa_r+0x8c2>
 80060da:	461a      	mov	r2, r3
 80060dc:	4601      	mov	r1, r0
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 fbd4 	bl	800688c <__pow5mult>
 80060e4:	9b06      	ldr	r3, [sp, #24]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	4606      	mov	r6, r0
 80060ea:	f340 8081 	ble.w	80061f0 <_dtoa_r+0x8c8>
 80060ee:	f04f 0800 	mov.w	r8, #0
 80060f2:	6933      	ldr	r3, [r6, #16]
 80060f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80060f8:	6918      	ldr	r0, [r3, #16]
 80060fa:	f000 fab7 	bl	800666c <__hi0bits>
 80060fe:	f1c0 0020 	rsb	r0, r0, #32
 8006102:	9b05      	ldr	r3, [sp, #20]
 8006104:	4418      	add	r0, r3
 8006106:	f010 001f 	ands.w	r0, r0, #31
 800610a:	f000 8092 	beq.w	8006232 <_dtoa_r+0x90a>
 800610e:	f1c0 0320 	rsb	r3, r0, #32
 8006112:	2b04      	cmp	r3, #4
 8006114:	f340 808a 	ble.w	800622c <_dtoa_r+0x904>
 8006118:	f1c0 001c 	rsb	r0, r0, #28
 800611c:	9b04      	ldr	r3, [sp, #16]
 800611e:	4403      	add	r3, r0
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	9b05      	ldr	r3, [sp, #20]
 8006124:	4403      	add	r3, r0
 8006126:	4405      	add	r5, r0
 8006128:	9305      	str	r3, [sp, #20]
 800612a:	9b04      	ldr	r3, [sp, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	dd07      	ble.n	8006140 <_dtoa_r+0x818>
 8006130:	ee18 1a10 	vmov	r1, s16
 8006134:	461a      	mov	r2, r3
 8006136:	4620      	mov	r0, r4
 8006138:	f000 fc02 	bl	8006940 <__lshift>
 800613c:	ee08 0a10 	vmov	s16, r0
 8006140:	9b05      	ldr	r3, [sp, #20]
 8006142:	2b00      	cmp	r3, #0
 8006144:	dd05      	ble.n	8006152 <_dtoa_r+0x82a>
 8006146:	4631      	mov	r1, r6
 8006148:	461a      	mov	r2, r3
 800614a:	4620      	mov	r0, r4
 800614c:	f000 fbf8 	bl	8006940 <__lshift>
 8006150:	4606      	mov	r6, r0
 8006152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d06e      	beq.n	8006236 <_dtoa_r+0x90e>
 8006158:	ee18 0a10 	vmov	r0, s16
 800615c:	4631      	mov	r1, r6
 800615e:	f000 fc5f 	bl	8006a20 <__mcmp>
 8006162:	2800      	cmp	r0, #0
 8006164:	da67      	bge.n	8006236 <_dtoa_r+0x90e>
 8006166:	9b00      	ldr	r3, [sp, #0]
 8006168:	3b01      	subs	r3, #1
 800616a:	ee18 1a10 	vmov	r1, s16
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	220a      	movs	r2, #10
 8006172:	2300      	movs	r3, #0
 8006174:	4620      	mov	r0, r4
 8006176:	f000 fa33 	bl	80065e0 <__multadd>
 800617a:	9b08      	ldr	r3, [sp, #32]
 800617c:	ee08 0a10 	vmov	s16, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 81b1 	beq.w	80064e8 <_dtoa_r+0xbc0>
 8006186:	2300      	movs	r3, #0
 8006188:	4639      	mov	r1, r7
 800618a:	220a      	movs	r2, #10
 800618c:	4620      	mov	r0, r4
 800618e:	f000 fa27 	bl	80065e0 <__multadd>
 8006192:	9b02      	ldr	r3, [sp, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	4607      	mov	r7, r0
 8006198:	f300 808e 	bgt.w	80062b8 <_dtoa_r+0x990>
 800619c:	9b06      	ldr	r3, [sp, #24]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	dc51      	bgt.n	8006246 <_dtoa_r+0x91e>
 80061a2:	e089      	b.n	80062b8 <_dtoa_r+0x990>
 80061a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061aa:	e74b      	b.n	8006044 <_dtoa_r+0x71c>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	1e5e      	subs	r6, r3, #1
 80061b0:	9b07      	ldr	r3, [sp, #28]
 80061b2:	42b3      	cmp	r3, r6
 80061b4:	bfbf      	itttt	lt
 80061b6:	9b07      	ldrlt	r3, [sp, #28]
 80061b8:	9607      	strlt	r6, [sp, #28]
 80061ba:	1af2      	sublt	r2, r6, r3
 80061bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061be:	bfb6      	itet	lt
 80061c0:	189b      	addlt	r3, r3, r2
 80061c2:	1b9e      	subge	r6, r3, r6
 80061c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	bfb8      	it	lt
 80061ca:	2600      	movlt	r6, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bfb7      	itett	lt
 80061d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80061d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80061d8:	1a9d      	sublt	r5, r3, r2
 80061da:	2300      	movlt	r3, #0
 80061dc:	e734      	b.n	8006048 <_dtoa_r+0x720>
 80061de:	9e07      	ldr	r6, [sp, #28]
 80061e0:	9d04      	ldr	r5, [sp, #16]
 80061e2:	9f08      	ldr	r7, [sp, #32]
 80061e4:	e73b      	b.n	800605e <_dtoa_r+0x736>
 80061e6:	9a07      	ldr	r2, [sp, #28]
 80061e8:	e767      	b.n	80060ba <_dtoa_r+0x792>
 80061ea:	9b06      	ldr	r3, [sp, #24]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	dc18      	bgt.n	8006222 <_dtoa_r+0x8fa>
 80061f0:	f1ba 0f00 	cmp.w	sl, #0
 80061f4:	d115      	bne.n	8006222 <_dtoa_r+0x8fa>
 80061f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061fa:	b993      	cbnz	r3, 8006222 <_dtoa_r+0x8fa>
 80061fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006200:	0d1b      	lsrs	r3, r3, #20
 8006202:	051b      	lsls	r3, r3, #20
 8006204:	b183      	cbz	r3, 8006228 <_dtoa_r+0x900>
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	3301      	adds	r3, #1
 800620a:	9304      	str	r3, [sp, #16]
 800620c:	9b05      	ldr	r3, [sp, #20]
 800620e:	3301      	adds	r3, #1
 8006210:	9305      	str	r3, [sp, #20]
 8006212:	f04f 0801 	mov.w	r8, #1
 8006216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006218:	2b00      	cmp	r3, #0
 800621a:	f47f af6a 	bne.w	80060f2 <_dtoa_r+0x7ca>
 800621e:	2001      	movs	r0, #1
 8006220:	e76f      	b.n	8006102 <_dtoa_r+0x7da>
 8006222:	f04f 0800 	mov.w	r8, #0
 8006226:	e7f6      	b.n	8006216 <_dtoa_r+0x8ee>
 8006228:	4698      	mov	r8, r3
 800622a:	e7f4      	b.n	8006216 <_dtoa_r+0x8ee>
 800622c:	f43f af7d 	beq.w	800612a <_dtoa_r+0x802>
 8006230:	4618      	mov	r0, r3
 8006232:	301c      	adds	r0, #28
 8006234:	e772      	b.n	800611c <_dtoa_r+0x7f4>
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	dc37      	bgt.n	80062ac <_dtoa_r+0x984>
 800623c:	9b06      	ldr	r3, [sp, #24]
 800623e:	2b02      	cmp	r3, #2
 8006240:	dd34      	ble.n	80062ac <_dtoa_r+0x984>
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	9302      	str	r3, [sp, #8]
 8006246:	9b02      	ldr	r3, [sp, #8]
 8006248:	b96b      	cbnz	r3, 8006266 <_dtoa_r+0x93e>
 800624a:	4631      	mov	r1, r6
 800624c:	2205      	movs	r2, #5
 800624e:	4620      	mov	r0, r4
 8006250:	f000 f9c6 	bl	80065e0 <__multadd>
 8006254:	4601      	mov	r1, r0
 8006256:	4606      	mov	r6, r0
 8006258:	ee18 0a10 	vmov	r0, s16
 800625c:	f000 fbe0 	bl	8006a20 <__mcmp>
 8006260:	2800      	cmp	r0, #0
 8006262:	f73f adbb 	bgt.w	8005ddc <_dtoa_r+0x4b4>
 8006266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006268:	9d01      	ldr	r5, [sp, #4]
 800626a:	43db      	mvns	r3, r3
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	f04f 0800 	mov.w	r8, #0
 8006272:	4631      	mov	r1, r6
 8006274:	4620      	mov	r0, r4
 8006276:	f000 f991 	bl	800659c <_Bfree>
 800627a:	2f00      	cmp	r7, #0
 800627c:	f43f aea4 	beq.w	8005fc8 <_dtoa_r+0x6a0>
 8006280:	f1b8 0f00 	cmp.w	r8, #0
 8006284:	d005      	beq.n	8006292 <_dtoa_r+0x96a>
 8006286:	45b8      	cmp	r8, r7
 8006288:	d003      	beq.n	8006292 <_dtoa_r+0x96a>
 800628a:	4641      	mov	r1, r8
 800628c:	4620      	mov	r0, r4
 800628e:	f000 f985 	bl	800659c <_Bfree>
 8006292:	4639      	mov	r1, r7
 8006294:	4620      	mov	r0, r4
 8006296:	f000 f981 	bl	800659c <_Bfree>
 800629a:	e695      	b.n	8005fc8 <_dtoa_r+0x6a0>
 800629c:	2600      	movs	r6, #0
 800629e:	4637      	mov	r7, r6
 80062a0:	e7e1      	b.n	8006266 <_dtoa_r+0x93e>
 80062a2:	9700      	str	r7, [sp, #0]
 80062a4:	4637      	mov	r7, r6
 80062a6:	e599      	b.n	8005ddc <_dtoa_r+0x4b4>
 80062a8:	40240000 	.word	0x40240000
 80062ac:	9b08      	ldr	r3, [sp, #32]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 80ca 	beq.w	8006448 <_dtoa_r+0xb20>
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	9302      	str	r3, [sp, #8]
 80062b8:	2d00      	cmp	r5, #0
 80062ba:	dd05      	ble.n	80062c8 <_dtoa_r+0x9a0>
 80062bc:	4639      	mov	r1, r7
 80062be:	462a      	mov	r2, r5
 80062c0:	4620      	mov	r0, r4
 80062c2:	f000 fb3d 	bl	8006940 <__lshift>
 80062c6:	4607      	mov	r7, r0
 80062c8:	f1b8 0f00 	cmp.w	r8, #0
 80062cc:	d05b      	beq.n	8006386 <_dtoa_r+0xa5e>
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 f923 	bl	800651c <_Balloc>
 80062d6:	4605      	mov	r5, r0
 80062d8:	b928      	cbnz	r0, 80062e6 <_dtoa_r+0x9be>
 80062da:	4b87      	ldr	r3, [pc, #540]	; (80064f8 <_dtoa_r+0xbd0>)
 80062dc:	4602      	mov	r2, r0
 80062de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062e2:	f7ff bb3b 	b.w	800595c <_dtoa_r+0x34>
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	3202      	adds	r2, #2
 80062ea:	0092      	lsls	r2, r2, #2
 80062ec:	f107 010c 	add.w	r1, r7, #12
 80062f0:	300c      	adds	r0, #12
 80062f2:	f7fe fdeb 	bl	8004ecc <memcpy>
 80062f6:	2201      	movs	r2, #1
 80062f8:	4629      	mov	r1, r5
 80062fa:	4620      	mov	r0, r4
 80062fc:	f000 fb20 	bl	8006940 <__lshift>
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	f103 0901 	add.w	r9, r3, #1
 8006306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800630a:	4413      	add	r3, r2
 800630c:	9305      	str	r3, [sp, #20]
 800630e:	f00a 0301 	and.w	r3, sl, #1
 8006312:	46b8      	mov	r8, r7
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	4607      	mov	r7, r0
 8006318:	4631      	mov	r1, r6
 800631a:	ee18 0a10 	vmov	r0, s16
 800631e:	f7ff fa75 	bl	800580c <quorem>
 8006322:	4641      	mov	r1, r8
 8006324:	9002      	str	r0, [sp, #8]
 8006326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800632a:	ee18 0a10 	vmov	r0, s16
 800632e:	f000 fb77 	bl	8006a20 <__mcmp>
 8006332:	463a      	mov	r2, r7
 8006334:	9003      	str	r0, [sp, #12]
 8006336:	4631      	mov	r1, r6
 8006338:	4620      	mov	r0, r4
 800633a:	f000 fb8d 	bl	8006a58 <__mdiff>
 800633e:	68c2      	ldr	r2, [r0, #12]
 8006340:	f109 3bff 	add.w	fp, r9, #4294967295
 8006344:	4605      	mov	r5, r0
 8006346:	bb02      	cbnz	r2, 800638a <_dtoa_r+0xa62>
 8006348:	4601      	mov	r1, r0
 800634a:	ee18 0a10 	vmov	r0, s16
 800634e:	f000 fb67 	bl	8006a20 <__mcmp>
 8006352:	4602      	mov	r2, r0
 8006354:	4629      	mov	r1, r5
 8006356:	4620      	mov	r0, r4
 8006358:	9207      	str	r2, [sp, #28]
 800635a:	f000 f91f 	bl	800659c <_Bfree>
 800635e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006362:	ea43 0102 	orr.w	r1, r3, r2
 8006366:	9b04      	ldr	r3, [sp, #16]
 8006368:	430b      	orrs	r3, r1
 800636a:	464d      	mov	r5, r9
 800636c:	d10f      	bne.n	800638e <_dtoa_r+0xa66>
 800636e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006372:	d02a      	beq.n	80063ca <_dtoa_r+0xaa2>
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	dd02      	ble.n	8006380 <_dtoa_r+0xa58>
 800637a:	9b02      	ldr	r3, [sp, #8]
 800637c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006380:	f88b a000 	strb.w	sl, [fp]
 8006384:	e775      	b.n	8006272 <_dtoa_r+0x94a>
 8006386:	4638      	mov	r0, r7
 8006388:	e7ba      	b.n	8006300 <_dtoa_r+0x9d8>
 800638a:	2201      	movs	r2, #1
 800638c:	e7e2      	b.n	8006354 <_dtoa_r+0xa2c>
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	db04      	blt.n	800639e <_dtoa_r+0xa76>
 8006394:	9906      	ldr	r1, [sp, #24]
 8006396:	430b      	orrs	r3, r1
 8006398:	9904      	ldr	r1, [sp, #16]
 800639a:	430b      	orrs	r3, r1
 800639c:	d122      	bne.n	80063e4 <_dtoa_r+0xabc>
 800639e:	2a00      	cmp	r2, #0
 80063a0:	ddee      	ble.n	8006380 <_dtoa_r+0xa58>
 80063a2:	ee18 1a10 	vmov	r1, s16
 80063a6:	2201      	movs	r2, #1
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 fac9 	bl	8006940 <__lshift>
 80063ae:	4631      	mov	r1, r6
 80063b0:	ee08 0a10 	vmov	s16, r0
 80063b4:	f000 fb34 	bl	8006a20 <__mcmp>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	dc03      	bgt.n	80063c4 <_dtoa_r+0xa9c>
 80063bc:	d1e0      	bne.n	8006380 <_dtoa_r+0xa58>
 80063be:	f01a 0f01 	tst.w	sl, #1
 80063c2:	d0dd      	beq.n	8006380 <_dtoa_r+0xa58>
 80063c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063c8:	d1d7      	bne.n	800637a <_dtoa_r+0xa52>
 80063ca:	2339      	movs	r3, #57	; 0x39
 80063cc:	f88b 3000 	strb.w	r3, [fp]
 80063d0:	462b      	mov	r3, r5
 80063d2:	461d      	mov	r5, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063da:	2a39      	cmp	r2, #57	; 0x39
 80063dc:	d071      	beq.n	80064c2 <_dtoa_r+0xb9a>
 80063de:	3201      	adds	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e746      	b.n	8006272 <_dtoa_r+0x94a>
 80063e4:	2a00      	cmp	r2, #0
 80063e6:	dd07      	ble.n	80063f8 <_dtoa_r+0xad0>
 80063e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063ec:	d0ed      	beq.n	80063ca <_dtoa_r+0xaa2>
 80063ee:	f10a 0301 	add.w	r3, sl, #1
 80063f2:	f88b 3000 	strb.w	r3, [fp]
 80063f6:	e73c      	b.n	8006272 <_dtoa_r+0x94a>
 80063f8:	9b05      	ldr	r3, [sp, #20]
 80063fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80063fe:	4599      	cmp	r9, r3
 8006400:	d047      	beq.n	8006492 <_dtoa_r+0xb6a>
 8006402:	ee18 1a10 	vmov	r1, s16
 8006406:	2300      	movs	r3, #0
 8006408:	220a      	movs	r2, #10
 800640a:	4620      	mov	r0, r4
 800640c:	f000 f8e8 	bl	80065e0 <__multadd>
 8006410:	45b8      	cmp	r8, r7
 8006412:	ee08 0a10 	vmov	s16, r0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	f04f 020a 	mov.w	r2, #10
 800641e:	4641      	mov	r1, r8
 8006420:	4620      	mov	r0, r4
 8006422:	d106      	bne.n	8006432 <_dtoa_r+0xb0a>
 8006424:	f000 f8dc 	bl	80065e0 <__multadd>
 8006428:	4680      	mov	r8, r0
 800642a:	4607      	mov	r7, r0
 800642c:	f109 0901 	add.w	r9, r9, #1
 8006430:	e772      	b.n	8006318 <_dtoa_r+0x9f0>
 8006432:	f000 f8d5 	bl	80065e0 <__multadd>
 8006436:	4639      	mov	r1, r7
 8006438:	4680      	mov	r8, r0
 800643a:	2300      	movs	r3, #0
 800643c:	220a      	movs	r2, #10
 800643e:	4620      	mov	r0, r4
 8006440:	f000 f8ce 	bl	80065e0 <__multadd>
 8006444:	4607      	mov	r7, r0
 8006446:	e7f1      	b.n	800642c <_dtoa_r+0xb04>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	9302      	str	r3, [sp, #8]
 800644c:	9d01      	ldr	r5, [sp, #4]
 800644e:	ee18 0a10 	vmov	r0, s16
 8006452:	4631      	mov	r1, r6
 8006454:	f7ff f9da 	bl	800580c <quorem>
 8006458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	f805 ab01 	strb.w	sl, [r5], #1
 8006462:	1aea      	subs	r2, r5, r3
 8006464:	9b02      	ldr	r3, [sp, #8]
 8006466:	4293      	cmp	r3, r2
 8006468:	dd09      	ble.n	800647e <_dtoa_r+0xb56>
 800646a:	ee18 1a10 	vmov	r1, s16
 800646e:	2300      	movs	r3, #0
 8006470:	220a      	movs	r2, #10
 8006472:	4620      	mov	r0, r4
 8006474:	f000 f8b4 	bl	80065e0 <__multadd>
 8006478:	ee08 0a10 	vmov	s16, r0
 800647c:	e7e7      	b.n	800644e <_dtoa_r+0xb26>
 800647e:	9b02      	ldr	r3, [sp, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	bfc8      	it	gt
 8006484:	461d      	movgt	r5, r3
 8006486:	9b01      	ldr	r3, [sp, #4]
 8006488:	bfd8      	it	le
 800648a:	2501      	movle	r5, #1
 800648c:	441d      	add	r5, r3
 800648e:	f04f 0800 	mov.w	r8, #0
 8006492:	ee18 1a10 	vmov	r1, s16
 8006496:	2201      	movs	r2, #1
 8006498:	4620      	mov	r0, r4
 800649a:	f000 fa51 	bl	8006940 <__lshift>
 800649e:	4631      	mov	r1, r6
 80064a0:	ee08 0a10 	vmov	s16, r0
 80064a4:	f000 fabc 	bl	8006a20 <__mcmp>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	dc91      	bgt.n	80063d0 <_dtoa_r+0xaa8>
 80064ac:	d102      	bne.n	80064b4 <_dtoa_r+0xb8c>
 80064ae:	f01a 0f01 	tst.w	sl, #1
 80064b2:	d18d      	bne.n	80063d0 <_dtoa_r+0xaa8>
 80064b4:	462b      	mov	r3, r5
 80064b6:	461d      	mov	r5, r3
 80064b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064bc:	2a30      	cmp	r2, #48	; 0x30
 80064be:	d0fa      	beq.n	80064b6 <_dtoa_r+0xb8e>
 80064c0:	e6d7      	b.n	8006272 <_dtoa_r+0x94a>
 80064c2:	9a01      	ldr	r2, [sp, #4]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d184      	bne.n	80063d2 <_dtoa_r+0xaaa>
 80064c8:	9b00      	ldr	r3, [sp, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	2331      	movs	r3, #49	; 0x31
 80064d0:	7013      	strb	r3, [r2, #0]
 80064d2:	e6ce      	b.n	8006272 <_dtoa_r+0x94a>
 80064d4:	4b09      	ldr	r3, [pc, #36]	; (80064fc <_dtoa_r+0xbd4>)
 80064d6:	f7ff ba95 	b.w	8005a04 <_dtoa_r+0xdc>
 80064da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f47f aa6e 	bne.w	80059be <_dtoa_r+0x96>
 80064e2:	4b07      	ldr	r3, [pc, #28]	; (8006500 <_dtoa_r+0xbd8>)
 80064e4:	f7ff ba8e 	b.w	8005a04 <_dtoa_r+0xdc>
 80064e8:	9b02      	ldr	r3, [sp, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	dcae      	bgt.n	800644c <_dtoa_r+0xb24>
 80064ee:	9b06      	ldr	r3, [sp, #24]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	f73f aea8 	bgt.w	8006246 <_dtoa_r+0x91e>
 80064f6:	e7a9      	b.n	800644c <_dtoa_r+0xb24>
 80064f8:	0800a52f 	.word	0x0800a52f
 80064fc:	0800a48c 	.word	0x0800a48c
 8006500:	0800a4b0 	.word	0x0800a4b0

08006504 <_localeconv_r>:
 8006504:	4800      	ldr	r0, [pc, #0]	; (8006508 <_localeconv_r+0x4>)
 8006506:	4770      	bx	lr
 8006508:	20000170 	.word	0x20000170

0800650c <malloc>:
 800650c:	4b02      	ldr	r3, [pc, #8]	; (8006518 <malloc+0xc>)
 800650e:	4601      	mov	r1, r0
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	f000 bc09 	b.w	8006d28 <_malloc_r>
 8006516:	bf00      	nop
 8006518:	2000001c 	.word	0x2000001c

0800651c <_Balloc>:
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006520:	4604      	mov	r4, r0
 8006522:	460d      	mov	r5, r1
 8006524:	b976      	cbnz	r6, 8006544 <_Balloc+0x28>
 8006526:	2010      	movs	r0, #16
 8006528:	f7ff fff0 	bl	800650c <malloc>
 800652c:	4602      	mov	r2, r0
 800652e:	6260      	str	r0, [r4, #36]	; 0x24
 8006530:	b920      	cbnz	r0, 800653c <_Balloc+0x20>
 8006532:	4b18      	ldr	r3, [pc, #96]	; (8006594 <_Balloc+0x78>)
 8006534:	4818      	ldr	r0, [pc, #96]	; (8006598 <_Balloc+0x7c>)
 8006536:	2166      	movs	r1, #102	; 0x66
 8006538:	f000 fdd6 	bl	80070e8 <__assert_func>
 800653c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006540:	6006      	str	r6, [r0, #0]
 8006542:	60c6      	str	r6, [r0, #12]
 8006544:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006546:	68f3      	ldr	r3, [r6, #12]
 8006548:	b183      	cbz	r3, 800656c <_Balloc+0x50>
 800654a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006552:	b9b8      	cbnz	r0, 8006584 <_Balloc+0x68>
 8006554:	2101      	movs	r1, #1
 8006556:	fa01 f605 	lsl.w	r6, r1, r5
 800655a:	1d72      	adds	r2, r6, #5
 800655c:	0092      	lsls	r2, r2, #2
 800655e:	4620      	mov	r0, r4
 8006560:	f000 fb60 	bl	8006c24 <_calloc_r>
 8006564:	b160      	cbz	r0, 8006580 <_Balloc+0x64>
 8006566:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800656a:	e00e      	b.n	800658a <_Balloc+0x6e>
 800656c:	2221      	movs	r2, #33	; 0x21
 800656e:	2104      	movs	r1, #4
 8006570:	4620      	mov	r0, r4
 8006572:	f000 fb57 	bl	8006c24 <_calloc_r>
 8006576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006578:	60f0      	str	r0, [r6, #12]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e4      	bne.n	800654a <_Balloc+0x2e>
 8006580:	2000      	movs	r0, #0
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	6802      	ldr	r2, [r0, #0]
 8006586:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800658a:	2300      	movs	r3, #0
 800658c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006590:	e7f7      	b.n	8006582 <_Balloc+0x66>
 8006592:	bf00      	nop
 8006594:	0800a4bd 	.word	0x0800a4bd
 8006598:	0800a540 	.word	0x0800a540

0800659c <_Bfree>:
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065a0:	4605      	mov	r5, r0
 80065a2:	460c      	mov	r4, r1
 80065a4:	b976      	cbnz	r6, 80065c4 <_Bfree+0x28>
 80065a6:	2010      	movs	r0, #16
 80065a8:	f7ff ffb0 	bl	800650c <malloc>
 80065ac:	4602      	mov	r2, r0
 80065ae:	6268      	str	r0, [r5, #36]	; 0x24
 80065b0:	b920      	cbnz	r0, 80065bc <_Bfree+0x20>
 80065b2:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <_Bfree+0x3c>)
 80065b4:	4809      	ldr	r0, [pc, #36]	; (80065dc <_Bfree+0x40>)
 80065b6:	218a      	movs	r1, #138	; 0x8a
 80065b8:	f000 fd96 	bl	80070e8 <__assert_func>
 80065bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065c0:	6006      	str	r6, [r0, #0]
 80065c2:	60c6      	str	r6, [r0, #12]
 80065c4:	b13c      	cbz	r4, 80065d6 <_Bfree+0x3a>
 80065c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065c8:	6862      	ldr	r2, [r4, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065d0:	6021      	str	r1, [r4, #0]
 80065d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	0800a4bd 	.word	0x0800a4bd
 80065dc:	0800a540 	.word	0x0800a540

080065e0 <__multadd>:
 80065e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e4:	690d      	ldr	r5, [r1, #16]
 80065e6:	4607      	mov	r7, r0
 80065e8:	460c      	mov	r4, r1
 80065ea:	461e      	mov	r6, r3
 80065ec:	f101 0c14 	add.w	ip, r1, #20
 80065f0:	2000      	movs	r0, #0
 80065f2:	f8dc 3000 	ldr.w	r3, [ip]
 80065f6:	b299      	uxth	r1, r3
 80065f8:	fb02 6101 	mla	r1, r2, r1, r6
 80065fc:	0c1e      	lsrs	r6, r3, #16
 80065fe:	0c0b      	lsrs	r3, r1, #16
 8006600:	fb02 3306 	mla	r3, r2, r6, r3
 8006604:	b289      	uxth	r1, r1
 8006606:	3001      	adds	r0, #1
 8006608:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800660c:	4285      	cmp	r5, r0
 800660e:	f84c 1b04 	str.w	r1, [ip], #4
 8006612:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006616:	dcec      	bgt.n	80065f2 <__multadd+0x12>
 8006618:	b30e      	cbz	r6, 800665e <__multadd+0x7e>
 800661a:	68a3      	ldr	r3, [r4, #8]
 800661c:	42ab      	cmp	r3, r5
 800661e:	dc19      	bgt.n	8006654 <__multadd+0x74>
 8006620:	6861      	ldr	r1, [r4, #4]
 8006622:	4638      	mov	r0, r7
 8006624:	3101      	adds	r1, #1
 8006626:	f7ff ff79 	bl	800651c <_Balloc>
 800662a:	4680      	mov	r8, r0
 800662c:	b928      	cbnz	r0, 800663a <__multadd+0x5a>
 800662e:	4602      	mov	r2, r0
 8006630:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <__multadd+0x84>)
 8006632:	480d      	ldr	r0, [pc, #52]	; (8006668 <__multadd+0x88>)
 8006634:	21b5      	movs	r1, #181	; 0xb5
 8006636:	f000 fd57 	bl	80070e8 <__assert_func>
 800663a:	6922      	ldr	r2, [r4, #16]
 800663c:	3202      	adds	r2, #2
 800663e:	f104 010c 	add.w	r1, r4, #12
 8006642:	0092      	lsls	r2, r2, #2
 8006644:	300c      	adds	r0, #12
 8006646:	f7fe fc41 	bl	8004ecc <memcpy>
 800664a:	4621      	mov	r1, r4
 800664c:	4638      	mov	r0, r7
 800664e:	f7ff ffa5 	bl	800659c <_Bfree>
 8006652:	4644      	mov	r4, r8
 8006654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006658:	3501      	adds	r5, #1
 800665a:	615e      	str	r6, [r3, #20]
 800665c:	6125      	str	r5, [r4, #16]
 800665e:	4620      	mov	r0, r4
 8006660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006664:	0800a52f 	.word	0x0800a52f
 8006668:	0800a540 	.word	0x0800a540

0800666c <__hi0bits>:
 800666c:	0c03      	lsrs	r3, r0, #16
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	b9d3      	cbnz	r3, 80066a8 <__hi0bits+0x3c>
 8006672:	0400      	lsls	r0, r0, #16
 8006674:	2310      	movs	r3, #16
 8006676:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800667a:	bf04      	itt	eq
 800667c:	0200      	lsleq	r0, r0, #8
 800667e:	3308      	addeq	r3, #8
 8006680:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006684:	bf04      	itt	eq
 8006686:	0100      	lsleq	r0, r0, #4
 8006688:	3304      	addeq	r3, #4
 800668a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800668e:	bf04      	itt	eq
 8006690:	0080      	lsleq	r0, r0, #2
 8006692:	3302      	addeq	r3, #2
 8006694:	2800      	cmp	r0, #0
 8006696:	db05      	blt.n	80066a4 <__hi0bits+0x38>
 8006698:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800669c:	f103 0301 	add.w	r3, r3, #1
 80066a0:	bf08      	it	eq
 80066a2:	2320      	moveq	r3, #32
 80066a4:	4618      	mov	r0, r3
 80066a6:	4770      	bx	lr
 80066a8:	2300      	movs	r3, #0
 80066aa:	e7e4      	b.n	8006676 <__hi0bits+0xa>

080066ac <__lo0bits>:
 80066ac:	6803      	ldr	r3, [r0, #0]
 80066ae:	f013 0207 	ands.w	r2, r3, #7
 80066b2:	4601      	mov	r1, r0
 80066b4:	d00b      	beq.n	80066ce <__lo0bits+0x22>
 80066b6:	07da      	lsls	r2, r3, #31
 80066b8:	d423      	bmi.n	8006702 <__lo0bits+0x56>
 80066ba:	0798      	lsls	r0, r3, #30
 80066bc:	bf49      	itett	mi
 80066be:	085b      	lsrmi	r3, r3, #1
 80066c0:	089b      	lsrpl	r3, r3, #2
 80066c2:	2001      	movmi	r0, #1
 80066c4:	600b      	strmi	r3, [r1, #0]
 80066c6:	bf5c      	itt	pl
 80066c8:	600b      	strpl	r3, [r1, #0]
 80066ca:	2002      	movpl	r0, #2
 80066cc:	4770      	bx	lr
 80066ce:	b298      	uxth	r0, r3
 80066d0:	b9a8      	cbnz	r0, 80066fe <__lo0bits+0x52>
 80066d2:	0c1b      	lsrs	r3, r3, #16
 80066d4:	2010      	movs	r0, #16
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	b90a      	cbnz	r2, 80066de <__lo0bits+0x32>
 80066da:	3008      	adds	r0, #8
 80066dc:	0a1b      	lsrs	r3, r3, #8
 80066de:	071a      	lsls	r2, r3, #28
 80066e0:	bf04      	itt	eq
 80066e2:	091b      	lsreq	r3, r3, #4
 80066e4:	3004      	addeq	r0, #4
 80066e6:	079a      	lsls	r2, r3, #30
 80066e8:	bf04      	itt	eq
 80066ea:	089b      	lsreq	r3, r3, #2
 80066ec:	3002      	addeq	r0, #2
 80066ee:	07da      	lsls	r2, r3, #31
 80066f0:	d403      	bmi.n	80066fa <__lo0bits+0x4e>
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	f100 0001 	add.w	r0, r0, #1
 80066f8:	d005      	beq.n	8006706 <__lo0bits+0x5a>
 80066fa:	600b      	str	r3, [r1, #0]
 80066fc:	4770      	bx	lr
 80066fe:	4610      	mov	r0, r2
 8006700:	e7e9      	b.n	80066d6 <__lo0bits+0x2a>
 8006702:	2000      	movs	r0, #0
 8006704:	4770      	bx	lr
 8006706:	2020      	movs	r0, #32
 8006708:	4770      	bx	lr
	...

0800670c <__i2b>:
 800670c:	b510      	push	{r4, lr}
 800670e:	460c      	mov	r4, r1
 8006710:	2101      	movs	r1, #1
 8006712:	f7ff ff03 	bl	800651c <_Balloc>
 8006716:	4602      	mov	r2, r0
 8006718:	b928      	cbnz	r0, 8006726 <__i2b+0x1a>
 800671a:	4b05      	ldr	r3, [pc, #20]	; (8006730 <__i2b+0x24>)
 800671c:	4805      	ldr	r0, [pc, #20]	; (8006734 <__i2b+0x28>)
 800671e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006722:	f000 fce1 	bl	80070e8 <__assert_func>
 8006726:	2301      	movs	r3, #1
 8006728:	6144      	str	r4, [r0, #20]
 800672a:	6103      	str	r3, [r0, #16]
 800672c:	bd10      	pop	{r4, pc}
 800672e:	bf00      	nop
 8006730:	0800a52f 	.word	0x0800a52f
 8006734:	0800a540 	.word	0x0800a540

08006738 <__multiply>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	4691      	mov	r9, r2
 800673e:	690a      	ldr	r2, [r1, #16]
 8006740:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	bfb8      	it	lt
 8006748:	460b      	movlt	r3, r1
 800674a:	460c      	mov	r4, r1
 800674c:	bfbc      	itt	lt
 800674e:	464c      	movlt	r4, r9
 8006750:	4699      	movlt	r9, r3
 8006752:	6927      	ldr	r7, [r4, #16]
 8006754:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006758:	68a3      	ldr	r3, [r4, #8]
 800675a:	6861      	ldr	r1, [r4, #4]
 800675c:	eb07 060a 	add.w	r6, r7, sl
 8006760:	42b3      	cmp	r3, r6
 8006762:	b085      	sub	sp, #20
 8006764:	bfb8      	it	lt
 8006766:	3101      	addlt	r1, #1
 8006768:	f7ff fed8 	bl	800651c <_Balloc>
 800676c:	b930      	cbnz	r0, 800677c <__multiply+0x44>
 800676e:	4602      	mov	r2, r0
 8006770:	4b44      	ldr	r3, [pc, #272]	; (8006884 <__multiply+0x14c>)
 8006772:	4845      	ldr	r0, [pc, #276]	; (8006888 <__multiply+0x150>)
 8006774:	f240 115d 	movw	r1, #349	; 0x15d
 8006778:	f000 fcb6 	bl	80070e8 <__assert_func>
 800677c:	f100 0514 	add.w	r5, r0, #20
 8006780:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006784:	462b      	mov	r3, r5
 8006786:	2200      	movs	r2, #0
 8006788:	4543      	cmp	r3, r8
 800678a:	d321      	bcc.n	80067d0 <__multiply+0x98>
 800678c:	f104 0314 	add.w	r3, r4, #20
 8006790:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006794:	f109 0314 	add.w	r3, r9, #20
 8006798:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800679c:	9202      	str	r2, [sp, #8]
 800679e:	1b3a      	subs	r2, r7, r4
 80067a0:	3a15      	subs	r2, #21
 80067a2:	f022 0203 	bic.w	r2, r2, #3
 80067a6:	3204      	adds	r2, #4
 80067a8:	f104 0115 	add.w	r1, r4, #21
 80067ac:	428f      	cmp	r7, r1
 80067ae:	bf38      	it	cc
 80067b0:	2204      	movcc	r2, #4
 80067b2:	9201      	str	r2, [sp, #4]
 80067b4:	9a02      	ldr	r2, [sp, #8]
 80067b6:	9303      	str	r3, [sp, #12]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d80c      	bhi.n	80067d6 <__multiply+0x9e>
 80067bc:	2e00      	cmp	r6, #0
 80067be:	dd03      	ble.n	80067c8 <__multiply+0x90>
 80067c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d05a      	beq.n	800687e <__multiply+0x146>
 80067c8:	6106      	str	r6, [r0, #16]
 80067ca:	b005      	add	sp, #20
 80067cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d0:	f843 2b04 	str.w	r2, [r3], #4
 80067d4:	e7d8      	b.n	8006788 <__multiply+0x50>
 80067d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80067da:	f1ba 0f00 	cmp.w	sl, #0
 80067de:	d024      	beq.n	800682a <__multiply+0xf2>
 80067e0:	f104 0e14 	add.w	lr, r4, #20
 80067e4:	46a9      	mov	r9, r5
 80067e6:	f04f 0c00 	mov.w	ip, #0
 80067ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80067ee:	f8d9 1000 	ldr.w	r1, [r9]
 80067f2:	fa1f fb82 	uxth.w	fp, r2
 80067f6:	b289      	uxth	r1, r1
 80067f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80067fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006800:	f8d9 2000 	ldr.w	r2, [r9]
 8006804:	4461      	add	r1, ip
 8006806:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800680a:	fb0a c20b 	mla	r2, sl, fp, ip
 800680e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006812:	b289      	uxth	r1, r1
 8006814:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006818:	4577      	cmp	r7, lr
 800681a:	f849 1b04 	str.w	r1, [r9], #4
 800681e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006822:	d8e2      	bhi.n	80067ea <__multiply+0xb2>
 8006824:	9a01      	ldr	r2, [sp, #4]
 8006826:	f845 c002 	str.w	ip, [r5, r2]
 800682a:	9a03      	ldr	r2, [sp, #12]
 800682c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006830:	3304      	adds	r3, #4
 8006832:	f1b9 0f00 	cmp.w	r9, #0
 8006836:	d020      	beq.n	800687a <__multiply+0x142>
 8006838:	6829      	ldr	r1, [r5, #0]
 800683a:	f104 0c14 	add.w	ip, r4, #20
 800683e:	46ae      	mov	lr, r5
 8006840:	f04f 0a00 	mov.w	sl, #0
 8006844:	f8bc b000 	ldrh.w	fp, [ip]
 8006848:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800684c:	fb09 220b 	mla	r2, r9, fp, r2
 8006850:	4492      	add	sl, r2
 8006852:	b289      	uxth	r1, r1
 8006854:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006858:	f84e 1b04 	str.w	r1, [lr], #4
 800685c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006860:	f8be 1000 	ldrh.w	r1, [lr]
 8006864:	0c12      	lsrs	r2, r2, #16
 8006866:	fb09 1102 	mla	r1, r9, r2, r1
 800686a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800686e:	4567      	cmp	r7, ip
 8006870:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006874:	d8e6      	bhi.n	8006844 <__multiply+0x10c>
 8006876:	9a01      	ldr	r2, [sp, #4]
 8006878:	50a9      	str	r1, [r5, r2]
 800687a:	3504      	adds	r5, #4
 800687c:	e79a      	b.n	80067b4 <__multiply+0x7c>
 800687e:	3e01      	subs	r6, #1
 8006880:	e79c      	b.n	80067bc <__multiply+0x84>
 8006882:	bf00      	nop
 8006884:	0800a52f 	.word	0x0800a52f
 8006888:	0800a540 	.word	0x0800a540

0800688c <__pow5mult>:
 800688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006890:	4615      	mov	r5, r2
 8006892:	f012 0203 	ands.w	r2, r2, #3
 8006896:	4606      	mov	r6, r0
 8006898:	460f      	mov	r7, r1
 800689a:	d007      	beq.n	80068ac <__pow5mult+0x20>
 800689c:	4c25      	ldr	r4, [pc, #148]	; (8006934 <__pow5mult+0xa8>)
 800689e:	3a01      	subs	r2, #1
 80068a0:	2300      	movs	r3, #0
 80068a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068a6:	f7ff fe9b 	bl	80065e0 <__multadd>
 80068aa:	4607      	mov	r7, r0
 80068ac:	10ad      	asrs	r5, r5, #2
 80068ae:	d03d      	beq.n	800692c <__pow5mult+0xa0>
 80068b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068b2:	b97c      	cbnz	r4, 80068d4 <__pow5mult+0x48>
 80068b4:	2010      	movs	r0, #16
 80068b6:	f7ff fe29 	bl	800650c <malloc>
 80068ba:	4602      	mov	r2, r0
 80068bc:	6270      	str	r0, [r6, #36]	; 0x24
 80068be:	b928      	cbnz	r0, 80068cc <__pow5mult+0x40>
 80068c0:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <__pow5mult+0xac>)
 80068c2:	481e      	ldr	r0, [pc, #120]	; (800693c <__pow5mult+0xb0>)
 80068c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80068c8:	f000 fc0e 	bl	80070e8 <__assert_func>
 80068cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068d0:	6004      	str	r4, [r0, #0]
 80068d2:	60c4      	str	r4, [r0, #12]
 80068d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068dc:	b94c      	cbnz	r4, 80068f2 <__pow5mult+0x66>
 80068de:	f240 2171 	movw	r1, #625	; 0x271
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7ff ff12 	bl	800670c <__i2b>
 80068e8:	2300      	movs	r3, #0
 80068ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80068ee:	4604      	mov	r4, r0
 80068f0:	6003      	str	r3, [r0, #0]
 80068f2:	f04f 0900 	mov.w	r9, #0
 80068f6:	07eb      	lsls	r3, r5, #31
 80068f8:	d50a      	bpl.n	8006910 <__pow5mult+0x84>
 80068fa:	4639      	mov	r1, r7
 80068fc:	4622      	mov	r2, r4
 80068fe:	4630      	mov	r0, r6
 8006900:	f7ff ff1a 	bl	8006738 <__multiply>
 8006904:	4639      	mov	r1, r7
 8006906:	4680      	mov	r8, r0
 8006908:	4630      	mov	r0, r6
 800690a:	f7ff fe47 	bl	800659c <_Bfree>
 800690e:	4647      	mov	r7, r8
 8006910:	106d      	asrs	r5, r5, #1
 8006912:	d00b      	beq.n	800692c <__pow5mult+0xa0>
 8006914:	6820      	ldr	r0, [r4, #0]
 8006916:	b938      	cbnz	r0, 8006928 <__pow5mult+0x9c>
 8006918:	4622      	mov	r2, r4
 800691a:	4621      	mov	r1, r4
 800691c:	4630      	mov	r0, r6
 800691e:	f7ff ff0b 	bl	8006738 <__multiply>
 8006922:	6020      	str	r0, [r4, #0]
 8006924:	f8c0 9000 	str.w	r9, [r0]
 8006928:	4604      	mov	r4, r0
 800692a:	e7e4      	b.n	80068f6 <__pow5mult+0x6a>
 800692c:	4638      	mov	r0, r7
 800692e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006932:	bf00      	nop
 8006934:	0800a690 	.word	0x0800a690
 8006938:	0800a4bd 	.word	0x0800a4bd
 800693c:	0800a540 	.word	0x0800a540

08006940 <__lshift>:
 8006940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006944:	460c      	mov	r4, r1
 8006946:	6849      	ldr	r1, [r1, #4]
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800694e:	68a3      	ldr	r3, [r4, #8]
 8006950:	4607      	mov	r7, r0
 8006952:	4691      	mov	r9, r2
 8006954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006958:	f108 0601 	add.w	r6, r8, #1
 800695c:	42b3      	cmp	r3, r6
 800695e:	db0b      	blt.n	8006978 <__lshift+0x38>
 8006960:	4638      	mov	r0, r7
 8006962:	f7ff fddb 	bl	800651c <_Balloc>
 8006966:	4605      	mov	r5, r0
 8006968:	b948      	cbnz	r0, 800697e <__lshift+0x3e>
 800696a:	4602      	mov	r2, r0
 800696c:	4b2a      	ldr	r3, [pc, #168]	; (8006a18 <__lshift+0xd8>)
 800696e:	482b      	ldr	r0, [pc, #172]	; (8006a1c <__lshift+0xdc>)
 8006970:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006974:	f000 fbb8 	bl	80070e8 <__assert_func>
 8006978:	3101      	adds	r1, #1
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	e7ee      	b.n	800695c <__lshift+0x1c>
 800697e:	2300      	movs	r3, #0
 8006980:	f100 0114 	add.w	r1, r0, #20
 8006984:	f100 0210 	add.w	r2, r0, #16
 8006988:	4618      	mov	r0, r3
 800698a:	4553      	cmp	r3, sl
 800698c:	db37      	blt.n	80069fe <__lshift+0xbe>
 800698e:	6920      	ldr	r0, [r4, #16]
 8006990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006994:	f104 0314 	add.w	r3, r4, #20
 8006998:	f019 091f 	ands.w	r9, r9, #31
 800699c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80069a4:	d02f      	beq.n	8006a06 <__lshift+0xc6>
 80069a6:	f1c9 0e20 	rsb	lr, r9, #32
 80069aa:	468a      	mov	sl, r1
 80069ac:	f04f 0c00 	mov.w	ip, #0
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	fa02 f209 	lsl.w	r2, r2, r9
 80069b6:	ea42 020c 	orr.w	r2, r2, ip
 80069ba:	f84a 2b04 	str.w	r2, [sl], #4
 80069be:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c2:	4298      	cmp	r0, r3
 80069c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80069c8:	d8f2      	bhi.n	80069b0 <__lshift+0x70>
 80069ca:	1b03      	subs	r3, r0, r4
 80069cc:	3b15      	subs	r3, #21
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	3304      	adds	r3, #4
 80069d4:	f104 0215 	add.w	r2, r4, #21
 80069d8:	4290      	cmp	r0, r2
 80069da:	bf38      	it	cc
 80069dc:	2304      	movcc	r3, #4
 80069de:	f841 c003 	str.w	ip, [r1, r3]
 80069e2:	f1bc 0f00 	cmp.w	ip, #0
 80069e6:	d001      	beq.n	80069ec <__lshift+0xac>
 80069e8:	f108 0602 	add.w	r6, r8, #2
 80069ec:	3e01      	subs	r6, #1
 80069ee:	4638      	mov	r0, r7
 80069f0:	612e      	str	r6, [r5, #16]
 80069f2:	4621      	mov	r1, r4
 80069f4:	f7ff fdd2 	bl	800659c <_Bfree>
 80069f8:	4628      	mov	r0, r5
 80069fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a02:	3301      	adds	r3, #1
 8006a04:	e7c1      	b.n	800698a <__lshift+0x4a>
 8006a06:	3904      	subs	r1, #4
 8006a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a10:	4298      	cmp	r0, r3
 8006a12:	d8f9      	bhi.n	8006a08 <__lshift+0xc8>
 8006a14:	e7ea      	b.n	80069ec <__lshift+0xac>
 8006a16:	bf00      	nop
 8006a18:	0800a52f 	.word	0x0800a52f
 8006a1c:	0800a540 	.word	0x0800a540

08006a20 <__mcmp>:
 8006a20:	b530      	push	{r4, r5, lr}
 8006a22:	6902      	ldr	r2, [r0, #16]
 8006a24:	690c      	ldr	r4, [r1, #16]
 8006a26:	1b12      	subs	r2, r2, r4
 8006a28:	d10e      	bne.n	8006a48 <__mcmp+0x28>
 8006a2a:	f100 0314 	add.w	r3, r0, #20
 8006a2e:	3114      	adds	r1, #20
 8006a30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a40:	42a5      	cmp	r5, r4
 8006a42:	d003      	beq.n	8006a4c <__mcmp+0x2c>
 8006a44:	d305      	bcc.n	8006a52 <__mcmp+0x32>
 8006a46:	2201      	movs	r2, #1
 8006a48:	4610      	mov	r0, r2
 8006a4a:	bd30      	pop	{r4, r5, pc}
 8006a4c:	4283      	cmp	r3, r0
 8006a4e:	d3f3      	bcc.n	8006a38 <__mcmp+0x18>
 8006a50:	e7fa      	b.n	8006a48 <__mcmp+0x28>
 8006a52:	f04f 32ff 	mov.w	r2, #4294967295
 8006a56:	e7f7      	b.n	8006a48 <__mcmp+0x28>

08006a58 <__mdiff>:
 8006a58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	4606      	mov	r6, r0
 8006a60:	4611      	mov	r1, r2
 8006a62:	4620      	mov	r0, r4
 8006a64:	4690      	mov	r8, r2
 8006a66:	f7ff ffdb 	bl	8006a20 <__mcmp>
 8006a6a:	1e05      	subs	r5, r0, #0
 8006a6c:	d110      	bne.n	8006a90 <__mdiff+0x38>
 8006a6e:	4629      	mov	r1, r5
 8006a70:	4630      	mov	r0, r6
 8006a72:	f7ff fd53 	bl	800651c <_Balloc>
 8006a76:	b930      	cbnz	r0, 8006a86 <__mdiff+0x2e>
 8006a78:	4b3a      	ldr	r3, [pc, #232]	; (8006b64 <__mdiff+0x10c>)
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	f240 2132 	movw	r1, #562	; 0x232
 8006a80:	4839      	ldr	r0, [pc, #228]	; (8006b68 <__mdiff+0x110>)
 8006a82:	f000 fb31 	bl	80070e8 <__assert_func>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a90:	bfa4      	itt	ge
 8006a92:	4643      	movge	r3, r8
 8006a94:	46a0      	movge	r8, r4
 8006a96:	4630      	mov	r0, r6
 8006a98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a9c:	bfa6      	itte	ge
 8006a9e:	461c      	movge	r4, r3
 8006aa0:	2500      	movge	r5, #0
 8006aa2:	2501      	movlt	r5, #1
 8006aa4:	f7ff fd3a 	bl	800651c <_Balloc>
 8006aa8:	b920      	cbnz	r0, 8006ab4 <__mdiff+0x5c>
 8006aaa:	4b2e      	ldr	r3, [pc, #184]	; (8006b64 <__mdiff+0x10c>)
 8006aac:	4602      	mov	r2, r0
 8006aae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ab2:	e7e5      	b.n	8006a80 <__mdiff+0x28>
 8006ab4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ab8:	6926      	ldr	r6, [r4, #16]
 8006aba:	60c5      	str	r5, [r0, #12]
 8006abc:	f104 0914 	add.w	r9, r4, #20
 8006ac0:	f108 0514 	add.w	r5, r8, #20
 8006ac4:	f100 0e14 	add.w	lr, r0, #20
 8006ac8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006acc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ad0:	f108 0210 	add.w	r2, r8, #16
 8006ad4:	46f2      	mov	sl, lr
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006adc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ae0:	fa1f f883 	uxth.w	r8, r3
 8006ae4:	fa11 f18b 	uxtah	r1, r1, fp
 8006ae8:	0c1b      	lsrs	r3, r3, #16
 8006aea:	eba1 0808 	sub.w	r8, r1, r8
 8006aee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006af2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006af6:	fa1f f888 	uxth.w	r8, r8
 8006afa:	1419      	asrs	r1, r3, #16
 8006afc:	454e      	cmp	r6, r9
 8006afe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006b02:	f84a 3b04 	str.w	r3, [sl], #4
 8006b06:	d8e7      	bhi.n	8006ad8 <__mdiff+0x80>
 8006b08:	1b33      	subs	r3, r6, r4
 8006b0a:	3b15      	subs	r3, #21
 8006b0c:	f023 0303 	bic.w	r3, r3, #3
 8006b10:	3304      	adds	r3, #4
 8006b12:	3415      	adds	r4, #21
 8006b14:	42a6      	cmp	r6, r4
 8006b16:	bf38      	it	cc
 8006b18:	2304      	movcc	r3, #4
 8006b1a:	441d      	add	r5, r3
 8006b1c:	4473      	add	r3, lr
 8006b1e:	469e      	mov	lr, r3
 8006b20:	462e      	mov	r6, r5
 8006b22:	4566      	cmp	r6, ip
 8006b24:	d30e      	bcc.n	8006b44 <__mdiff+0xec>
 8006b26:	f10c 0203 	add.w	r2, ip, #3
 8006b2a:	1b52      	subs	r2, r2, r5
 8006b2c:	f022 0203 	bic.w	r2, r2, #3
 8006b30:	3d03      	subs	r5, #3
 8006b32:	45ac      	cmp	ip, r5
 8006b34:	bf38      	it	cc
 8006b36:	2200      	movcc	r2, #0
 8006b38:	441a      	add	r2, r3
 8006b3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006b3e:	b17b      	cbz	r3, 8006b60 <__mdiff+0x108>
 8006b40:	6107      	str	r7, [r0, #16]
 8006b42:	e7a3      	b.n	8006a8c <__mdiff+0x34>
 8006b44:	f856 8b04 	ldr.w	r8, [r6], #4
 8006b48:	fa11 f288 	uxtah	r2, r1, r8
 8006b4c:	1414      	asrs	r4, r2, #16
 8006b4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b52:	b292      	uxth	r2, r2
 8006b54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b58:	f84e 2b04 	str.w	r2, [lr], #4
 8006b5c:	1421      	asrs	r1, r4, #16
 8006b5e:	e7e0      	b.n	8006b22 <__mdiff+0xca>
 8006b60:	3f01      	subs	r7, #1
 8006b62:	e7ea      	b.n	8006b3a <__mdiff+0xe2>
 8006b64:	0800a52f 	.word	0x0800a52f
 8006b68:	0800a540 	.word	0x0800a540

08006b6c <__d2b>:
 8006b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b70:	4689      	mov	r9, r1
 8006b72:	2101      	movs	r1, #1
 8006b74:	ec57 6b10 	vmov	r6, r7, d0
 8006b78:	4690      	mov	r8, r2
 8006b7a:	f7ff fccf 	bl	800651c <_Balloc>
 8006b7e:	4604      	mov	r4, r0
 8006b80:	b930      	cbnz	r0, 8006b90 <__d2b+0x24>
 8006b82:	4602      	mov	r2, r0
 8006b84:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <__d2b+0xb0>)
 8006b86:	4826      	ldr	r0, [pc, #152]	; (8006c20 <__d2b+0xb4>)
 8006b88:	f240 310a 	movw	r1, #778	; 0x30a
 8006b8c:	f000 faac 	bl	80070e8 <__assert_func>
 8006b90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b98:	bb35      	cbnz	r5, 8006be8 <__d2b+0x7c>
 8006b9a:	2e00      	cmp	r6, #0
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	d028      	beq.n	8006bf2 <__d2b+0x86>
 8006ba0:	4668      	mov	r0, sp
 8006ba2:	9600      	str	r6, [sp, #0]
 8006ba4:	f7ff fd82 	bl	80066ac <__lo0bits>
 8006ba8:	9900      	ldr	r1, [sp, #0]
 8006baa:	b300      	cbz	r0, 8006bee <__d2b+0x82>
 8006bac:	9a01      	ldr	r2, [sp, #4]
 8006bae:	f1c0 0320 	rsb	r3, r0, #32
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	40c2      	lsrs	r2, r0
 8006bba:	6163      	str	r3, [r4, #20]
 8006bbc:	9201      	str	r2, [sp, #4]
 8006bbe:	9b01      	ldr	r3, [sp, #4]
 8006bc0:	61a3      	str	r3, [r4, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bf14      	ite	ne
 8006bc6:	2202      	movne	r2, #2
 8006bc8:	2201      	moveq	r2, #1
 8006bca:	6122      	str	r2, [r4, #16]
 8006bcc:	b1d5      	cbz	r5, 8006c04 <__d2b+0x98>
 8006bce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006bd2:	4405      	add	r5, r0
 8006bd4:	f8c9 5000 	str.w	r5, [r9]
 8006bd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006bdc:	f8c8 0000 	str.w	r0, [r8]
 8006be0:	4620      	mov	r0, r4
 8006be2:	b003      	add	sp, #12
 8006be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bec:	e7d5      	b.n	8006b9a <__d2b+0x2e>
 8006bee:	6161      	str	r1, [r4, #20]
 8006bf0:	e7e5      	b.n	8006bbe <__d2b+0x52>
 8006bf2:	a801      	add	r0, sp, #4
 8006bf4:	f7ff fd5a 	bl	80066ac <__lo0bits>
 8006bf8:	9b01      	ldr	r3, [sp, #4]
 8006bfa:	6163      	str	r3, [r4, #20]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	6122      	str	r2, [r4, #16]
 8006c00:	3020      	adds	r0, #32
 8006c02:	e7e3      	b.n	8006bcc <__d2b+0x60>
 8006c04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c0c:	f8c9 0000 	str.w	r0, [r9]
 8006c10:	6918      	ldr	r0, [r3, #16]
 8006c12:	f7ff fd2b 	bl	800666c <__hi0bits>
 8006c16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c1a:	e7df      	b.n	8006bdc <__d2b+0x70>
 8006c1c:	0800a52f 	.word	0x0800a52f
 8006c20:	0800a540 	.word	0x0800a540

08006c24 <_calloc_r>:
 8006c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c26:	fba1 2402 	umull	r2, r4, r1, r2
 8006c2a:	b94c      	cbnz	r4, 8006c40 <_calloc_r+0x1c>
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	9201      	str	r2, [sp, #4]
 8006c30:	f000 f87a 	bl	8006d28 <_malloc_r>
 8006c34:	9a01      	ldr	r2, [sp, #4]
 8006c36:	4605      	mov	r5, r0
 8006c38:	b930      	cbnz	r0, 8006c48 <_calloc_r+0x24>
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	b003      	add	sp, #12
 8006c3e:	bd30      	pop	{r4, r5, pc}
 8006c40:	220c      	movs	r2, #12
 8006c42:	6002      	str	r2, [r0, #0]
 8006c44:	2500      	movs	r5, #0
 8006c46:	e7f8      	b.n	8006c3a <_calloc_r+0x16>
 8006c48:	4621      	mov	r1, r4
 8006c4a:	f7fe f94d 	bl	8004ee8 <memset>
 8006c4e:	e7f4      	b.n	8006c3a <_calloc_r+0x16>

08006c50 <_free_r>:
 8006c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c52:	2900      	cmp	r1, #0
 8006c54:	d044      	beq.n	8006ce0 <_free_r+0x90>
 8006c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c5a:	9001      	str	r0, [sp, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c62:	bfb8      	it	lt
 8006c64:	18e4      	addlt	r4, r4, r3
 8006c66:	f000 fa9b 	bl	80071a0 <__malloc_lock>
 8006c6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ce4 <_free_r+0x94>)
 8006c6c:	9801      	ldr	r0, [sp, #4]
 8006c6e:	6813      	ldr	r3, [r2, #0]
 8006c70:	b933      	cbnz	r3, 8006c80 <_free_r+0x30>
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	6014      	str	r4, [r2, #0]
 8006c76:	b003      	add	sp, #12
 8006c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c7c:	f000 ba96 	b.w	80071ac <__malloc_unlock>
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	d908      	bls.n	8006c96 <_free_r+0x46>
 8006c84:	6825      	ldr	r5, [r4, #0]
 8006c86:	1961      	adds	r1, r4, r5
 8006c88:	428b      	cmp	r3, r1
 8006c8a:	bf01      	itttt	eq
 8006c8c:	6819      	ldreq	r1, [r3, #0]
 8006c8e:	685b      	ldreq	r3, [r3, #4]
 8006c90:	1949      	addeq	r1, r1, r5
 8006c92:	6021      	streq	r1, [r4, #0]
 8006c94:	e7ed      	b.n	8006c72 <_free_r+0x22>
 8006c96:	461a      	mov	r2, r3
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	b10b      	cbz	r3, 8006ca0 <_free_r+0x50>
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	d9fa      	bls.n	8006c96 <_free_r+0x46>
 8006ca0:	6811      	ldr	r1, [r2, #0]
 8006ca2:	1855      	adds	r5, r2, r1
 8006ca4:	42a5      	cmp	r5, r4
 8006ca6:	d10b      	bne.n	8006cc0 <_free_r+0x70>
 8006ca8:	6824      	ldr	r4, [r4, #0]
 8006caa:	4421      	add	r1, r4
 8006cac:	1854      	adds	r4, r2, r1
 8006cae:	42a3      	cmp	r3, r4
 8006cb0:	6011      	str	r1, [r2, #0]
 8006cb2:	d1e0      	bne.n	8006c76 <_free_r+0x26>
 8006cb4:	681c      	ldr	r4, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	6053      	str	r3, [r2, #4]
 8006cba:	4421      	add	r1, r4
 8006cbc:	6011      	str	r1, [r2, #0]
 8006cbe:	e7da      	b.n	8006c76 <_free_r+0x26>
 8006cc0:	d902      	bls.n	8006cc8 <_free_r+0x78>
 8006cc2:	230c      	movs	r3, #12
 8006cc4:	6003      	str	r3, [r0, #0]
 8006cc6:	e7d6      	b.n	8006c76 <_free_r+0x26>
 8006cc8:	6825      	ldr	r5, [r4, #0]
 8006cca:	1961      	adds	r1, r4, r5
 8006ccc:	428b      	cmp	r3, r1
 8006cce:	bf04      	itt	eq
 8006cd0:	6819      	ldreq	r1, [r3, #0]
 8006cd2:	685b      	ldreq	r3, [r3, #4]
 8006cd4:	6063      	str	r3, [r4, #4]
 8006cd6:	bf04      	itt	eq
 8006cd8:	1949      	addeq	r1, r1, r5
 8006cda:	6021      	streq	r1, [r4, #0]
 8006cdc:	6054      	str	r4, [r2, #4]
 8006cde:	e7ca      	b.n	8006c76 <_free_r+0x26>
 8006ce0:	b003      	add	sp, #12
 8006ce2:	bd30      	pop	{r4, r5, pc}
 8006ce4:	20003a88 	.word	0x20003a88

08006ce8 <sbrk_aligned>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	4e0e      	ldr	r6, [pc, #56]	; (8006d24 <sbrk_aligned+0x3c>)
 8006cec:	460c      	mov	r4, r1
 8006cee:	6831      	ldr	r1, [r6, #0]
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	b911      	cbnz	r1, 8006cfa <sbrk_aligned+0x12>
 8006cf4:	f000 f9e8 	bl	80070c8 <_sbrk_r>
 8006cf8:	6030      	str	r0, [r6, #0]
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f000 f9e3 	bl	80070c8 <_sbrk_r>
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	d00a      	beq.n	8006d1c <sbrk_aligned+0x34>
 8006d06:	1cc4      	adds	r4, r0, #3
 8006d08:	f024 0403 	bic.w	r4, r4, #3
 8006d0c:	42a0      	cmp	r0, r4
 8006d0e:	d007      	beq.n	8006d20 <sbrk_aligned+0x38>
 8006d10:	1a21      	subs	r1, r4, r0
 8006d12:	4628      	mov	r0, r5
 8006d14:	f000 f9d8 	bl	80070c8 <_sbrk_r>
 8006d18:	3001      	adds	r0, #1
 8006d1a:	d101      	bne.n	8006d20 <sbrk_aligned+0x38>
 8006d1c:	f04f 34ff 	mov.w	r4, #4294967295
 8006d20:	4620      	mov	r0, r4
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	20003a8c 	.word	0x20003a8c

08006d28 <_malloc_r>:
 8006d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2c:	1ccd      	adds	r5, r1, #3
 8006d2e:	f025 0503 	bic.w	r5, r5, #3
 8006d32:	3508      	adds	r5, #8
 8006d34:	2d0c      	cmp	r5, #12
 8006d36:	bf38      	it	cc
 8006d38:	250c      	movcc	r5, #12
 8006d3a:	2d00      	cmp	r5, #0
 8006d3c:	4607      	mov	r7, r0
 8006d3e:	db01      	blt.n	8006d44 <_malloc_r+0x1c>
 8006d40:	42a9      	cmp	r1, r5
 8006d42:	d905      	bls.n	8006d50 <_malloc_r+0x28>
 8006d44:	230c      	movs	r3, #12
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	2600      	movs	r6, #0
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d50:	4e2e      	ldr	r6, [pc, #184]	; (8006e0c <_malloc_r+0xe4>)
 8006d52:	f000 fa25 	bl	80071a0 <__malloc_lock>
 8006d56:	6833      	ldr	r3, [r6, #0]
 8006d58:	461c      	mov	r4, r3
 8006d5a:	bb34      	cbnz	r4, 8006daa <_malloc_r+0x82>
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f7ff ffc2 	bl	8006ce8 <sbrk_aligned>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	4604      	mov	r4, r0
 8006d68:	d14d      	bne.n	8006e06 <_malloc_r+0xde>
 8006d6a:	6834      	ldr	r4, [r6, #0]
 8006d6c:	4626      	mov	r6, r4
 8006d6e:	2e00      	cmp	r6, #0
 8006d70:	d140      	bne.n	8006df4 <_malloc_r+0xcc>
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	4631      	mov	r1, r6
 8006d76:	4638      	mov	r0, r7
 8006d78:	eb04 0803 	add.w	r8, r4, r3
 8006d7c:	f000 f9a4 	bl	80070c8 <_sbrk_r>
 8006d80:	4580      	cmp	r8, r0
 8006d82:	d13a      	bne.n	8006dfa <_malloc_r+0xd2>
 8006d84:	6821      	ldr	r1, [r4, #0]
 8006d86:	3503      	adds	r5, #3
 8006d88:	1a6d      	subs	r5, r5, r1
 8006d8a:	f025 0503 	bic.w	r5, r5, #3
 8006d8e:	3508      	adds	r5, #8
 8006d90:	2d0c      	cmp	r5, #12
 8006d92:	bf38      	it	cc
 8006d94:	250c      	movcc	r5, #12
 8006d96:	4629      	mov	r1, r5
 8006d98:	4638      	mov	r0, r7
 8006d9a:	f7ff ffa5 	bl	8006ce8 <sbrk_aligned>
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d02b      	beq.n	8006dfa <_malloc_r+0xd2>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	442b      	add	r3, r5
 8006da6:	6023      	str	r3, [r4, #0]
 8006da8:	e00e      	b.n	8006dc8 <_malloc_r+0xa0>
 8006daa:	6822      	ldr	r2, [r4, #0]
 8006dac:	1b52      	subs	r2, r2, r5
 8006dae:	d41e      	bmi.n	8006dee <_malloc_r+0xc6>
 8006db0:	2a0b      	cmp	r2, #11
 8006db2:	d916      	bls.n	8006de2 <_malloc_r+0xba>
 8006db4:	1961      	adds	r1, r4, r5
 8006db6:	42a3      	cmp	r3, r4
 8006db8:	6025      	str	r5, [r4, #0]
 8006dba:	bf18      	it	ne
 8006dbc:	6059      	strne	r1, [r3, #4]
 8006dbe:	6863      	ldr	r3, [r4, #4]
 8006dc0:	bf08      	it	eq
 8006dc2:	6031      	streq	r1, [r6, #0]
 8006dc4:	5162      	str	r2, [r4, r5]
 8006dc6:	604b      	str	r3, [r1, #4]
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f104 060b 	add.w	r6, r4, #11
 8006dce:	f000 f9ed 	bl	80071ac <__malloc_unlock>
 8006dd2:	f026 0607 	bic.w	r6, r6, #7
 8006dd6:	1d23      	adds	r3, r4, #4
 8006dd8:	1af2      	subs	r2, r6, r3
 8006dda:	d0b6      	beq.n	8006d4a <_malloc_r+0x22>
 8006ddc:	1b9b      	subs	r3, r3, r6
 8006dde:	50a3      	str	r3, [r4, r2]
 8006de0:	e7b3      	b.n	8006d4a <_malloc_r+0x22>
 8006de2:	6862      	ldr	r2, [r4, #4]
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	bf0c      	ite	eq
 8006de8:	6032      	streq	r2, [r6, #0]
 8006dea:	605a      	strne	r2, [r3, #4]
 8006dec:	e7ec      	b.n	8006dc8 <_malloc_r+0xa0>
 8006dee:	4623      	mov	r3, r4
 8006df0:	6864      	ldr	r4, [r4, #4]
 8006df2:	e7b2      	b.n	8006d5a <_malloc_r+0x32>
 8006df4:	4634      	mov	r4, r6
 8006df6:	6876      	ldr	r6, [r6, #4]
 8006df8:	e7b9      	b.n	8006d6e <_malloc_r+0x46>
 8006dfa:	230c      	movs	r3, #12
 8006dfc:	603b      	str	r3, [r7, #0]
 8006dfe:	4638      	mov	r0, r7
 8006e00:	f000 f9d4 	bl	80071ac <__malloc_unlock>
 8006e04:	e7a1      	b.n	8006d4a <_malloc_r+0x22>
 8006e06:	6025      	str	r5, [r4, #0]
 8006e08:	e7de      	b.n	8006dc8 <_malloc_r+0xa0>
 8006e0a:	bf00      	nop
 8006e0c:	20003a88 	.word	0x20003a88

08006e10 <__ssputs_r>:
 8006e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	688e      	ldr	r6, [r1, #8]
 8006e16:	429e      	cmp	r6, r3
 8006e18:	4682      	mov	sl, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	4690      	mov	r8, r2
 8006e1e:	461f      	mov	r7, r3
 8006e20:	d838      	bhi.n	8006e94 <__ssputs_r+0x84>
 8006e22:	898a      	ldrh	r2, [r1, #12]
 8006e24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e28:	d032      	beq.n	8006e90 <__ssputs_r+0x80>
 8006e2a:	6825      	ldr	r5, [r4, #0]
 8006e2c:	6909      	ldr	r1, [r1, #16]
 8006e2e:	eba5 0901 	sub.w	r9, r5, r1
 8006e32:	6965      	ldr	r5, [r4, #20]
 8006e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	444b      	add	r3, r9
 8006e40:	106d      	asrs	r5, r5, #1
 8006e42:	429d      	cmp	r5, r3
 8006e44:	bf38      	it	cc
 8006e46:	461d      	movcc	r5, r3
 8006e48:	0553      	lsls	r3, r2, #21
 8006e4a:	d531      	bpl.n	8006eb0 <__ssputs_r+0xa0>
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	f7ff ff6b 	bl	8006d28 <_malloc_r>
 8006e52:	4606      	mov	r6, r0
 8006e54:	b950      	cbnz	r0, 8006e6c <__ssputs_r+0x5c>
 8006e56:	230c      	movs	r3, #12
 8006e58:	f8ca 3000 	str.w	r3, [sl]
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e62:	81a3      	strh	r3, [r4, #12]
 8006e64:	f04f 30ff 	mov.w	r0, #4294967295
 8006e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e6c:	6921      	ldr	r1, [r4, #16]
 8006e6e:	464a      	mov	r2, r9
 8006e70:	f7fe f82c 	bl	8004ecc <memcpy>
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7e:	81a3      	strh	r3, [r4, #12]
 8006e80:	6126      	str	r6, [r4, #16]
 8006e82:	6165      	str	r5, [r4, #20]
 8006e84:	444e      	add	r6, r9
 8006e86:	eba5 0509 	sub.w	r5, r5, r9
 8006e8a:	6026      	str	r6, [r4, #0]
 8006e8c:	60a5      	str	r5, [r4, #8]
 8006e8e:	463e      	mov	r6, r7
 8006e90:	42be      	cmp	r6, r7
 8006e92:	d900      	bls.n	8006e96 <__ssputs_r+0x86>
 8006e94:	463e      	mov	r6, r7
 8006e96:	6820      	ldr	r0, [r4, #0]
 8006e98:	4632      	mov	r2, r6
 8006e9a:	4641      	mov	r1, r8
 8006e9c:	f000 f966 	bl	800716c <memmove>
 8006ea0:	68a3      	ldr	r3, [r4, #8]
 8006ea2:	1b9b      	subs	r3, r3, r6
 8006ea4:	60a3      	str	r3, [r4, #8]
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	4433      	add	r3, r6
 8006eaa:	6023      	str	r3, [r4, #0]
 8006eac:	2000      	movs	r0, #0
 8006eae:	e7db      	b.n	8006e68 <__ssputs_r+0x58>
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	f000 f981 	bl	80071b8 <_realloc_r>
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d1e1      	bne.n	8006e80 <__ssputs_r+0x70>
 8006ebc:	6921      	ldr	r1, [r4, #16]
 8006ebe:	4650      	mov	r0, sl
 8006ec0:	f7ff fec6 	bl	8006c50 <_free_r>
 8006ec4:	e7c7      	b.n	8006e56 <__ssputs_r+0x46>
	...

08006ec8 <_svfiprintf_r>:
 8006ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	4698      	mov	r8, r3
 8006ece:	898b      	ldrh	r3, [r1, #12]
 8006ed0:	061b      	lsls	r3, r3, #24
 8006ed2:	b09d      	sub	sp, #116	; 0x74
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	4614      	mov	r4, r2
 8006eda:	d50e      	bpl.n	8006efa <_svfiprintf_r+0x32>
 8006edc:	690b      	ldr	r3, [r1, #16]
 8006ede:	b963      	cbnz	r3, 8006efa <_svfiprintf_r+0x32>
 8006ee0:	2140      	movs	r1, #64	; 0x40
 8006ee2:	f7ff ff21 	bl	8006d28 <_malloc_r>
 8006ee6:	6028      	str	r0, [r5, #0]
 8006ee8:	6128      	str	r0, [r5, #16]
 8006eea:	b920      	cbnz	r0, 8006ef6 <_svfiprintf_r+0x2e>
 8006eec:	230c      	movs	r3, #12
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef4:	e0d1      	b.n	800709a <_svfiprintf_r+0x1d2>
 8006ef6:	2340      	movs	r3, #64	; 0x40
 8006ef8:	616b      	str	r3, [r5, #20]
 8006efa:	2300      	movs	r3, #0
 8006efc:	9309      	str	r3, [sp, #36]	; 0x24
 8006efe:	2320      	movs	r3, #32
 8006f00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f08:	2330      	movs	r3, #48	; 0x30
 8006f0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070b4 <_svfiprintf_r+0x1ec>
 8006f0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f12:	f04f 0901 	mov.w	r9, #1
 8006f16:	4623      	mov	r3, r4
 8006f18:	469a      	mov	sl, r3
 8006f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f1e:	b10a      	cbz	r2, 8006f24 <_svfiprintf_r+0x5c>
 8006f20:	2a25      	cmp	r2, #37	; 0x25
 8006f22:	d1f9      	bne.n	8006f18 <_svfiprintf_r+0x50>
 8006f24:	ebba 0b04 	subs.w	fp, sl, r4
 8006f28:	d00b      	beq.n	8006f42 <_svfiprintf_r+0x7a>
 8006f2a:	465b      	mov	r3, fp
 8006f2c:	4622      	mov	r2, r4
 8006f2e:	4629      	mov	r1, r5
 8006f30:	4638      	mov	r0, r7
 8006f32:	f7ff ff6d 	bl	8006e10 <__ssputs_r>
 8006f36:	3001      	adds	r0, #1
 8006f38:	f000 80aa 	beq.w	8007090 <_svfiprintf_r+0x1c8>
 8006f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f3e:	445a      	add	r2, fp
 8006f40:	9209      	str	r2, [sp, #36]	; 0x24
 8006f42:	f89a 3000 	ldrb.w	r3, [sl]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 80a2 	beq.w	8007090 <_svfiprintf_r+0x1c8>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f56:	f10a 0a01 	add.w	sl, sl, #1
 8006f5a:	9304      	str	r3, [sp, #16]
 8006f5c:	9307      	str	r3, [sp, #28]
 8006f5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f62:	931a      	str	r3, [sp, #104]	; 0x68
 8006f64:	4654      	mov	r4, sl
 8006f66:	2205      	movs	r2, #5
 8006f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6c:	4851      	ldr	r0, [pc, #324]	; (80070b4 <_svfiprintf_r+0x1ec>)
 8006f6e:	f7f9 f937 	bl	80001e0 <memchr>
 8006f72:	9a04      	ldr	r2, [sp, #16]
 8006f74:	b9d8      	cbnz	r0, 8006fae <_svfiprintf_r+0xe6>
 8006f76:	06d0      	lsls	r0, r2, #27
 8006f78:	bf44      	itt	mi
 8006f7a:	2320      	movmi	r3, #32
 8006f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f80:	0711      	lsls	r1, r2, #28
 8006f82:	bf44      	itt	mi
 8006f84:	232b      	movmi	r3, #43	; 0x2b
 8006f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f90:	d015      	beq.n	8006fbe <_svfiprintf_r+0xf6>
 8006f92:	9a07      	ldr	r2, [sp, #28]
 8006f94:	4654      	mov	r4, sl
 8006f96:	2000      	movs	r0, #0
 8006f98:	f04f 0c0a 	mov.w	ip, #10
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fa2:	3b30      	subs	r3, #48	; 0x30
 8006fa4:	2b09      	cmp	r3, #9
 8006fa6:	d94e      	bls.n	8007046 <_svfiprintf_r+0x17e>
 8006fa8:	b1b0      	cbz	r0, 8006fd8 <_svfiprintf_r+0x110>
 8006faa:	9207      	str	r2, [sp, #28]
 8006fac:	e014      	b.n	8006fd8 <_svfiprintf_r+0x110>
 8006fae:	eba0 0308 	sub.w	r3, r0, r8
 8006fb2:	fa09 f303 	lsl.w	r3, r9, r3
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	46a2      	mov	sl, r4
 8006fbc:	e7d2      	b.n	8006f64 <_svfiprintf_r+0x9c>
 8006fbe:	9b03      	ldr	r3, [sp, #12]
 8006fc0:	1d19      	adds	r1, r3, #4
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	9103      	str	r1, [sp, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bfbb      	ittet	lt
 8006fca:	425b      	neglt	r3, r3
 8006fcc:	f042 0202 	orrlt.w	r2, r2, #2
 8006fd0:	9307      	strge	r3, [sp, #28]
 8006fd2:	9307      	strlt	r3, [sp, #28]
 8006fd4:	bfb8      	it	lt
 8006fd6:	9204      	strlt	r2, [sp, #16]
 8006fd8:	7823      	ldrb	r3, [r4, #0]
 8006fda:	2b2e      	cmp	r3, #46	; 0x2e
 8006fdc:	d10c      	bne.n	8006ff8 <_svfiprintf_r+0x130>
 8006fde:	7863      	ldrb	r3, [r4, #1]
 8006fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe2:	d135      	bne.n	8007050 <_svfiprintf_r+0x188>
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	1d1a      	adds	r2, r3, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	9203      	str	r2, [sp, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bfb8      	it	lt
 8006ff0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ff4:	3402      	adds	r4, #2
 8006ff6:	9305      	str	r3, [sp, #20]
 8006ff8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070c4 <_svfiprintf_r+0x1fc>
 8006ffc:	7821      	ldrb	r1, [r4, #0]
 8006ffe:	2203      	movs	r2, #3
 8007000:	4650      	mov	r0, sl
 8007002:	f7f9 f8ed 	bl	80001e0 <memchr>
 8007006:	b140      	cbz	r0, 800701a <_svfiprintf_r+0x152>
 8007008:	2340      	movs	r3, #64	; 0x40
 800700a:	eba0 000a 	sub.w	r0, r0, sl
 800700e:	fa03 f000 	lsl.w	r0, r3, r0
 8007012:	9b04      	ldr	r3, [sp, #16]
 8007014:	4303      	orrs	r3, r0
 8007016:	3401      	adds	r4, #1
 8007018:	9304      	str	r3, [sp, #16]
 800701a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701e:	4826      	ldr	r0, [pc, #152]	; (80070b8 <_svfiprintf_r+0x1f0>)
 8007020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007024:	2206      	movs	r2, #6
 8007026:	f7f9 f8db 	bl	80001e0 <memchr>
 800702a:	2800      	cmp	r0, #0
 800702c:	d038      	beq.n	80070a0 <_svfiprintf_r+0x1d8>
 800702e:	4b23      	ldr	r3, [pc, #140]	; (80070bc <_svfiprintf_r+0x1f4>)
 8007030:	bb1b      	cbnz	r3, 800707a <_svfiprintf_r+0x1b2>
 8007032:	9b03      	ldr	r3, [sp, #12]
 8007034:	3307      	adds	r3, #7
 8007036:	f023 0307 	bic.w	r3, r3, #7
 800703a:	3308      	adds	r3, #8
 800703c:	9303      	str	r3, [sp, #12]
 800703e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007040:	4433      	add	r3, r6
 8007042:	9309      	str	r3, [sp, #36]	; 0x24
 8007044:	e767      	b.n	8006f16 <_svfiprintf_r+0x4e>
 8007046:	fb0c 3202 	mla	r2, ip, r2, r3
 800704a:	460c      	mov	r4, r1
 800704c:	2001      	movs	r0, #1
 800704e:	e7a5      	b.n	8006f9c <_svfiprintf_r+0xd4>
 8007050:	2300      	movs	r3, #0
 8007052:	3401      	adds	r4, #1
 8007054:	9305      	str	r3, [sp, #20]
 8007056:	4619      	mov	r1, r3
 8007058:	f04f 0c0a 	mov.w	ip, #10
 800705c:	4620      	mov	r0, r4
 800705e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007062:	3a30      	subs	r2, #48	; 0x30
 8007064:	2a09      	cmp	r2, #9
 8007066:	d903      	bls.n	8007070 <_svfiprintf_r+0x1a8>
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0c5      	beq.n	8006ff8 <_svfiprintf_r+0x130>
 800706c:	9105      	str	r1, [sp, #20]
 800706e:	e7c3      	b.n	8006ff8 <_svfiprintf_r+0x130>
 8007070:	fb0c 2101 	mla	r1, ip, r1, r2
 8007074:	4604      	mov	r4, r0
 8007076:	2301      	movs	r3, #1
 8007078:	e7f0      	b.n	800705c <_svfiprintf_r+0x194>
 800707a:	ab03      	add	r3, sp, #12
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	462a      	mov	r2, r5
 8007080:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <_svfiprintf_r+0x1f8>)
 8007082:	a904      	add	r1, sp, #16
 8007084:	4638      	mov	r0, r7
 8007086:	f7fd ffd7 	bl	8005038 <_printf_float>
 800708a:	1c42      	adds	r2, r0, #1
 800708c:	4606      	mov	r6, r0
 800708e:	d1d6      	bne.n	800703e <_svfiprintf_r+0x176>
 8007090:	89ab      	ldrh	r3, [r5, #12]
 8007092:	065b      	lsls	r3, r3, #25
 8007094:	f53f af2c 	bmi.w	8006ef0 <_svfiprintf_r+0x28>
 8007098:	9809      	ldr	r0, [sp, #36]	; 0x24
 800709a:	b01d      	add	sp, #116	; 0x74
 800709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a0:	ab03      	add	r3, sp, #12
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	462a      	mov	r2, r5
 80070a6:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <_svfiprintf_r+0x1f8>)
 80070a8:	a904      	add	r1, sp, #16
 80070aa:	4638      	mov	r0, r7
 80070ac:	f7fe fa68 	bl	8005580 <_printf_i>
 80070b0:	e7eb      	b.n	800708a <_svfiprintf_r+0x1c2>
 80070b2:	bf00      	nop
 80070b4:	0800a69c 	.word	0x0800a69c
 80070b8:	0800a6a6 	.word	0x0800a6a6
 80070bc:	08005039 	.word	0x08005039
 80070c0:	08006e11 	.word	0x08006e11
 80070c4:	0800a6a2 	.word	0x0800a6a2

080070c8 <_sbrk_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d06      	ldr	r5, [pc, #24]	; (80070e4 <_sbrk_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	f7fa fb06 	bl	80016e4 <_sbrk>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_sbrk_r+0x1a>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_sbrk_r+0x1a>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20003a90 	.word	0x20003a90

080070e8 <__assert_func>:
 80070e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070ea:	4614      	mov	r4, r2
 80070ec:	461a      	mov	r2, r3
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <__assert_func+0x2c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4605      	mov	r5, r0
 80070f4:	68d8      	ldr	r0, [r3, #12]
 80070f6:	b14c      	cbz	r4, 800710c <__assert_func+0x24>
 80070f8:	4b07      	ldr	r3, [pc, #28]	; (8007118 <__assert_func+0x30>)
 80070fa:	9100      	str	r1, [sp, #0]
 80070fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007100:	4906      	ldr	r1, [pc, #24]	; (800711c <__assert_func+0x34>)
 8007102:	462b      	mov	r3, r5
 8007104:	f000 f80e 	bl	8007124 <fiprintf>
 8007108:	f000 faac 	bl	8007664 <abort>
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <__assert_func+0x38>)
 800710e:	461c      	mov	r4, r3
 8007110:	e7f3      	b.n	80070fa <__assert_func+0x12>
 8007112:	bf00      	nop
 8007114:	2000001c 	.word	0x2000001c
 8007118:	0800a6ad 	.word	0x0800a6ad
 800711c:	0800a6ba 	.word	0x0800a6ba
 8007120:	0800a6e8 	.word	0x0800a6e8

08007124 <fiprintf>:
 8007124:	b40e      	push	{r1, r2, r3}
 8007126:	b503      	push	{r0, r1, lr}
 8007128:	4601      	mov	r1, r0
 800712a:	ab03      	add	r3, sp, #12
 800712c:	4805      	ldr	r0, [pc, #20]	; (8007144 <fiprintf+0x20>)
 800712e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007132:	6800      	ldr	r0, [r0, #0]
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	f000 f897 	bl	8007268 <_vfiprintf_r>
 800713a:	b002      	add	sp, #8
 800713c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007140:	b003      	add	sp, #12
 8007142:	4770      	bx	lr
 8007144:	2000001c 	.word	0x2000001c

08007148 <__ascii_mbtowc>:
 8007148:	b082      	sub	sp, #8
 800714a:	b901      	cbnz	r1, 800714e <__ascii_mbtowc+0x6>
 800714c:	a901      	add	r1, sp, #4
 800714e:	b142      	cbz	r2, 8007162 <__ascii_mbtowc+0x1a>
 8007150:	b14b      	cbz	r3, 8007166 <__ascii_mbtowc+0x1e>
 8007152:	7813      	ldrb	r3, [r2, #0]
 8007154:	600b      	str	r3, [r1, #0]
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	1e10      	subs	r0, r2, #0
 800715a:	bf18      	it	ne
 800715c:	2001      	movne	r0, #1
 800715e:	b002      	add	sp, #8
 8007160:	4770      	bx	lr
 8007162:	4610      	mov	r0, r2
 8007164:	e7fb      	b.n	800715e <__ascii_mbtowc+0x16>
 8007166:	f06f 0001 	mvn.w	r0, #1
 800716a:	e7f8      	b.n	800715e <__ascii_mbtowc+0x16>

0800716c <memmove>:
 800716c:	4288      	cmp	r0, r1
 800716e:	b510      	push	{r4, lr}
 8007170:	eb01 0402 	add.w	r4, r1, r2
 8007174:	d902      	bls.n	800717c <memmove+0x10>
 8007176:	4284      	cmp	r4, r0
 8007178:	4623      	mov	r3, r4
 800717a:	d807      	bhi.n	800718c <memmove+0x20>
 800717c:	1e43      	subs	r3, r0, #1
 800717e:	42a1      	cmp	r1, r4
 8007180:	d008      	beq.n	8007194 <memmove+0x28>
 8007182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800718a:	e7f8      	b.n	800717e <memmove+0x12>
 800718c:	4402      	add	r2, r0
 800718e:	4601      	mov	r1, r0
 8007190:	428a      	cmp	r2, r1
 8007192:	d100      	bne.n	8007196 <memmove+0x2a>
 8007194:	bd10      	pop	{r4, pc}
 8007196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800719a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800719e:	e7f7      	b.n	8007190 <memmove+0x24>

080071a0 <__malloc_lock>:
 80071a0:	4801      	ldr	r0, [pc, #4]	; (80071a8 <__malloc_lock+0x8>)
 80071a2:	f000 bc1f 	b.w	80079e4 <__retarget_lock_acquire_recursive>
 80071a6:	bf00      	nop
 80071a8:	20003a94 	.word	0x20003a94

080071ac <__malloc_unlock>:
 80071ac:	4801      	ldr	r0, [pc, #4]	; (80071b4 <__malloc_unlock+0x8>)
 80071ae:	f000 bc1a 	b.w	80079e6 <__retarget_lock_release_recursive>
 80071b2:	bf00      	nop
 80071b4:	20003a94 	.word	0x20003a94

080071b8 <_realloc_r>:
 80071b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071bc:	4680      	mov	r8, r0
 80071be:	4614      	mov	r4, r2
 80071c0:	460e      	mov	r6, r1
 80071c2:	b921      	cbnz	r1, 80071ce <_realloc_r+0x16>
 80071c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071c8:	4611      	mov	r1, r2
 80071ca:	f7ff bdad 	b.w	8006d28 <_malloc_r>
 80071ce:	b92a      	cbnz	r2, 80071dc <_realloc_r+0x24>
 80071d0:	f7ff fd3e 	bl	8006c50 <_free_r>
 80071d4:	4625      	mov	r5, r4
 80071d6:	4628      	mov	r0, r5
 80071d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071dc:	f000 fc6a 	bl	8007ab4 <_malloc_usable_size_r>
 80071e0:	4284      	cmp	r4, r0
 80071e2:	4607      	mov	r7, r0
 80071e4:	d802      	bhi.n	80071ec <_realloc_r+0x34>
 80071e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071ea:	d812      	bhi.n	8007212 <_realloc_r+0x5a>
 80071ec:	4621      	mov	r1, r4
 80071ee:	4640      	mov	r0, r8
 80071f0:	f7ff fd9a 	bl	8006d28 <_malloc_r>
 80071f4:	4605      	mov	r5, r0
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d0ed      	beq.n	80071d6 <_realloc_r+0x1e>
 80071fa:	42bc      	cmp	r4, r7
 80071fc:	4622      	mov	r2, r4
 80071fe:	4631      	mov	r1, r6
 8007200:	bf28      	it	cs
 8007202:	463a      	movcs	r2, r7
 8007204:	f7fd fe62 	bl	8004ecc <memcpy>
 8007208:	4631      	mov	r1, r6
 800720a:	4640      	mov	r0, r8
 800720c:	f7ff fd20 	bl	8006c50 <_free_r>
 8007210:	e7e1      	b.n	80071d6 <_realloc_r+0x1e>
 8007212:	4635      	mov	r5, r6
 8007214:	e7df      	b.n	80071d6 <_realloc_r+0x1e>

08007216 <__sfputc_r>:
 8007216:	6893      	ldr	r3, [r2, #8]
 8007218:	3b01      	subs	r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	b410      	push	{r4}
 800721e:	6093      	str	r3, [r2, #8]
 8007220:	da08      	bge.n	8007234 <__sfputc_r+0x1e>
 8007222:	6994      	ldr	r4, [r2, #24]
 8007224:	42a3      	cmp	r3, r4
 8007226:	db01      	blt.n	800722c <__sfputc_r+0x16>
 8007228:	290a      	cmp	r1, #10
 800722a:	d103      	bne.n	8007234 <__sfputc_r+0x1e>
 800722c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007230:	f000 b94a 	b.w	80074c8 <__swbuf_r>
 8007234:	6813      	ldr	r3, [r2, #0]
 8007236:	1c58      	adds	r0, r3, #1
 8007238:	6010      	str	r0, [r2, #0]
 800723a:	7019      	strb	r1, [r3, #0]
 800723c:	4608      	mov	r0, r1
 800723e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007242:	4770      	bx	lr

08007244 <__sfputs_r>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	4606      	mov	r6, r0
 8007248:	460f      	mov	r7, r1
 800724a:	4614      	mov	r4, r2
 800724c:	18d5      	adds	r5, r2, r3
 800724e:	42ac      	cmp	r4, r5
 8007250:	d101      	bne.n	8007256 <__sfputs_r+0x12>
 8007252:	2000      	movs	r0, #0
 8007254:	e007      	b.n	8007266 <__sfputs_r+0x22>
 8007256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800725a:	463a      	mov	r2, r7
 800725c:	4630      	mov	r0, r6
 800725e:	f7ff ffda 	bl	8007216 <__sfputc_r>
 8007262:	1c43      	adds	r3, r0, #1
 8007264:	d1f3      	bne.n	800724e <__sfputs_r+0xa>
 8007266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007268 <_vfiprintf_r>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	460d      	mov	r5, r1
 800726e:	b09d      	sub	sp, #116	; 0x74
 8007270:	4614      	mov	r4, r2
 8007272:	4698      	mov	r8, r3
 8007274:	4606      	mov	r6, r0
 8007276:	b118      	cbz	r0, 8007280 <_vfiprintf_r+0x18>
 8007278:	6983      	ldr	r3, [r0, #24]
 800727a:	b90b      	cbnz	r3, 8007280 <_vfiprintf_r+0x18>
 800727c:	f000 fb14 	bl	80078a8 <__sinit>
 8007280:	4b89      	ldr	r3, [pc, #548]	; (80074a8 <_vfiprintf_r+0x240>)
 8007282:	429d      	cmp	r5, r3
 8007284:	d11b      	bne.n	80072be <_vfiprintf_r+0x56>
 8007286:	6875      	ldr	r5, [r6, #4]
 8007288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800728a:	07d9      	lsls	r1, r3, #31
 800728c:	d405      	bmi.n	800729a <_vfiprintf_r+0x32>
 800728e:	89ab      	ldrh	r3, [r5, #12]
 8007290:	059a      	lsls	r2, r3, #22
 8007292:	d402      	bmi.n	800729a <_vfiprintf_r+0x32>
 8007294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007296:	f000 fba5 	bl	80079e4 <__retarget_lock_acquire_recursive>
 800729a:	89ab      	ldrh	r3, [r5, #12]
 800729c:	071b      	lsls	r3, r3, #28
 800729e:	d501      	bpl.n	80072a4 <_vfiprintf_r+0x3c>
 80072a0:	692b      	ldr	r3, [r5, #16]
 80072a2:	b9eb      	cbnz	r3, 80072e0 <_vfiprintf_r+0x78>
 80072a4:	4629      	mov	r1, r5
 80072a6:	4630      	mov	r0, r6
 80072a8:	f000 f96e 	bl	8007588 <__swsetup_r>
 80072ac:	b1c0      	cbz	r0, 80072e0 <_vfiprintf_r+0x78>
 80072ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072b0:	07dc      	lsls	r4, r3, #31
 80072b2:	d50e      	bpl.n	80072d2 <_vfiprintf_r+0x6a>
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	b01d      	add	sp, #116	; 0x74
 80072ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072be:	4b7b      	ldr	r3, [pc, #492]	; (80074ac <_vfiprintf_r+0x244>)
 80072c0:	429d      	cmp	r5, r3
 80072c2:	d101      	bne.n	80072c8 <_vfiprintf_r+0x60>
 80072c4:	68b5      	ldr	r5, [r6, #8]
 80072c6:	e7df      	b.n	8007288 <_vfiprintf_r+0x20>
 80072c8:	4b79      	ldr	r3, [pc, #484]	; (80074b0 <_vfiprintf_r+0x248>)
 80072ca:	429d      	cmp	r5, r3
 80072cc:	bf08      	it	eq
 80072ce:	68f5      	ldreq	r5, [r6, #12]
 80072d0:	e7da      	b.n	8007288 <_vfiprintf_r+0x20>
 80072d2:	89ab      	ldrh	r3, [r5, #12]
 80072d4:	0598      	lsls	r0, r3, #22
 80072d6:	d4ed      	bmi.n	80072b4 <_vfiprintf_r+0x4c>
 80072d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072da:	f000 fb84 	bl	80079e6 <__retarget_lock_release_recursive>
 80072de:	e7e9      	b.n	80072b4 <_vfiprintf_r+0x4c>
 80072e0:	2300      	movs	r3, #0
 80072e2:	9309      	str	r3, [sp, #36]	; 0x24
 80072e4:	2320      	movs	r3, #32
 80072e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ee:	2330      	movs	r3, #48	; 0x30
 80072f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074b4 <_vfiprintf_r+0x24c>
 80072f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072f8:	f04f 0901 	mov.w	r9, #1
 80072fc:	4623      	mov	r3, r4
 80072fe:	469a      	mov	sl, r3
 8007300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007304:	b10a      	cbz	r2, 800730a <_vfiprintf_r+0xa2>
 8007306:	2a25      	cmp	r2, #37	; 0x25
 8007308:	d1f9      	bne.n	80072fe <_vfiprintf_r+0x96>
 800730a:	ebba 0b04 	subs.w	fp, sl, r4
 800730e:	d00b      	beq.n	8007328 <_vfiprintf_r+0xc0>
 8007310:	465b      	mov	r3, fp
 8007312:	4622      	mov	r2, r4
 8007314:	4629      	mov	r1, r5
 8007316:	4630      	mov	r0, r6
 8007318:	f7ff ff94 	bl	8007244 <__sfputs_r>
 800731c:	3001      	adds	r0, #1
 800731e:	f000 80aa 	beq.w	8007476 <_vfiprintf_r+0x20e>
 8007322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007324:	445a      	add	r2, fp
 8007326:	9209      	str	r2, [sp, #36]	; 0x24
 8007328:	f89a 3000 	ldrb.w	r3, [sl]
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80a2 	beq.w	8007476 <_vfiprintf_r+0x20e>
 8007332:	2300      	movs	r3, #0
 8007334:	f04f 32ff 	mov.w	r2, #4294967295
 8007338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800733c:	f10a 0a01 	add.w	sl, sl, #1
 8007340:	9304      	str	r3, [sp, #16]
 8007342:	9307      	str	r3, [sp, #28]
 8007344:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007348:	931a      	str	r3, [sp, #104]	; 0x68
 800734a:	4654      	mov	r4, sl
 800734c:	2205      	movs	r2, #5
 800734e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007352:	4858      	ldr	r0, [pc, #352]	; (80074b4 <_vfiprintf_r+0x24c>)
 8007354:	f7f8 ff44 	bl	80001e0 <memchr>
 8007358:	9a04      	ldr	r2, [sp, #16]
 800735a:	b9d8      	cbnz	r0, 8007394 <_vfiprintf_r+0x12c>
 800735c:	06d1      	lsls	r1, r2, #27
 800735e:	bf44      	itt	mi
 8007360:	2320      	movmi	r3, #32
 8007362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007366:	0713      	lsls	r3, r2, #28
 8007368:	bf44      	itt	mi
 800736a:	232b      	movmi	r3, #43	; 0x2b
 800736c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007370:	f89a 3000 	ldrb.w	r3, [sl]
 8007374:	2b2a      	cmp	r3, #42	; 0x2a
 8007376:	d015      	beq.n	80073a4 <_vfiprintf_r+0x13c>
 8007378:	9a07      	ldr	r2, [sp, #28]
 800737a:	4654      	mov	r4, sl
 800737c:	2000      	movs	r0, #0
 800737e:	f04f 0c0a 	mov.w	ip, #10
 8007382:	4621      	mov	r1, r4
 8007384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007388:	3b30      	subs	r3, #48	; 0x30
 800738a:	2b09      	cmp	r3, #9
 800738c:	d94e      	bls.n	800742c <_vfiprintf_r+0x1c4>
 800738e:	b1b0      	cbz	r0, 80073be <_vfiprintf_r+0x156>
 8007390:	9207      	str	r2, [sp, #28]
 8007392:	e014      	b.n	80073be <_vfiprintf_r+0x156>
 8007394:	eba0 0308 	sub.w	r3, r0, r8
 8007398:	fa09 f303 	lsl.w	r3, r9, r3
 800739c:	4313      	orrs	r3, r2
 800739e:	9304      	str	r3, [sp, #16]
 80073a0:	46a2      	mov	sl, r4
 80073a2:	e7d2      	b.n	800734a <_vfiprintf_r+0xe2>
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	1d19      	adds	r1, r3, #4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	9103      	str	r1, [sp, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	bfbb      	ittet	lt
 80073b0:	425b      	neglt	r3, r3
 80073b2:	f042 0202 	orrlt.w	r2, r2, #2
 80073b6:	9307      	strge	r3, [sp, #28]
 80073b8:	9307      	strlt	r3, [sp, #28]
 80073ba:	bfb8      	it	lt
 80073bc:	9204      	strlt	r2, [sp, #16]
 80073be:	7823      	ldrb	r3, [r4, #0]
 80073c0:	2b2e      	cmp	r3, #46	; 0x2e
 80073c2:	d10c      	bne.n	80073de <_vfiprintf_r+0x176>
 80073c4:	7863      	ldrb	r3, [r4, #1]
 80073c6:	2b2a      	cmp	r3, #42	; 0x2a
 80073c8:	d135      	bne.n	8007436 <_vfiprintf_r+0x1ce>
 80073ca:	9b03      	ldr	r3, [sp, #12]
 80073cc:	1d1a      	adds	r2, r3, #4
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	9203      	str	r2, [sp, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	bfb8      	it	lt
 80073d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80073da:	3402      	adds	r4, #2
 80073dc:	9305      	str	r3, [sp, #20]
 80073de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074c4 <_vfiprintf_r+0x25c>
 80073e2:	7821      	ldrb	r1, [r4, #0]
 80073e4:	2203      	movs	r2, #3
 80073e6:	4650      	mov	r0, sl
 80073e8:	f7f8 fefa 	bl	80001e0 <memchr>
 80073ec:	b140      	cbz	r0, 8007400 <_vfiprintf_r+0x198>
 80073ee:	2340      	movs	r3, #64	; 0x40
 80073f0:	eba0 000a 	sub.w	r0, r0, sl
 80073f4:	fa03 f000 	lsl.w	r0, r3, r0
 80073f8:	9b04      	ldr	r3, [sp, #16]
 80073fa:	4303      	orrs	r3, r0
 80073fc:	3401      	adds	r4, #1
 80073fe:	9304      	str	r3, [sp, #16]
 8007400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007404:	482c      	ldr	r0, [pc, #176]	; (80074b8 <_vfiprintf_r+0x250>)
 8007406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800740a:	2206      	movs	r2, #6
 800740c:	f7f8 fee8 	bl	80001e0 <memchr>
 8007410:	2800      	cmp	r0, #0
 8007412:	d03f      	beq.n	8007494 <_vfiprintf_r+0x22c>
 8007414:	4b29      	ldr	r3, [pc, #164]	; (80074bc <_vfiprintf_r+0x254>)
 8007416:	bb1b      	cbnz	r3, 8007460 <_vfiprintf_r+0x1f8>
 8007418:	9b03      	ldr	r3, [sp, #12]
 800741a:	3307      	adds	r3, #7
 800741c:	f023 0307 	bic.w	r3, r3, #7
 8007420:	3308      	adds	r3, #8
 8007422:	9303      	str	r3, [sp, #12]
 8007424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007426:	443b      	add	r3, r7
 8007428:	9309      	str	r3, [sp, #36]	; 0x24
 800742a:	e767      	b.n	80072fc <_vfiprintf_r+0x94>
 800742c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007430:	460c      	mov	r4, r1
 8007432:	2001      	movs	r0, #1
 8007434:	e7a5      	b.n	8007382 <_vfiprintf_r+0x11a>
 8007436:	2300      	movs	r3, #0
 8007438:	3401      	adds	r4, #1
 800743a:	9305      	str	r3, [sp, #20]
 800743c:	4619      	mov	r1, r3
 800743e:	f04f 0c0a 	mov.w	ip, #10
 8007442:	4620      	mov	r0, r4
 8007444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007448:	3a30      	subs	r2, #48	; 0x30
 800744a:	2a09      	cmp	r2, #9
 800744c:	d903      	bls.n	8007456 <_vfiprintf_r+0x1ee>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0c5      	beq.n	80073de <_vfiprintf_r+0x176>
 8007452:	9105      	str	r1, [sp, #20]
 8007454:	e7c3      	b.n	80073de <_vfiprintf_r+0x176>
 8007456:	fb0c 2101 	mla	r1, ip, r1, r2
 800745a:	4604      	mov	r4, r0
 800745c:	2301      	movs	r3, #1
 800745e:	e7f0      	b.n	8007442 <_vfiprintf_r+0x1da>
 8007460:	ab03      	add	r3, sp, #12
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	462a      	mov	r2, r5
 8007466:	4b16      	ldr	r3, [pc, #88]	; (80074c0 <_vfiprintf_r+0x258>)
 8007468:	a904      	add	r1, sp, #16
 800746a:	4630      	mov	r0, r6
 800746c:	f7fd fde4 	bl	8005038 <_printf_float>
 8007470:	4607      	mov	r7, r0
 8007472:	1c78      	adds	r0, r7, #1
 8007474:	d1d6      	bne.n	8007424 <_vfiprintf_r+0x1bc>
 8007476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007478:	07d9      	lsls	r1, r3, #31
 800747a:	d405      	bmi.n	8007488 <_vfiprintf_r+0x220>
 800747c:	89ab      	ldrh	r3, [r5, #12]
 800747e:	059a      	lsls	r2, r3, #22
 8007480:	d402      	bmi.n	8007488 <_vfiprintf_r+0x220>
 8007482:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007484:	f000 faaf 	bl	80079e6 <__retarget_lock_release_recursive>
 8007488:	89ab      	ldrh	r3, [r5, #12]
 800748a:	065b      	lsls	r3, r3, #25
 800748c:	f53f af12 	bmi.w	80072b4 <_vfiprintf_r+0x4c>
 8007490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007492:	e711      	b.n	80072b8 <_vfiprintf_r+0x50>
 8007494:	ab03      	add	r3, sp, #12
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	462a      	mov	r2, r5
 800749a:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <_vfiprintf_r+0x258>)
 800749c:	a904      	add	r1, sp, #16
 800749e:	4630      	mov	r0, r6
 80074a0:	f7fe f86e 	bl	8005580 <_printf_i>
 80074a4:	e7e4      	b.n	8007470 <_vfiprintf_r+0x208>
 80074a6:	bf00      	nop
 80074a8:	0800a814 	.word	0x0800a814
 80074ac:	0800a834 	.word	0x0800a834
 80074b0:	0800a7f4 	.word	0x0800a7f4
 80074b4:	0800a69c 	.word	0x0800a69c
 80074b8:	0800a6a6 	.word	0x0800a6a6
 80074bc:	08005039 	.word	0x08005039
 80074c0:	08007245 	.word	0x08007245
 80074c4:	0800a6a2 	.word	0x0800a6a2

080074c8 <__swbuf_r>:
 80074c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ca:	460e      	mov	r6, r1
 80074cc:	4614      	mov	r4, r2
 80074ce:	4605      	mov	r5, r0
 80074d0:	b118      	cbz	r0, 80074da <__swbuf_r+0x12>
 80074d2:	6983      	ldr	r3, [r0, #24]
 80074d4:	b90b      	cbnz	r3, 80074da <__swbuf_r+0x12>
 80074d6:	f000 f9e7 	bl	80078a8 <__sinit>
 80074da:	4b21      	ldr	r3, [pc, #132]	; (8007560 <__swbuf_r+0x98>)
 80074dc:	429c      	cmp	r4, r3
 80074de:	d12b      	bne.n	8007538 <__swbuf_r+0x70>
 80074e0:	686c      	ldr	r4, [r5, #4]
 80074e2:	69a3      	ldr	r3, [r4, #24]
 80074e4:	60a3      	str	r3, [r4, #8]
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	071a      	lsls	r2, r3, #28
 80074ea:	d52f      	bpl.n	800754c <__swbuf_r+0x84>
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	b36b      	cbz	r3, 800754c <__swbuf_r+0x84>
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	6820      	ldr	r0, [r4, #0]
 80074f4:	1ac0      	subs	r0, r0, r3
 80074f6:	6963      	ldr	r3, [r4, #20]
 80074f8:	b2f6      	uxtb	r6, r6
 80074fa:	4283      	cmp	r3, r0
 80074fc:	4637      	mov	r7, r6
 80074fe:	dc04      	bgt.n	800750a <__swbuf_r+0x42>
 8007500:	4621      	mov	r1, r4
 8007502:	4628      	mov	r0, r5
 8007504:	f000 f93c 	bl	8007780 <_fflush_r>
 8007508:	bb30      	cbnz	r0, 8007558 <__swbuf_r+0x90>
 800750a:	68a3      	ldr	r3, [r4, #8]
 800750c:	3b01      	subs	r3, #1
 800750e:	60a3      	str	r3, [r4, #8]
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	6022      	str	r2, [r4, #0]
 8007516:	701e      	strb	r6, [r3, #0]
 8007518:	6963      	ldr	r3, [r4, #20]
 800751a:	3001      	adds	r0, #1
 800751c:	4283      	cmp	r3, r0
 800751e:	d004      	beq.n	800752a <__swbuf_r+0x62>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	07db      	lsls	r3, r3, #31
 8007524:	d506      	bpl.n	8007534 <__swbuf_r+0x6c>
 8007526:	2e0a      	cmp	r6, #10
 8007528:	d104      	bne.n	8007534 <__swbuf_r+0x6c>
 800752a:	4621      	mov	r1, r4
 800752c:	4628      	mov	r0, r5
 800752e:	f000 f927 	bl	8007780 <_fflush_r>
 8007532:	b988      	cbnz	r0, 8007558 <__swbuf_r+0x90>
 8007534:	4638      	mov	r0, r7
 8007536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007538:	4b0a      	ldr	r3, [pc, #40]	; (8007564 <__swbuf_r+0x9c>)
 800753a:	429c      	cmp	r4, r3
 800753c:	d101      	bne.n	8007542 <__swbuf_r+0x7a>
 800753e:	68ac      	ldr	r4, [r5, #8]
 8007540:	e7cf      	b.n	80074e2 <__swbuf_r+0x1a>
 8007542:	4b09      	ldr	r3, [pc, #36]	; (8007568 <__swbuf_r+0xa0>)
 8007544:	429c      	cmp	r4, r3
 8007546:	bf08      	it	eq
 8007548:	68ec      	ldreq	r4, [r5, #12]
 800754a:	e7ca      	b.n	80074e2 <__swbuf_r+0x1a>
 800754c:	4621      	mov	r1, r4
 800754e:	4628      	mov	r0, r5
 8007550:	f000 f81a 	bl	8007588 <__swsetup_r>
 8007554:	2800      	cmp	r0, #0
 8007556:	d0cb      	beq.n	80074f0 <__swbuf_r+0x28>
 8007558:	f04f 37ff 	mov.w	r7, #4294967295
 800755c:	e7ea      	b.n	8007534 <__swbuf_r+0x6c>
 800755e:	bf00      	nop
 8007560:	0800a814 	.word	0x0800a814
 8007564:	0800a834 	.word	0x0800a834
 8007568:	0800a7f4 	.word	0x0800a7f4

0800756c <__ascii_wctomb>:
 800756c:	b149      	cbz	r1, 8007582 <__ascii_wctomb+0x16>
 800756e:	2aff      	cmp	r2, #255	; 0xff
 8007570:	bf85      	ittet	hi
 8007572:	238a      	movhi	r3, #138	; 0x8a
 8007574:	6003      	strhi	r3, [r0, #0]
 8007576:	700a      	strbls	r2, [r1, #0]
 8007578:	f04f 30ff 	movhi.w	r0, #4294967295
 800757c:	bf98      	it	ls
 800757e:	2001      	movls	r0, #1
 8007580:	4770      	bx	lr
 8007582:	4608      	mov	r0, r1
 8007584:	4770      	bx	lr
	...

08007588 <__swsetup_r>:
 8007588:	4b32      	ldr	r3, [pc, #200]	; (8007654 <__swsetup_r+0xcc>)
 800758a:	b570      	push	{r4, r5, r6, lr}
 800758c:	681d      	ldr	r5, [r3, #0]
 800758e:	4606      	mov	r6, r0
 8007590:	460c      	mov	r4, r1
 8007592:	b125      	cbz	r5, 800759e <__swsetup_r+0x16>
 8007594:	69ab      	ldr	r3, [r5, #24]
 8007596:	b913      	cbnz	r3, 800759e <__swsetup_r+0x16>
 8007598:	4628      	mov	r0, r5
 800759a:	f000 f985 	bl	80078a8 <__sinit>
 800759e:	4b2e      	ldr	r3, [pc, #184]	; (8007658 <__swsetup_r+0xd0>)
 80075a0:	429c      	cmp	r4, r3
 80075a2:	d10f      	bne.n	80075c4 <__swsetup_r+0x3c>
 80075a4:	686c      	ldr	r4, [r5, #4]
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075ac:	0719      	lsls	r1, r3, #28
 80075ae:	d42c      	bmi.n	800760a <__swsetup_r+0x82>
 80075b0:	06dd      	lsls	r5, r3, #27
 80075b2:	d411      	bmi.n	80075d8 <__swsetup_r+0x50>
 80075b4:	2309      	movs	r3, #9
 80075b6:	6033      	str	r3, [r6, #0]
 80075b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075bc:	81a3      	strh	r3, [r4, #12]
 80075be:	f04f 30ff 	mov.w	r0, #4294967295
 80075c2:	e03e      	b.n	8007642 <__swsetup_r+0xba>
 80075c4:	4b25      	ldr	r3, [pc, #148]	; (800765c <__swsetup_r+0xd4>)
 80075c6:	429c      	cmp	r4, r3
 80075c8:	d101      	bne.n	80075ce <__swsetup_r+0x46>
 80075ca:	68ac      	ldr	r4, [r5, #8]
 80075cc:	e7eb      	b.n	80075a6 <__swsetup_r+0x1e>
 80075ce:	4b24      	ldr	r3, [pc, #144]	; (8007660 <__swsetup_r+0xd8>)
 80075d0:	429c      	cmp	r4, r3
 80075d2:	bf08      	it	eq
 80075d4:	68ec      	ldreq	r4, [r5, #12]
 80075d6:	e7e6      	b.n	80075a6 <__swsetup_r+0x1e>
 80075d8:	0758      	lsls	r0, r3, #29
 80075da:	d512      	bpl.n	8007602 <__swsetup_r+0x7a>
 80075dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075de:	b141      	cbz	r1, 80075f2 <__swsetup_r+0x6a>
 80075e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075e4:	4299      	cmp	r1, r3
 80075e6:	d002      	beq.n	80075ee <__swsetup_r+0x66>
 80075e8:	4630      	mov	r0, r6
 80075ea:	f7ff fb31 	bl	8006c50 <_free_r>
 80075ee:	2300      	movs	r3, #0
 80075f0:	6363      	str	r3, [r4, #52]	; 0x34
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	2300      	movs	r3, #0
 80075fc:	6063      	str	r3, [r4, #4]
 80075fe:	6923      	ldr	r3, [r4, #16]
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	f043 0308 	orr.w	r3, r3, #8
 8007608:	81a3      	strh	r3, [r4, #12]
 800760a:	6923      	ldr	r3, [r4, #16]
 800760c:	b94b      	cbnz	r3, 8007622 <__swsetup_r+0x9a>
 800760e:	89a3      	ldrh	r3, [r4, #12]
 8007610:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007618:	d003      	beq.n	8007622 <__swsetup_r+0x9a>
 800761a:	4621      	mov	r1, r4
 800761c:	4630      	mov	r0, r6
 800761e:	f000 fa09 	bl	8007a34 <__smakebuf_r>
 8007622:	89a0      	ldrh	r0, [r4, #12]
 8007624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007628:	f010 0301 	ands.w	r3, r0, #1
 800762c:	d00a      	beq.n	8007644 <__swsetup_r+0xbc>
 800762e:	2300      	movs	r3, #0
 8007630:	60a3      	str	r3, [r4, #8]
 8007632:	6963      	ldr	r3, [r4, #20]
 8007634:	425b      	negs	r3, r3
 8007636:	61a3      	str	r3, [r4, #24]
 8007638:	6923      	ldr	r3, [r4, #16]
 800763a:	b943      	cbnz	r3, 800764e <__swsetup_r+0xc6>
 800763c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007640:	d1ba      	bne.n	80075b8 <__swsetup_r+0x30>
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	0781      	lsls	r1, r0, #30
 8007646:	bf58      	it	pl
 8007648:	6963      	ldrpl	r3, [r4, #20]
 800764a:	60a3      	str	r3, [r4, #8]
 800764c:	e7f4      	b.n	8007638 <__swsetup_r+0xb0>
 800764e:	2000      	movs	r0, #0
 8007650:	e7f7      	b.n	8007642 <__swsetup_r+0xba>
 8007652:	bf00      	nop
 8007654:	2000001c 	.word	0x2000001c
 8007658:	0800a814 	.word	0x0800a814
 800765c:	0800a834 	.word	0x0800a834
 8007660:	0800a7f4 	.word	0x0800a7f4

08007664 <abort>:
 8007664:	b508      	push	{r3, lr}
 8007666:	2006      	movs	r0, #6
 8007668:	f000 fa54 	bl	8007b14 <raise>
 800766c:	2001      	movs	r0, #1
 800766e:	f7f9 ffc1 	bl	80015f4 <_exit>
	...

08007674 <__sflush_r>:
 8007674:	898a      	ldrh	r2, [r1, #12]
 8007676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767a:	4605      	mov	r5, r0
 800767c:	0710      	lsls	r0, r2, #28
 800767e:	460c      	mov	r4, r1
 8007680:	d458      	bmi.n	8007734 <__sflush_r+0xc0>
 8007682:	684b      	ldr	r3, [r1, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	dc05      	bgt.n	8007694 <__sflush_r+0x20>
 8007688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	dc02      	bgt.n	8007694 <__sflush_r+0x20>
 800768e:	2000      	movs	r0, #0
 8007690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007696:	2e00      	cmp	r6, #0
 8007698:	d0f9      	beq.n	800768e <__sflush_r+0x1a>
 800769a:	2300      	movs	r3, #0
 800769c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076a0:	682f      	ldr	r7, [r5, #0]
 80076a2:	602b      	str	r3, [r5, #0]
 80076a4:	d032      	beq.n	800770c <__sflush_r+0x98>
 80076a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	075a      	lsls	r2, r3, #29
 80076ac:	d505      	bpl.n	80076ba <__sflush_r+0x46>
 80076ae:	6863      	ldr	r3, [r4, #4]
 80076b0:	1ac0      	subs	r0, r0, r3
 80076b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076b4:	b10b      	cbz	r3, 80076ba <__sflush_r+0x46>
 80076b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076b8:	1ac0      	subs	r0, r0, r3
 80076ba:	2300      	movs	r3, #0
 80076bc:	4602      	mov	r2, r0
 80076be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076c0:	6a21      	ldr	r1, [r4, #32]
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b0      	blx	r6
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	d106      	bne.n	80076da <__sflush_r+0x66>
 80076cc:	6829      	ldr	r1, [r5, #0]
 80076ce:	291d      	cmp	r1, #29
 80076d0:	d82c      	bhi.n	800772c <__sflush_r+0xb8>
 80076d2:	4a2a      	ldr	r2, [pc, #168]	; (800777c <__sflush_r+0x108>)
 80076d4:	40ca      	lsrs	r2, r1
 80076d6:	07d6      	lsls	r6, r2, #31
 80076d8:	d528      	bpl.n	800772c <__sflush_r+0xb8>
 80076da:	2200      	movs	r2, #0
 80076dc:	6062      	str	r2, [r4, #4]
 80076de:	04d9      	lsls	r1, r3, #19
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	6022      	str	r2, [r4, #0]
 80076e4:	d504      	bpl.n	80076f0 <__sflush_r+0x7c>
 80076e6:	1c42      	adds	r2, r0, #1
 80076e8:	d101      	bne.n	80076ee <__sflush_r+0x7a>
 80076ea:	682b      	ldr	r3, [r5, #0]
 80076ec:	b903      	cbnz	r3, 80076f0 <__sflush_r+0x7c>
 80076ee:	6560      	str	r0, [r4, #84]	; 0x54
 80076f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076f2:	602f      	str	r7, [r5, #0]
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d0ca      	beq.n	800768e <__sflush_r+0x1a>
 80076f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076fc:	4299      	cmp	r1, r3
 80076fe:	d002      	beq.n	8007706 <__sflush_r+0x92>
 8007700:	4628      	mov	r0, r5
 8007702:	f7ff faa5 	bl	8006c50 <_free_r>
 8007706:	2000      	movs	r0, #0
 8007708:	6360      	str	r0, [r4, #52]	; 0x34
 800770a:	e7c1      	b.n	8007690 <__sflush_r+0x1c>
 800770c:	6a21      	ldr	r1, [r4, #32]
 800770e:	2301      	movs	r3, #1
 8007710:	4628      	mov	r0, r5
 8007712:	47b0      	blx	r6
 8007714:	1c41      	adds	r1, r0, #1
 8007716:	d1c7      	bne.n	80076a8 <__sflush_r+0x34>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0c4      	beq.n	80076a8 <__sflush_r+0x34>
 800771e:	2b1d      	cmp	r3, #29
 8007720:	d001      	beq.n	8007726 <__sflush_r+0xb2>
 8007722:	2b16      	cmp	r3, #22
 8007724:	d101      	bne.n	800772a <__sflush_r+0xb6>
 8007726:	602f      	str	r7, [r5, #0]
 8007728:	e7b1      	b.n	800768e <__sflush_r+0x1a>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007730:	81a3      	strh	r3, [r4, #12]
 8007732:	e7ad      	b.n	8007690 <__sflush_r+0x1c>
 8007734:	690f      	ldr	r7, [r1, #16]
 8007736:	2f00      	cmp	r7, #0
 8007738:	d0a9      	beq.n	800768e <__sflush_r+0x1a>
 800773a:	0793      	lsls	r3, r2, #30
 800773c:	680e      	ldr	r6, [r1, #0]
 800773e:	bf08      	it	eq
 8007740:	694b      	ldreq	r3, [r1, #20]
 8007742:	600f      	str	r7, [r1, #0]
 8007744:	bf18      	it	ne
 8007746:	2300      	movne	r3, #0
 8007748:	eba6 0807 	sub.w	r8, r6, r7
 800774c:	608b      	str	r3, [r1, #8]
 800774e:	f1b8 0f00 	cmp.w	r8, #0
 8007752:	dd9c      	ble.n	800768e <__sflush_r+0x1a>
 8007754:	6a21      	ldr	r1, [r4, #32]
 8007756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007758:	4643      	mov	r3, r8
 800775a:	463a      	mov	r2, r7
 800775c:	4628      	mov	r0, r5
 800775e:	47b0      	blx	r6
 8007760:	2800      	cmp	r0, #0
 8007762:	dc06      	bgt.n	8007772 <__sflush_r+0xfe>
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800776a:	81a3      	strh	r3, [r4, #12]
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	e78e      	b.n	8007690 <__sflush_r+0x1c>
 8007772:	4407      	add	r7, r0
 8007774:	eba8 0800 	sub.w	r8, r8, r0
 8007778:	e7e9      	b.n	800774e <__sflush_r+0xda>
 800777a:	bf00      	nop
 800777c:	20400001 	.word	0x20400001

08007780 <_fflush_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	690b      	ldr	r3, [r1, #16]
 8007784:	4605      	mov	r5, r0
 8007786:	460c      	mov	r4, r1
 8007788:	b913      	cbnz	r3, 8007790 <_fflush_r+0x10>
 800778a:	2500      	movs	r5, #0
 800778c:	4628      	mov	r0, r5
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	b118      	cbz	r0, 800779a <_fflush_r+0x1a>
 8007792:	6983      	ldr	r3, [r0, #24]
 8007794:	b90b      	cbnz	r3, 800779a <_fflush_r+0x1a>
 8007796:	f000 f887 	bl	80078a8 <__sinit>
 800779a:	4b14      	ldr	r3, [pc, #80]	; (80077ec <_fflush_r+0x6c>)
 800779c:	429c      	cmp	r4, r3
 800779e:	d11b      	bne.n	80077d8 <_fflush_r+0x58>
 80077a0:	686c      	ldr	r4, [r5, #4]
 80077a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0ef      	beq.n	800778a <_fflush_r+0xa>
 80077aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077ac:	07d0      	lsls	r0, r2, #31
 80077ae:	d404      	bmi.n	80077ba <_fflush_r+0x3a>
 80077b0:	0599      	lsls	r1, r3, #22
 80077b2:	d402      	bmi.n	80077ba <_fflush_r+0x3a>
 80077b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077b6:	f000 f915 	bl	80079e4 <__retarget_lock_acquire_recursive>
 80077ba:	4628      	mov	r0, r5
 80077bc:	4621      	mov	r1, r4
 80077be:	f7ff ff59 	bl	8007674 <__sflush_r>
 80077c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077c4:	07da      	lsls	r2, r3, #31
 80077c6:	4605      	mov	r5, r0
 80077c8:	d4e0      	bmi.n	800778c <_fflush_r+0xc>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	059b      	lsls	r3, r3, #22
 80077ce:	d4dd      	bmi.n	800778c <_fflush_r+0xc>
 80077d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077d2:	f000 f908 	bl	80079e6 <__retarget_lock_release_recursive>
 80077d6:	e7d9      	b.n	800778c <_fflush_r+0xc>
 80077d8:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <_fflush_r+0x70>)
 80077da:	429c      	cmp	r4, r3
 80077dc:	d101      	bne.n	80077e2 <_fflush_r+0x62>
 80077de:	68ac      	ldr	r4, [r5, #8]
 80077e0:	e7df      	b.n	80077a2 <_fflush_r+0x22>
 80077e2:	4b04      	ldr	r3, [pc, #16]	; (80077f4 <_fflush_r+0x74>)
 80077e4:	429c      	cmp	r4, r3
 80077e6:	bf08      	it	eq
 80077e8:	68ec      	ldreq	r4, [r5, #12]
 80077ea:	e7da      	b.n	80077a2 <_fflush_r+0x22>
 80077ec:	0800a814 	.word	0x0800a814
 80077f0:	0800a834 	.word	0x0800a834
 80077f4:	0800a7f4 	.word	0x0800a7f4

080077f8 <std>:
 80077f8:	2300      	movs	r3, #0
 80077fa:	b510      	push	{r4, lr}
 80077fc:	4604      	mov	r4, r0
 80077fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007806:	6083      	str	r3, [r0, #8]
 8007808:	8181      	strh	r1, [r0, #12]
 800780a:	6643      	str	r3, [r0, #100]	; 0x64
 800780c:	81c2      	strh	r2, [r0, #14]
 800780e:	6183      	str	r3, [r0, #24]
 8007810:	4619      	mov	r1, r3
 8007812:	2208      	movs	r2, #8
 8007814:	305c      	adds	r0, #92	; 0x5c
 8007816:	f7fd fb67 	bl	8004ee8 <memset>
 800781a:	4b05      	ldr	r3, [pc, #20]	; (8007830 <std+0x38>)
 800781c:	6263      	str	r3, [r4, #36]	; 0x24
 800781e:	4b05      	ldr	r3, [pc, #20]	; (8007834 <std+0x3c>)
 8007820:	62a3      	str	r3, [r4, #40]	; 0x28
 8007822:	4b05      	ldr	r3, [pc, #20]	; (8007838 <std+0x40>)
 8007824:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007826:	4b05      	ldr	r3, [pc, #20]	; (800783c <std+0x44>)
 8007828:	6224      	str	r4, [r4, #32]
 800782a:	6323      	str	r3, [r4, #48]	; 0x30
 800782c:	bd10      	pop	{r4, pc}
 800782e:	bf00      	nop
 8007830:	08007b4d 	.word	0x08007b4d
 8007834:	08007b6f 	.word	0x08007b6f
 8007838:	08007ba7 	.word	0x08007ba7
 800783c:	08007bcb 	.word	0x08007bcb

08007840 <_cleanup_r>:
 8007840:	4901      	ldr	r1, [pc, #4]	; (8007848 <_cleanup_r+0x8>)
 8007842:	f000 b8af 	b.w	80079a4 <_fwalk_reent>
 8007846:	bf00      	nop
 8007848:	08007781 	.word	0x08007781

0800784c <__sfmoreglue>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	2268      	movs	r2, #104	; 0x68
 8007850:	1e4d      	subs	r5, r1, #1
 8007852:	4355      	muls	r5, r2
 8007854:	460e      	mov	r6, r1
 8007856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800785a:	f7ff fa65 	bl	8006d28 <_malloc_r>
 800785e:	4604      	mov	r4, r0
 8007860:	b140      	cbz	r0, 8007874 <__sfmoreglue+0x28>
 8007862:	2100      	movs	r1, #0
 8007864:	e9c0 1600 	strd	r1, r6, [r0]
 8007868:	300c      	adds	r0, #12
 800786a:	60a0      	str	r0, [r4, #8]
 800786c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007870:	f7fd fb3a 	bl	8004ee8 <memset>
 8007874:	4620      	mov	r0, r4
 8007876:	bd70      	pop	{r4, r5, r6, pc}

08007878 <__sfp_lock_acquire>:
 8007878:	4801      	ldr	r0, [pc, #4]	; (8007880 <__sfp_lock_acquire+0x8>)
 800787a:	f000 b8b3 	b.w	80079e4 <__retarget_lock_acquire_recursive>
 800787e:	bf00      	nop
 8007880:	20003a95 	.word	0x20003a95

08007884 <__sfp_lock_release>:
 8007884:	4801      	ldr	r0, [pc, #4]	; (800788c <__sfp_lock_release+0x8>)
 8007886:	f000 b8ae 	b.w	80079e6 <__retarget_lock_release_recursive>
 800788a:	bf00      	nop
 800788c:	20003a95 	.word	0x20003a95

08007890 <__sinit_lock_acquire>:
 8007890:	4801      	ldr	r0, [pc, #4]	; (8007898 <__sinit_lock_acquire+0x8>)
 8007892:	f000 b8a7 	b.w	80079e4 <__retarget_lock_acquire_recursive>
 8007896:	bf00      	nop
 8007898:	20003a96 	.word	0x20003a96

0800789c <__sinit_lock_release>:
 800789c:	4801      	ldr	r0, [pc, #4]	; (80078a4 <__sinit_lock_release+0x8>)
 800789e:	f000 b8a2 	b.w	80079e6 <__retarget_lock_release_recursive>
 80078a2:	bf00      	nop
 80078a4:	20003a96 	.word	0x20003a96

080078a8 <__sinit>:
 80078a8:	b510      	push	{r4, lr}
 80078aa:	4604      	mov	r4, r0
 80078ac:	f7ff fff0 	bl	8007890 <__sinit_lock_acquire>
 80078b0:	69a3      	ldr	r3, [r4, #24]
 80078b2:	b11b      	cbz	r3, 80078bc <__sinit+0x14>
 80078b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b8:	f7ff bff0 	b.w	800789c <__sinit_lock_release>
 80078bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078c0:	6523      	str	r3, [r4, #80]	; 0x50
 80078c2:	4b13      	ldr	r3, [pc, #76]	; (8007910 <__sinit+0x68>)
 80078c4:	4a13      	ldr	r2, [pc, #76]	; (8007914 <__sinit+0x6c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80078ca:	42a3      	cmp	r3, r4
 80078cc:	bf04      	itt	eq
 80078ce:	2301      	moveq	r3, #1
 80078d0:	61a3      	streq	r3, [r4, #24]
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 f820 	bl	8007918 <__sfp>
 80078d8:	6060      	str	r0, [r4, #4]
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 f81c 	bl	8007918 <__sfp>
 80078e0:	60a0      	str	r0, [r4, #8]
 80078e2:	4620      	mov	r0, r4
 80078e4:	f000 f818 	bl	8007918 <__sfp>
 80078e8:	2200      	movs	r2, #0
 80078ea:	60e0      	str	r0, [r4, #12]
 80078ec:	2104      	movs	r1, #4
 80078ee:	6860      	ldr	r0, [r4, #4]
 80078f0:	f7ff ff82 	bl	80077f8 <std>
 80078f4:	68a0      	ldr	r0, [r4, #8]
 80078f6:	2201      	movs	r2, #1
 80078f8:	2109      	movs	r1, #9
 80078fa:	f7ff ff7d 	bl	80077f8 <std>
 80078fe:	68e0      	ldr	r0, [r4, #12]
 8007900:	2202      	movs	r2, #2
 8007902:	2112      	movs	r1, #18
 8007904:	f7ff ff78 	bl	80077f8 <std>
 8007908:	2301      	movs	r3, #1
 800790a:	61a3      	str	r3, [r4, #24]
 800790c:	e7d2      	b.n	80078b4 <__sinit+0xc>
 800790e:	bf00      	nop
 8007910:	0800a478 	.word	0x0800a478
 8007914:	08007841 	.word	0x08007841

08007918 <__sfp>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	4607      	mov	r7, r0
 800791c:	f7ff ffac 	bl	8007878 <__sfp_lock_acquire>
 8007920:	4b1e      	ldr	r3, [pc, #120]	; (800799c <__sfp+0x84>)
 8007922:	681e      	ldr	r6, [r3, #0]
 8007924:	69b3      	ldr	r3, [r6, #24]
 8007926:	b913      	cbnz	r3, 800792e <__sfp+0x16>
 8007928:	4630      	mov	r0, r6
 800792a:	f7ff ffbd 	bl	80078a8 <__sinit>
 800792e:	3648      	adds	r6, #72	; 0x48
 8007930:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007934:	3b01      	subs	r3, #1
 8007936:	d503      	bpl.n	8007940 <__sfp+0x28>
 8007938:	6833      	ldr	r3, [r6, #0]
 800793a:	b30b      	cbz	r3, 8007980 <__sfp+0x68>
 800793c:	6836      	ldr	r6, [r6, #0]
 800793e:	e7f7      	b.n	8007930 <__sfp+0x18>
 8007940:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007944:	b9d5      	cbnz	r5, 800797c <__sfp+0x64>
 8007946:	4b16      	ldr	r3, [pc, #88]	; (80079a0 <__sfp+0x88>)
 8007948:	60e3      	str	r3, [r4, #12]
 800794a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800794e:	6665      	str	r5, [r4, #100]	; 0x64
 8007950:	f000 f847 	bl	80079e2 <__retarget_lock_init_recursive>
 8007954:	f7ff ff96 	bl	8007884 <__sfp_lock_release>
 8007958:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800795c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007960:	6025      	str	r5, [r4, #0]
 8007962:	61a5      	str	r5, [r4, #24]
 8007964:	2208      	movs	r2, #8
 8007966:	4629      	mov	r1, r5
 8007968:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800796c:	f7fd fabc 	bl	8004ee8 <memset>
 8007970:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007974:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007978:	4620      	mov	r0, r4
 800797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800797c:	3468      	adds	r4, #104	; 0x68
 800797e:	e7d9      	b.n	8007934 <__sfp+0x1c>
 8007980:	2104      	movs	r1, #4
 8007982:	4638      	mov	r0, r7
 8007984:	f7ff ff62 	bl	800784c <__sfmoreglue>
 8007988:	4604      	mov	r4, r0
 800798a:	6030      	str	r0, [r6, #0]
 800798c:	2800      	cmp	r0, #0
 800798e:	d1d5      	bne.n	800793c <__sfp+0x24>
 8007990:	f7ff ff78 	bl	8007884 <__sfp_lock_release>
 8007994:	230c      	movs	r3, #12
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	e7ee      	b.n	8007978 <__sfp+0x60>
 800799a:	bf00      	nop
 800799c:	0800a478 	.word	0x0800a478
 80079a0:	ffff0001 	.word	0xffff0001

080079a4 <_fwalk_reent>:
 80079a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079a8:	4606      	mov	r6, r0
 80079aa:	4688      	mov	r8, r1
 80079ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079b0:	2700      	movs	r7, #0
 80079b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079b6:	f1b9 0901 	subs.w	r9, r9, #1
 80079ba:	d505      	bpl.n	80079c8 <_fwalk_reent+0x24>
 80079bc:	6824      	ldr	r4, [r4, #0]
 80079be:	2c00      	cmp	r4, #0
 80079c0:	d1f7      	bne.n	80079b2 <_fwalk_reent+0xe>
 80079c2:	4638      	mov	r0, r7
 80079c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079c8:	89ab      	ldrh	r3, [r5, #12]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d907      	bls.n	80079de <_fwalk_reent+0x3a>
 80079ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079d2:	3301      	adds	r3, #1
 80079d4:	d003      	beq.n	80079de <_fwalk_reent+0x3a>
 80079d6:	4629      	mov	r1, r5
 80079d8:	4630      	mov	r0, r6
 80079da:	47c0      	blx	r8
 80079dc:	4307      	orrs	r7, r0
 80079de:	3568      	adds	r5, #104	; 0x68
 80079e0:	e7e9      	b.n	80079b6 <_fwalk_reent+0x12>

080079e2 <__retarget_lock_init_recursive>:
 80079e2:	4770      	bx	lr

080079e4 <__retarget_lock_acquire_recursive>:
 80079e4:	4770      	bx	lr

080079e6 <__retarget_lock_release_recursive>:
 80079e6:	4770      	bx	lr

080079e8 <__swhatbuf_r>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	460e      	mov	r6, r1
 80079ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f0:	2900      	cmp	r1, #0
 80079f2:	b096      	sub	sp, #88	; 0x58
 80079f4:	4614      	mov	r4, r2
 80079f6:	461d      	mov	r5, r3
 80079f8:	da08      	bge.n	8007a0c <__swhatbuf_r+0x24>
 80079fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	602a      	str	r2, [r5, #0]
 8007a02:	061a      	lsls	r2, r3, #24
 8007a04:	d410      	bmi.n	8007a28 <__swhatbuf_r+0x40>
 8007a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a0a:	e00e      	b.n	8007a2a <__swhatbuf_r+0x42>
 8007a0c:	466a      	mov	r2, sp
 8007a0e:	f000 f903 	bl	8007c18 <_fstat_r>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	dbf1      	blt.n	80079fa <__swhatbuf_r+0x12>
 8007a16:	9a01      	ldr	r2, [sp, #4]
 8007a18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a20:	425a      	negs	r2, r3
 8007a22:	415a      	adcs	r2, r3
 8007a24:	602a      	str	r2, [r5, #0]
 8007a26:	e7ee      	b.n	8007a06 <__swhatbuf_r+0x1e>
 8007a28:	2340      	movs	r3, #64	; 0x40
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	b016      	add	sp, #88	; 0x58
 8007a30:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a34 <__smakebuf_r>:
 8007a34:	898b      	ldrh	r3, [r1, #12]
 8007a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a38:	079d      	lsls	r5, r3, #30
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	d507      	bpl.n	8007a50 <__smakebuf_r+0x1c>
 8007a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	6123      	str	r3, [r4, #16]
 8007a48:	2301      	movs	r3, #1
 8007a4a:	6163      	str	r3, [r4, #20]
 8007a4c:	b002      	add	sp, #8
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	ab01      	add	r3, sp, #4
 8007a52:	466a      	mov	r2, sp
 8007a54:	f7ff ffc8 	bl	80079e8 <__swhatbuf_r>
 8007a58:	9900      	ldr	r1, [sp, #0]
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f7ff f963 	bl	8006d28 <_malloc_r>
 8007a62:	b948      	cbnz	r0, 8007a78 <__smakebuf_r+0x44>
 8007a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a68:	059a      	lsls	r2, r3, #22
 8007a6a:	d4ef      	bmi.n	8007a4c <__smakebuf_r+0x18>
 8007a6c:	f023 0303 	bic.w	r3, r3, #3
 8007a70:	f043 0302 	orr.w	r3, r3, #2
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	e7e3      	b.n	8007a40 <__smakebuf_r+0xc>
 8007a78:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <__smakebuf_r+0x7c>)
 8007a7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	6020      	str	r0, [r4, #0]
 8007a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	9b00      	ldr	r3, [sp, #0]
 8007a88:	6163      	str	r3, [r4, #20]
 8007a8a:	9b01      	ldr	r3, [sp, #4]
 8007a8c:	6120      	str	r0, [r4, #16]
 8007a8e:	b15b      	cbz	r3, 8007aa8 <__smakebuf_r+0x74>
 8007a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a94:	4630      	mov	r0, r6
 8007a96:	f000 f8d1 	bl	8007c3c <_isatty_r>
 8007a9a:	b128      	cbz	r0, 8007aa8 <__smakebuf_r+0x74>
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f023 0303 	bic.w	r3, r3, #3
 8007aa2:	f043 0301 	orr.w	r3, r3, #1
 8007aa6:	81a3      	strh	r3, [r4, #12]
 8007aa8:	89a0      	ldrh	r0, [r4, #12]
 8007aaa:	4305      	orrs	r5, r0
 8007aac:	81a5      	strh	r5, [r4, #12]
 8007aae:	e7cd      	b.n	8007a4c <__smakebuf_r+0x18>
 8007ab0:	08007841 	.word	0x08007841

08007ab4 <_malloc_usable_size_r>:
 8007ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab8:	1f18      	subs	r0, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bfbc      	itt	lt
 8007abe:	580b      	ldrlt	r3, [r1, r0]
 8007ac0:	18c0      	addlt	r0, r0, r3
 8007ac2:	4770      	bx	lr

08007ac4 <_raise_r>:
 8007ac4:	291f      	cmp	r1, #31
 8007ac6:	b538      	push	{r3, r4, r5, lr}
 8007ac8:	4604      	mov	r4, r0
 8007aca:	460d      	mov	r5, r1
 8007acc:	d904      	bls.n	8007ad8 <_raise_r+0x14>
 8007ace:	2316      	movs	r3, #22
 8007ad0:	6003      	str	r3, [r0, #0]
 8007ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ada:	b112      	cbz	r2, 8007ae2 <_raise_r+0x1e>
 8007adc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ae0:	b94b      	cbnz	r3, 8007af6 <_raise_r+0x32>
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 f830 	bl	8007b48 <_getpid_r>
 8007ae8:	462a      	mov	r2, r5
 8007aea:	4601      	mov	r1, r0
 8007aec:	4620      	mov	r0, r4
 8007aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007af2:	f000 b817 	b.w	8007b24 <_kill_r>
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d00a      	beq.n	8007b10 <_raise_r+0x4c>
 8007afa:	1c59      	adds	r1, r3, #1
 8007afc:	d103      	bne.n	8007b06 <_raise_r+0x42>
 8007afe:	2316      	movs	r3, #22
 8007b00:	6003      	str	r3, [r0, #0]
 8007b02:	2001      	movs	r0, #1
 8007b04:	e7e7      	b.n	8007ad6 <_raise_r+0x12>
 8007b06:	2400      	movs	r4, #0
 8007b08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	4798      	blx	r3
 8007b10:	2000      	movs	r0, #0
 8007b12:	e7e0      	b.n	8007ad6 <_raise_r+0x12>

08007b14 <raise>:
 8007b14:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <raise+0xc>)
 8007b16:	4601      	mov	r1, r0
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	f7ff bfd3 	b.w	8007ac4 <_raise_r>
 8007b1e:	bf00      	nop
 8007b20:	2000001c 	.word	0x2000001c

08007b24 <_kill_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d07      	ldr	r5, [pc, #28]	; (8007b44 <_kill_r+0x20>)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	4611      	mov	r1, r2
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	f7f9 fd4f 	bl	80015d4 <_kill>
 8007b36:	1c43      	adds	r3, r0, #1
 8007b38:	d102      	bne.n	8007b40 <_kill_r+0x1c>
 8007b3a:	682b      	ldr	r3, [r5, #0]
 8007b3c:	b103      	cbz	r3, 8007b40 <_kill_r+0x1c>
 8007b3e:	6023      	str	r3, [r4, #0]
 8007b40:	bd38      	pop	{r3, r4, r5, pc}
 8007b42:	bf00      	nop
 8007b44:	20003a90 	.word	0x20003a90

08007b48 <_getpid_r>:
 8007b48:	f7f9 bd3c 	b.w	80015c4 <_getpid>

08007b4c <__sread>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	460c      	mov	r4, r1
 8007b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b54:	f000 f894 	bl	8007c80 <_read_r>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	bfab      	itete	ge
 8007b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b60:	181b      	addge	r3, r3, r0
 8007b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b66:	bfac      	ite	ge
 8007b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b6a:	81a3      	strhlt	r3, [r4, #12]
 8007b6c:	bd10      	pop	{r4, pc}

08007b6e <__swrite>:
 8007b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b72:	461f      	mov	r7, r3
 8007b74:	898b      	ldrh	r3, [r1, #12]
 8007b76:	05db      	lsls	r3, r3, #23
 8007b78:	4605      	mov	r5, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	4616      	mov	r6, r2
 8007b7e:	d505      	bpl.n	8007b8c <__swrite+0x1e>
 8007b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b84:	2302      	movs	r3, #2
 8007b86:	2200      	movs	r2, #0
 8007b88:	f000 f868 	bl	8007c5c <_lseek_r>
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b96:	81a3      	strh	r3, [r4, #12]
 8007b98:	4632      	mov	r2, r6
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba2:	f000 b817 	b.w	8007bd4 <_write_r>

08007ba6 <__sseek>:
 8007ba6:	b510      	push	{r4, lr}
 8007ba8:	460c      	mov	r4, r1
 8007baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bae:	f000 f855 	bl	8007c5c <_lseek_r>
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	bf15      	itete	ne
 8007bb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bc2:	81a3      	strheq	r3, [r4, #12]
 8007bc4:	bf18      	it	ne
 8007bc6:	81a3      	strhne	r3, [r4, #12]
 8007bc8:	bd10      	pop	{r4, pc}

08007bca <__sclose>:
 8007bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bce:	f000 b813 	b.w	8007bf8 <_close_r>
	...

08007bd4 <_write_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d07      	ldr	r5, [pc, #28]	; (8007bf4 <_write_r+0x20>)
 8007bd8:	4604      	mov	r4, r0
 8007bda:	4608      	mov	r0, r1
 8007bdc:	4611      	mov	r1, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f7f9 fd2d 	bl	8001642 <_write>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_write_r+0x1e>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_write_r+0x1e>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	20003a90 	.word	0x20003a90

08007bf8 <_close_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d06      	ldr	r5, [pc, #24]	; (8007c14 <_close_r+0x1c>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	f7f9 fd39 	bl	800167a <_close>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_close_r+0x1a>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_close_r+0x1a>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	20003a90 	.word	0x20003a90

08007c18 <_fstat_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d07      	ldr	r5, [pc, #28]	; (8007c38 <_fstat_r+0x20>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	602b      	str	r3, [r5, #0]
 8007c26:	f7f9 fd34 	bl	8001692 <_fstat>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d102      	bne.n	8007c34 <_fstat_r+0x1c>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	b103      	cbz	r3, 8007c34 <_fstat_r+0x1c>
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	bd38      	pop	{r3, r4, r5, pc}
 8007c36:	bf00      	nop
 8007c38:	20003a90 	.word	0x20003a90

08007c3c <_isatty_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_isatty_r+0x1c>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7f9 fd33 	bl	80016b2 <_isatty>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_isatty_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_isatty_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	20003a90 	.word	0x20003a90

08007c5c <_lseek_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d07      	ldr	r5, [pc, #28]	; (8007c7c <_lseek_r+0x20>)
 8007c60:	4604      	mov	r4, r0
 8007c62:	4608      	mov	r0, r1
 8007c64:	4611      	mov	r1, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7f9 fd2c 	bl	80016c8 <_lseek>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_lseek_r+0x1e>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_lseek_r+0x1e>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	20003a90 	.word	0x20003a90

08007c80 <_read_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d07      	ldr	r5, [pc, #28]	; (8007ca0 <_read_r+0x20>)
 8007c84:	4604      	mov	r4, r0
 8007c86:	4608      	mov	r0, r1
 8007c88:	4611      	mov	r1, r2
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	602a      	str	r2, [r5, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f7f9 fcba 	bl	8001608 <_read>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_read_r+0x1e>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_read_r+0x1e>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20003a90 	.word	0x20003a90

08007ca4 <fmaxf>:
 8007ca4:	b508      	push	{r3, lr}
 8007ca6:	ed2d 8b02 	vpush	{d8}
 8007caa:	eeb0 8a40 	vmov.f32	s16, s0
 8007cae:	eef0 8a60 	vmov.f32	s17, s1
 8007cb2:	f000 f813 	bl	8007cdc <__fpclassifyf>
 8007cb6:	b148      	cbz	r0, 8007ccc <fmaxf+0x28>
 8007cb8:	eeb0 0a68 	vmov.f32	s0, s17
 8007cbc:	f000 f80e 	bl	8007cdc <__fpclassifyf>
 8007cc0:	b130      	cbz	r0, 8007cd0 <fmaxf+0x2c>
 8007cc2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cca:	dc01      	bgt.n	8007cd0 <fmaxf+0x2c>
 8007ccc:	eeb0 8a68 	vmov.f32	s16, s17
 8007cd0:	eeb0 0a48 	vmov.f32	s0, s16
 8007cd4:	ecbd 8b02 	vpop	{d8}
 8007cd8:	bd08      	pop	{r3, pc}
	...

08007cdc <__fpclassifyf>:
 8007cdc:	ee10 3a10 	vmov	r3, s0
 8007ce0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8007ce4:	d00d      	beq.n	8007d02 <__fpclassifyf+0x26>
 8007ce6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8007cea:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007cee:	d30a      	bcc.n	8007d06 <__fpclassifyf+0x2a>
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <__fpclassifyf+0x34>)
 8007cf2:	1e42      	subs	r2, r0, #1
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d908      	bls.n	8007d0a <__fpclassifyf+0x2e>
 8007cf8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8007cfc:	4258      	negs	r0, r3
 8007cfe:	4158      	adcs	r0, r3
 8007d00:	4770      	bx	lr
 8007d02:	2002      	movs	r0, #2
 8007d04:	4770      	bx	lr
 8007d06:	2004      	movs	r0, #4
 8007d08:	4770      	bx	lr
 8007d0a:	2003      	movs	r0, #3
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	007ffffe 	.word	0x007ffffe
 8007d14:	00000000 	.word	0x00000000

08007d18 <exp>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	ed2d 8b02 	vpush	{d8}
 8007d1e:	ec55 4b10 	vmov	r4, r5, d0
 8007d22:	f000 f861 	bl	8007de8 <__ieee754_exp>
 8007d26:	eeb0 8a40 	vmov.f32	s16, s0
 8007d2a:	eef0 8a60 	vmov.f32	s17, s1
 8007d2e:	ec45 4b10 	vmov	d0, r4, r5
 8007d32:	f000 fa0e 	bl	8008152 <finite>
 8007d36:	b168      	cbz	r0, 8007d54 <exp+0x3c>
 8007d38:	a317      	add	r3, pc, #92	; (adr r3, 8007d98 <exp+0x80>)
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 fee9 	bl	8000b18 <__aeabi_dcmpgt>
 8007d46:	b160      	cbz	r0, 8007d62 <exp+0x4a>
 8007d48:	f7fd f896 	bl	8004e78 <__errno>
 8007d4c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8007d88 <exp+0x70>
 8007d50:	2322      	movs	r3, #34	; 0x22
 8007d52:	6003      	str	r3, [r0, #0]
 8007d54:	eeb0 0a48 	vmov.f32	s0, s16
 8007d58:	eef0 0a68 	vmov.f32	s1, s17
 8007d5c:	ecbd 8b02 	vpop	{d8}
 8007d60:	bd38      	pop	{r3, r4, r5, pc}
 8007d62:	a30f      	add	r3, pc, #60	; (adr r3, 8007da0 <exp+0x88>)
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	4620      	mov	r0, r4
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	f7f8 feb6 	bl	8000adc <__aeabi_dcmplt>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d0ef      	beq.n	8007d54 <exp+0x3c>
 8007d74:	f7fd f880 	bl	8004e78 <__errno>
 8007d78:	2322      	movs	r3, #34	; 0x22
 8007d7a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8007d90 <exp+0x78>
 8007d7e:	6003      	str	r3, [r0, #0]
 8007d80:	e7e8      	b.n	8007d54 <exp+0x3c>
 8007d82:	bf00      	nop
 8007d84:	f3af 8000 	nop.w
 8007d88:	00000000 	.word	0x00000000
 8007d8c:	7ff00000 	.word	0x7ff00000
	...
 8007d98:	fefa39ef 	.word	0xfefa39ef
 8007d9c:	40862e42 	.word	0x40862e42
 8007da0:	d52d3051 	.word	0xd52d3051
 8007da4:	c0874910 	.word	0xc0874910

08007da8 <sqrtf>:
 8007da8:	b508      	push	{r3, lr}
 8007daa:	ed2d 8b02 	vpush	{d8}
 8007dae:	eeb0 8a40 	vmov.f32	s16, s0
 8007db2:	f000 f99b 	bl	80080ec <__ieee754_sqrtf>
 8007db6:	eeb4 8a48 	vcmp.f32	s16, s16
 8007dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dbe:	d60c      	bvs.n	8007dda <sqrtf+0x32>
 8007dc0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007de0 <sqrtf+0x38>
 8007dc4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dcc:	d505      	bpl.n	8007dda <sqrtf+0x32>
 8007dce:	f7fd f853 	bl	8004e78 <__errno>
 8007dd2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007dd6:	2321      	movs	r3, #33	; 0x21
 8007dd8:	6003      	str	r3, [r0, #0]
 8007dda:	ecbd 8b02 	vpop	{d8}
 8007dde:	bd08      	pop	{r3, pc}
	...

08007de8 <__ieee754_exp>:
 8007de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dec:	ec55 4b10 	vmov	r4, r5, d0
 8007df0:	49b5      	ldr	r1, [pc, #724]	; (80080c8 <__ieee754_exp+0x2e0>)
 8007df2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007df6:	428b      	cmp	r3, r1
 8007df8:	ed2d 8b04 	vpush	{d8-d9}
 8007dfc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007e00:	d93d      	bls.n	8007e7e <__ieee754_exp+0x96>
 8007e02:	49b2      	ldr	r1, [pc, #712]	; (80080cc <__ieee754_exp+0x2e4>)
 8007e04:	428b      	cmp	r3, r1
 8007e06:	d918      	bls.n	8007e3a <__ieee754_exp+0x52>
 8007e08:	ee10 3a10 	vmov	r3, s0
 8007e0c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8007e10:	4313      	orrs	r3, r2
 8007e12:	d009      	beq.n	8007e28 <__ieee754_exp+0x40>
 8007e14:	ee10 2a10 	vmov	r2, s0
 8007e18:	462b      	mov	r3, r5
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f7f8 fa35 	bl	800028c <__adddf3>
 8007e22:	4604      	mov	r4, r0
 8007e24:	460d      	mov	r5, r1
 8007e26:	e002      	b.n	8007e2e <__ieee754_exp+0x46>
 8007e28:	b10e      	cbz	r6, 8007e2e <__ieee754_exp+0x46>
 8007e2a:	2400      	movs	r4, #0
 8007e2c:	2500      	movs	r5, #0
 8007e2e:	ecbd 8b04 	vpop	{d8-d9}
 8007e32:	ec45 4b10 	vmov	d0, r4, r5
 8007e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3a:	a38d      	add	r3, pc, #564	; (adr r3, 8008070 <__ieee754_exp+0x288>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	ee10 0a10 	vmov	r0, s0
 8007e44:	4629      	mov	r1, r5
 8007e46:	f7f8 fe67 	bl	8000b18 <__aeabi_dcmpgt>
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	b130      	cbz	r0, 8007e5c <__ieee754_exp+0x74>
 8007e4e:	ecbd 8b04 	vpop	{d8-d9}
 8007e52:	2000      	movs	r0, #0
 8007e54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	f000 b972 	b.w	8008140 <__math_oflow>
 8007e5c:	a386      	add	r3, pc, #536	; (adr r3, 8008078 <__ieee754_exp+0x290>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	4620      	mov	r0, r4
 8007e64:	4629      	mov	r1, r5
 8007e66:	f7f8 fe39 	bl	8000adc <__aeabi_dcmplt>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	f000 808b 	beq.w	8007f86 <__ieee754_exp+0x19e>
 8007e70:	ecbd 8b04 	vpop	{d8-d9}
 8007e74:	4638      	mov	r0, r7
 8007e76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e7a:	f000 b958 	b.w	800812e <__math_uflow>
 8007e7e:	4a94      	ldr	r2, [pc, #592]	; (80080d0 <__ieee754_exp+0x2e8>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	f240 80ac 	bls.w	8007fde <__ieee754_exp+0x1f6>
 8007e86:	4a93      	ldr	r2, [pc, #588]	; (80080d4 <__ieee754_exp+0x2ec>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d87c      	bhi.n	8007f86 <__ieee754_exp+0x19e>
 8007e8c:	4b92      	ldr	r3, [pc, #584]	; (80080d8 <__ieee754_exp+0x2f0>)
 8007e8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	ee10 0a10 	vmov	r0, s0
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	f7f8 f9f4 	bl	8000288 <__aeabi_dsub>
 8007ea0:	4b8e      	ldr	r3, [pc, #568]	; (80080dc <__ieee754_exp+0x2f4>)
 8007ea2:	00f7      	lsls	r7, r6, #3
 8007ea4:	443b      	add	r3, r7
 8007ea6:	ed93 7b00 	vldr	d7, [r3]
 8007eaa:	f1c6 0a01 	rsb	sl, r6, #1
 8007eae:	4680      	mov	r8, r0
 8007eb0:	4689      	mov	r9, r1
 8007eb2:	ebaa 0a06 	sub.w	sl, sl, r6
 8007eb6:	eeb0 8a47 	vmov.f32	s16, s14
 8007eba:	eef0 8a67 	vmov.f32	s17, s15
 8007ebe:	ec53 2b18 	vmov	r2, r3, d8
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	f7f8 f9df 	bl	8000288 <__aeabi_dsub>
 8007eca:	4604      	mov	r4, r0
 8007ecc:	460d      	mov	r5, r1
 8007ece:	4622      	mov	r2, r4
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	f7f8 fb8f 	bl	80005f8 <__aeabi_dmul>
 8007eda:	a369      	add	r3, pc, #420	; (adr r3, 8008080 <__ieee754_exp+0x298>)
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	460f      	mov	r7, r1
 8007ee4:	f7f8 fb88 	bl	80005f8 <__aeabi_dmul>
 8007ee8:	a367      	add	r3, pc, #412	; (adr r3, 8008088 <__ieee754_exp+0x2a0>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f7f8 f9cb 	bl	8000288 <__aeabi_dsub>
 8007ef2:	4632      	mov	r2, r6
 8007ef4:	463b      	mov	r3, r7
 8007ef6:	f7f8 fb7f 	bl	80005f8 <__aeabi_dmul>
 8007efa:	a365      	add	r3, pc, #404	; (adr r3, 8008090 <__ieee754_exp+0x2a8>)
 8007efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f00:	f7f8 f9c4 	bl	800028c <__adddf3>
 8007f04:	4632      	mov	r2, r6
 8007f06:	463b      	mov	r3, r7
 8007f08:	f7f8 fb76 	bl	80005f8 <__aeabi_dmul>
 8007f0c:	a362      	add	r3, pc, #392	; (adr r3, 8008098 <__ieee754_exp+0x2b0>)
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	f7f8 f9b9 	bl	8000288 <__aeabi_dsub>
 8007f16:	4632      	mov	r2, r6
 8007f18:	463b      	mov	r3, r7
 8007f1a:	f7f8 fb6d 	bl	80005f8 <__aeabi_dmul>
 8007f1e:	a360      	add	r3, pc, #384	; (adr r3, 80080a0 <__ieee754_exp+0x2b8>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f7f8 f9b2 	bl	800028c <__adddf3>
 8007f28:	4632      	mov	r2, r6
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	f7f8 fb64 	bl	80005f8 <__aeabi_dmul>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4620      	mov	r0, r4
 8007f36:	4629      	mov	r1, r5
 8007f38:	f7f8 f9a6 	bl	8000288 <__aeabi_dsub>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4606      	mov	r6, r0
 8007f42:	460f      	mov	r7, r1
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 fb56 	bl	80005f8 <__aeabi_dmul>
 8007f4c:	ec41 0b19 	vmov	d9, r0, r1
 8007f50:	f1ba 0f00 	cmp.w	sl, #0
 8007f54:	d15d      	bne.n	8008012 <__ieee754_exp+0x22a>
 8007f56:	2200      	movs	r2, #0
 8007f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	4639      	mov	r1, r7
 8007f60:	f7f8 f992 	bl	8000288 <__aeabi_dsub>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	ec51 0b19 	vmov	r0, r1, d9
 8007f6c:	f7f8 fc6e 	bl	800084c <__aeabi_ddiv>
 8007f70:	4622      	mov	r2, r4
 8007f72:	462b      	mov	r3, r5
 8007f74:	f7f8 f988 	bl	8000288 <__aeabi_dsub>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	4958      	ldr	r1, [pc, #352]	; (80080e0 <__ieee754_exp+0x2f8>)
 8007f80:	f7f8 f982 	bl	8000288 <__aeabi_dsub>
 8007f84:	e74d      	b.n	8007e22 <__ieee754_exp+0x3a>
 8007f86:	4857      	ldr	r0, [pc, #348]	; (80080e4 <__ieee754_exp+0x2fc>)
 8007f88:	a347      	add	r3, pc, #284	; (adr r3, 80080a8 <__ieee754_exp+0x2c0>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8007f92:	4629      	mov	r1, r5
 8007f94:	4620      	mov	r0, r4
 8007f96:	f7f8 fb2f 	bl	80005f8 <__aeabi_dmul>
 8007f9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f9e:	f7f8 f975 	bl	800028c <__adddf3>
 8007fa2:	f7f8 fdd9 	bl	8000b58 <__aeabi_d2iz>
 8007fa6:	4682      	mov	sl, r0
 8007fa8:	f7f8 fabc 	bl	8000524 <__aeabi_i2d>
 8007fac:	a340      	add	r3, pc, #256	; (adr r3, 80080b0 <__ieee754_exp+0x2c8>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	f7f8 fb1f 	bl	80005f8 <__aeabi_dmul>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	f7f8 f961 	bl	8000288 <__aeabi_dsub>
 8007fc6:	a33c      	add	r3, pc, #240	; (adr r3, 80080b8 <__ieee754_exp+0x2d0>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	4680      	mov	r8, r0
 8007fce:	4689      	mov	r9, r1
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7f8 fb10 	bl	80005f8 <__aeabi_dmul>
 8007fd8:	ec41 0b18 	vmov	d8, r0, r1
 8007fdc:	e76f      	b.n	8007ebe <__ieee754_exp+0xd6>
 8007fde:	4a42      	ldr	r2, [pc, #264]	; (80080e8 <__ieee754_exp+0x300>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d811      	bhi.n	8008008 <__ieee754_exp+0x220>
 8007fe4:	a336      	add	r3, pc, #216	; (adr r3, 80080c0 <__ieee754_exp+0x2d8>)
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	ee10 0a10 	vmov	r0, s0
 8007fee:	4629      	mov	r1, r5
 8007ff0:	f7f8 f94c 	bl	800028c <__adddf3>
 8007ff4:	4b3a      	ldr	r3, [pc, #232]	; (80080e0 <__ieee754_exp+0x2f8>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f7f8 fd8e 	bl	8000b18 <__aeabi_dcmpgt>
 8007ffc:	b138      	cbz	r0, 800800e <__ieee754_exp+0x226>
 8007ffe:	4b38      	ldr	r3, [pc, #224]	; (80080e0 <__ieee754_exp+0x2f8>)
 8008000:	2200      	movs	r2, #0
 8008002:	4620      	mov	r0, r4
 8008004:	4629      	mov	r1, r5
 8008006:	e70a      	b.n	8007e1e <__ieee754_exp+0x36>
 8008008:	f04f 0a00 	mov.w	sl, #0
 800800c:	e75f      	b.n	8007ece <__ieee754_exp+0xe6>
 800800e:	4682      	mov	sl, r0
 8008010:	e75d      	b.n	8007ece <__ieee754_exp+0xe6>
 8008012:	4632      	mov	r2, r6
 8008014:	463b      	mov	r3, r7
 8008016:	2000      	movs	r0, #0
 8008018:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800801c:	f7f8 f934 	bl	8000288 <__aeabi_dsub>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	ec51 0b19 	vmov	r0, r1, d9
 8008028:	f7f8 fc10 	bl	800084c <__aeabi_ddiv>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	ec51 0b18 	vmov	r0, r1, d8
 8008034:	f7f8 f928 	bl	8000288 <__aeabi_dsub>
 8008038:	4642      	mov	r2, r8
 800803a:	464b      	mov	r3, r9
 800803c:	f7f8 f924 	bl	8000288 <__aeabi_dsub>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	2000      	movs	r0, #0
 8008046:	4926      	ldr	r1, [pc, #152]	; (80080e0 <__ieee754_exp+0x2f8>)
 8008048:	f7f8 f91e 	bl	8000288 <__aeabi_dsub>
 800804c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8008050:	4592      	cmp	sl, r2
 8008052:	db02      	blt.n	800805a <__ieee754_exp+0x272>
 8008054:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008058:	e6e3      	b.n	8007e22 <__ieee754_exp+0x3a>
 800805a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800805e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008062:	2200      	movs	r2, #0
 8008064:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008068:	f7f8 fac6 	bl	80005f8 <__aeabi_dmul>
 800806c:	e6d9      	b.n	8007e22 <__ieee754_exp+0x3a>
 800806e:	bf00      	nop
 8008070:	fefa39ef 	.word	0xfefa39ef
 8008074:	40862e42 	.word	0x40862e42
 8008078:	d52d3051 	.word	0xd52d3051
 800807c:	c0874910 	.word	0xc0874910
 8008080:	72bea4d0 	.word	0x72bea4d0
 8008084:	3e663769 	.word	0x3e663769
 8008088:	c5d26bf1 	.word	0xc5d26bf1
 800808c:	3ebbbd41 	.word	0x3ebbbd41
 8008090:	af25de2c 	.word	0xaf25de2c
 8008094:	3f11566a 	.word	0x3f11566a
 8008098:	16bebd93 	.word	0x16bebd93
 800809c:	3f66c16c 	.word	0x3f66c16c
 80080a0:	5555553e 	.word	0x5555553e
 80080a4:	3fc55555 	.word	0x3fc55555
 80080a8:	652b82fe 	.word	0x652b82fe
 80080ac:	3ff71547 	.word	0x3ff71547
 80080b0:	fee00000 	.word	0xfee00000
 80080b4:	3fe62e42 	.word	0x3fe62e42
 80080b8:	35793c76 	.word	0x35793c76
 80080bc:	3dea39ef 	.word	0x3dea39ef
 80080c0:	8800759c 	.word	0x8800759c
 80080c4:	7e37e43c 	.word	0x7e37e43c
 80080c8:	40862e41 	.word	0x40862e41
 80080cc:	7fefffff 	.word	0x7fefffff
 80080d0:	3fd62e42 	.word	0x3fd62e42
 80080d4:	3ff0a2b1 	.word	0x3ff0a2b1
 80080d8:	0800a868 	.word	0x0800a868
 80080dc:	0800a878 	.word	0x0800a878
 80080e0:	3ff00000 	.word	0x3ff00000
 80080e4:	0800a858 	.word	0x0800a858
 80080e8:	3defffff 	.word	0x3defffff

080080ec <__ieee754_sqrtf>:
 80080ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80080f0:	4770      	bx	lr

080080f2 <with_errno>:
 80080f2:	b570      	push	{r4, r5, r6, lr}
 80080f4:	4604      	mov	r4, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	4616      	mov	r6, r2
 80080fa:	f7fc febd 	bl	8004e78 <__errno>
 80080fe:	4629      	mov	r1, r5
 8008100:	6006      	str	r6, [r0, #0]
 8008102:	4620      	mov	r0, r4
 8008104:	bd70      	pop	{r4, r5, r6, pc}

08008106 <xflow>:
 8008106:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008108:	4614      	mov	r4, r2
 800810a:	461d      	mov	r5, r3
 800810c:	b108      	cbz	r0, 8008112 <xflow+0xc>
 800810e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008112:	e9cd 2300 	strd	r2, r3, [sp]
 8008116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800811a:	4620      	mov	r0, r4
 800811c:	4629      	mov	r1, r5
 800811e:	f7f8 fa6b 	bl	80005f8 <__aeabi_dmul>
 8008122:	2222      	movs	r2, #34	; 0x22
 8008124:	b003      	add	sp, #12
 8008126:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800812a:	f7ff bfe2 	b.w	80080f2 <with_errno>

0800812e <__math_uflow>:
 800812e:	b508      	push	{r3, lr}
 8008130:	2200      	movs	r2, #0
 8008132:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008136:	f7ff ffe6 	bl	8008106 <xflow>
 800813a:	ec41 0b10 	vmov	d0, r0, r1
 800813e:	bd08      	pop	{r3, pc}

08008140 <__math_oflow>:
 8008140:	b508      	push	{r3, lr}
 8008142:	2200      	movs	r2, #0
 8008144:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008148:	f7ff ffdd 	bl	8008106 <xflow>
 800814c:	ec41 0b10 	vmov	d0, r0, r1
 8008150:	bd08      	pop	{r3, pc}

08008152 <finite>:
 8008152:	b082      	sub	sp, #8
 8008154:	ed8d 0b00 	vstr	d0, [sp]
 8008158:	9801      	ldr	r0, [sp, #4]
 800815a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800815e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008162:	0fc0      	lsrs	r0, r0, #31
 8008164:	b002      	add	sp, #8
 8008166:	4770      	bx	lr

08008168 <_init>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	bf00      	nop
 800816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816e:	bc08      	pop	{r3}
 8008170:	469e      	mov	lr, r3
 8008172:	4770      	bx	lr

08008174 <_fini>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr
